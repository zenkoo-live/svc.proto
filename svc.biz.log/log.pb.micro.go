// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.log/log.proto

package log

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Log service

type LogService interface {
	// AddLog 记录日志
	AddLog(ctx context.Context, in *AddLogReq, opts ...client.CallOption) (*AddLogResp, error)
	// MGetLastLog 批量获取最近一次操作
	MGetLastLog(ctx context.Context, in *MGetLastLogReq, opts ...client.CallOption) (*MGetLastLogResp, error)
}

type logService struct {
	c    client.Client
	name string
}

func NewLogService(name string, c client.Client) LogService {
	return &logService{
		c:    c,
		name: name,
	}
}

func (c *logService) AddLog(ctx context.Context, in *AddLogReq, opts ...client.CallOption) (*AddLogResp, error) {
	req := c.c.NewRequest(c.name, "Log.AddLog", in)
	out := new(AddLogResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) MGetLastLog(ctx context.Context, in *MGetLastLogReq, opts ...client.CallOption) (*MGetLastLogResp, error) {
	req := c.c.NewRequest(c.name, "Log.MGetLastLog", in)
	out := new(MGetLastLogResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogHandler interface {
	// AddLog 记录日志
	AddLog(context.Context, *AddLogReq, *AddLogResp) error
	// MGetLastLog 批量获取最近一次操作
	MGetLastLog(context.Context, *MGetLastLogReq, *MGetLastLogResp) error
}

func RegisterLogHandler(s server.Server, hdlr LogHandler, opts ...server.HandlerOption) error {
	type log interface {
		AddLog(ctx context.Context, in *AddLogReq, out *AddLogResp) error
		MGetLastLog(ctx context.Context, in *MGetLastLogReq, out *MGetLastLogResp) error
	}
	type Log struct {
		log
	}
	h := &logHandler{hdlr}
	return s.Handle(s.NewHandler(&Log{h}, opts...))
}

type logHandler struct {
	LogHandler
}

func (h *logHandler) AddLog(ctx context.Context, in *AddLogReq, out *AddLogResp) error {
	return h.LogHandler.AddLog(ctx, in, out)
}

func (h *logHandler) MGetLastLog(ctx context.Context, in *MGetLastLogReq, out *MGetLastLogResp) error {
	return h.LogHandler.MGetLastLog(ctx, in, out)
}
