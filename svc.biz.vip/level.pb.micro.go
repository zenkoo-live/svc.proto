// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.vip/level.proto

package vip

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Level service

func NewLevelEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Level service

type LevelService interface {
	// GetMemberLevel 获取成员等级
	GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...client.CallOption) (*GetMemberLevelResp, error)
}

type levelService struct {
	c    client.Client
	name string
}

func NewLevelService(name string, c client.Client) LevelService {
	return &levelService{
		c:    c,
		name: name,
	}
}

func (c *levelService) GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...client.CallOption) (*GetMemberLevelResp, error) {
	req := c.c.NewRequest(c.name, "Level.GetMemberLevel", in)
	out := new(GetMemberLevelResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Level service

type LevelHandler interface {
	// GetMemberLevel 获取成员等级
	GetMemberLevel(context.Context, *GetMemberLevelReq, *GetMemberLevelResp) error
}

func RegisterLevelHandler(s server.Server, hdlr LevelHandler, opts ...server.HandlerOption) error {
	type level interface {
		GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, out *GetMemberLevelResp) error
	}
	type Level struct {
		level
	}
	h := &levelHandler{hdlr}
	return s.Handle(s.NewHandler(&Level{h}, opts...))
}

type levelHandler struct {
	LevelHandler
}

func (h *levelHandler) GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, out *GetMemberLevelResp) error {
	return h.LevelHandler.GetMemberLevel(ctx, in, out)
}
