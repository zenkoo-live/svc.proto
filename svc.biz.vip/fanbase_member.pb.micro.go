// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.vip/fanbase_member.proto

package vip

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FanbaseMember service

func NewFanbaseMemberEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FanbaseMember service

type FanbaseMemberService interface {
	// JoinFanbase 加入粉丝团
	JoinFanbase(ctx context.Context, in *JoinFanbaseReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// LeaveFanbase 离开粉丝团
	LeaveFanbase(ctx context.Context, in *LeaveFanbaseReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// GetFanbaseMember 获取粉丝团成员信息
	GetFanbaseMember(ctx context.Context, in *GetFanbaseMemberReq, opts ...client.CallOption) (*GetFanbaseMemberResp, error)
	// GeFanbaseMemberByStreamerID 获取主播粉丝团成员列表
	GetFanbaseMemberByStreamerID(ctx context.Context, in *GetFanbaseMemberByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error)
	// GetOnlineFanbaseMemberByStreamerID 获取主播粉丝团在线成员列表
	GetOnlineFanbaseMemberByStreamerID(ctx context.Context, in *GetOnlineFanbaseMemberByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error)
	// GetFanbaseMembertByMemberID 获取用户加入的粉丝团列表
	GetFanbaseMembertByMemberID(ctx context.Context, in *GetFanbaseMembertByMemberIDResp, opts ...client.CallOption) (*GetListResp, error)
}

type fanbaseMemberService struct {
	c    client.Client
	name string
}

func NewFanbaseMemberService(name string, c client.Client) FanbaseMemberService {
	return &fanbaseMemberService{
		c:    c,
		name: name,
	}
}

func (c *fanbaseMemberService) JoinFanbase(ctx context.Context, in *JoinFanbaseReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.JoinFanbase", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanbaseMemberService) LeaveFanbase(ctx context.Context, in *LeaveFanbaseReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.LeaveFanbase", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanbaseMemberService) GetFanbaseMember(ctx context.Context, in *GetFanbaseMemberReq, opts ...client.CallOption) (*GetFanbaseMemberResp, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.GetFanbaseMember", in)
	out := new(GetFanbaseMemberResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanbaseMemberService) GetFanbaseMemberByStreamerID(ctx context.Context, in *GetFanbaseMemberByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.GetFanbaseMemberByStreamerID", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanbaseMemberService) GetOnlineFanbaseMemberByStreamerID(ctx context.Context, in *GetOnlineFanbaseMemberByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.GetOnlineFanbaseMemberByStreamerID", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanbaseMemberService) GetFanbaseMembertByMemberID(ctx context.Context, in *GetFanbaseMembertByMemberIDResp, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "FanbaseMember.GetFanbaseMembertByMemberID", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FanbaseMember service

type FanbaseMemberHandler interface {
	// JoinFanbase 加入粉丝团
	JoinFanbase(context.Context, *JoinFanbaseReq, *emptypb.Empty) error
	// LeaveFanbase 离开粉丝团
	LeaveFanbase(context.Context, *LeaveFanbaseReq, *emptypb.Empty) error
	// GetFanbaseMember 获取粉丝团成员信息
	GetFanbaseMember(context.Context, *GetFanbaseMemberReq, *GetFanbaseMemberResp) error
	// GeFanbaseMemberByStreamerID 获取主播粉丝团成员列表
	GetFanbaseMemberByStreamerID(context.Context, *GetFanbaseMemberByStreamerIDReq, *GetListResp) error
	// GetOnlineFanbaseMemberByStreamerID 获取主播粉丝团在线成员列表
	GetOnlineFanbaseMemberByStreamerID(context.Context, *GetOnlineFanbaseMemberByStreamerIDReq, *GetListResp) error
	// GetFanbaseMembertByMemberID 获取用户加入的粉丝团列表
	GetFanbaseMembertByMemberID(context.Context, *GetFanbaseMembertByMemberIDResp, *GetListResp) error
}

func RegisterFanbaseMemberHandler(s server.Server, hdlr FanbaseMemberHandler, opts ...server.HandlerOption) error {
	type fanbaseMember interface {
		JoinFanbase(ctx context.Context, in *JoinFanbaseReq, out *emptypb.Empty) error
		LeaveFanbase(ctx context.Context, in *LeaveFanbaseReq, out *emptypb.Empty) error
		GetFanbaseMember(ctx context.Context, in *GetFanbaseMemberReq, out *GetFanbaseMemberResp) error
		GetFanbaseMemberByStreamerID(ctx context.Context, in *GetFanbaseMemberByStreamerIDReq, out *GetListResp) error
		GetOnlineFanbaseMemberByStreamerID(ctx context.Context, in *GetOnlineFanbaseMemberByStreamerIDReq, out *GetListResp) error
		GetFanbaseMembertByMemberID(ctx context.Context, in *GetFanbaseMembertByMemberIDResp, out *GetListResp) error
	}
	type FanbaseMember struct {
		fanbaseMember
	}
	h := &fanbaseMemberHandler{hdlr}
	return s.Handle(s.NewHandler(&FanbaseMember{h}, opts...))
}

type fanbaseMemberHandler struct {
	FanbaseMemberHandler
}

func (h *fanbaseMemberHandler) JoinFanbase(ctx context.Context, in *JoinFanbaseReq, out *emptypb.Empty) error {
	return h.FanbaseMemberHandler.JoinFanbase(ctx, in, out)
}

func (h *fanbaseMemberHandler) LeaveFanbase(ctx context.Context, in *LeaveFanbaseReq, out *emptypb.Empty) error {
	return h.FanbaseMemberHandler.LeaveFanbase(ctx, in, out)
}

func (h *fanbaseMemberHandler) GetFanbaseMember(ctx context.Context, in *GetFanbaseMemberReq, out *GetFanbaseMemberResp) error {
	return h.FanbaseMemberHandler.GetFanbaseMember(ctx, in, out)
}

func (h *fanbaseMemberHandler) GetFanbaseMemberByStreamerID(ctx context.Context, in *GetFanbaseMemberByStreamerIDReq, out *GetListResp) error {
	return h.FanbaseMemberHandler.GetFanbaseMemberByStreamerID(ctx, in, out)
}

func (h *fanbaseMemberHandler) GetOnlineFanbaseMemberByStreamerID(ctx context.Context, in *GetOnlineFanbaseMemberByStreamerIDReq, out *GetListResp) error {
	return h.FanbaseMemberHandler.GetOnlineFanbaseMemberByStreamerID(ctx, in, out)
}

func (h *fanbaseMemberHandler) GetFanbaseMembertByMemberID(ctx context.Context, in *GetFanbaseMembertByMemberIDResp, out *GetListResp) error {
	return h.FanbaseMemberHandler.GetFanbaseMembertByMemberID(ctx, in, out)
}
