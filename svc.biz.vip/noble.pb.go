// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: svc.biz.vip/noble.proto

package vip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NobleLevel int32

const (
	NobleLevel_NobleLevelUnknown  NobleLevel = 0 // 未知
	NobleLevel_NobleLevelKnight   NobleLevel = 1 // 骑士
	NobleLevel_NobleLevelViscount NobleLevel = 2 // 子爵
	NobleLevel_NobleLevelEarl     NobleLevel = 3 // 伯爵
	NobleLevel_NobleLevelMarquis  NobleLevel = 4 // 侯爵
	NobleLevel_NobleLevelDuke     NobleLevel = 5 // 公爵
	NobleLevel_NobleLevelKing     NobleLevel = 6 // 国王
)

// Enum value maps for NobleLevel.
var (
	NobleLevel_name = map[int32]string{
		0: "NobleLevelUnknown",
		1: "NobleLevelKnight",
		2: "NobleLevelViscount",
		3: "NobleLevelEarl",
		4: "NobleLevelMarquis",
		5: "NobleLevelDuke",
		6: "NobleLevelKing",
	}
	NobleLevel_value = map[string]int32{
		"NobleLevelUnknown":  0,
		"NobleLevelKnight":   1,
		"NobleLevelViscount": 2,
		"NobleLevelEarl":     3,
		"NobleLevelMarquis":  4,
		"NobleLevelDuke":     5,
		"NobleLevelKing":     6,
	}
)

func (x NobleLevel) Enum() *NobleLevel {
	p := new(NobleLevel)
	*p = x
	return p
}

func (x NobleLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NobleLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_vip_noble_proto_enumTypes[0].Descriptor()
}

func (NobleLevel) Type() protoreflect.EnumType {
	return &file_svc_biz_vip_noble_proto_enumTypes[0]
}

func (x NobleLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NobleLevel.Descriptor instead.
func (NobleLevel) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{0}
}

type CreateNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *CreateNobleReq) Reset() {
	*x = CreateNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNobleReq) ProtoMessage() {}

func (x *CreateNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNobleReq.ProtoReflect.Descriptor instead.
func (*CreateNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNobleReq) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type CreateNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *CreateNobleResp) Reset() {
	*x = CreateNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNobleResp) ProtoMessage() {}

func (x *CreateNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNobleResp.ProtoReflect.Descriptor instead.
func (*CreateNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNobleResp) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type GetNobleByLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level NobleLevel `protobuf:"varint,1,opt,name=level,proto3,enum=svc.biz.vip.NobleLevel" json:"level,omitempty"`
}

func (x *GetNobleByLevelReq) Reset() {
	*x = GetNobleByLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleByLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleByLevelReq) ProtoMessage() {}

func (x *GetNobleByLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleByLevelReq.ProtoReflect.Descriptor instead.
func (*GetNobleByLevelReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{2}
}

func (x *GetNobleByLevelReq) GetLevel() NobleLevel {
	if x != nil {
		return x.Level
	}
	return NobleLevel_NobleLevelUnknown
}

type GetNobleByLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *GetNobleByLevelResp) Reset() {
	*x = GetNobleByLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleByLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleByLevelResp) ProtoMessage() {}

func (x *GetNobleByLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleByLevelResp.ProtoReflect.Descriptor instead.
func (*GetNobleByLevelResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{3}
}

func (x *GetNobleByLevelResp) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type GetNobleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNobleListReq) Reset() {
	*x = GetNobleListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleListReq) ProtoMessage() {}

func (x *GetNobleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleListReq.ProtoReflect.Descriptor instead.
func (*GetNobleListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{4}
}

type GetNobleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NobleInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetNobleListResp) Reset() {
	*x = GetNobleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleListResp) ProtoMessage() {}

func (x *GetNobleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleListResp.ProtoReflect.Descriptor instead.
func (*GetNobleListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{5}
}

func (x *GetNobleListResp) GetItems() []*NobleInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateNobleByLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      NobleLevel             `protobuf:"varint,1,opt,name=level,proto3,enum=svc.biz.vip.NobleLevel" json:"level,omitempty"`
	Noble      *NobleInfo             `protobuf:"bytes,2,opt,name=noble,proto3" json:"noble,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateNobleByLevelReq) Reset() {
	*x = UpdateNobleByLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNobleByLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNobleByLevelReq) ProtoMessage() {}

func (x *UpdateNobleByLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNobleByLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateNobleByLevelReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNobleByLevelReq) GetLevel() NobleLevel {
	if x != nil {
		return x.Level
	}
	return NobleLevel_NobleLevelUnknown
}

func (x *UpdateNobleByLevelReq) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

func (x *UpdateNobleByLevelReq) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateNobleByLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNobleByLevelResp) Reset() {
	*x = UpdateNobleByLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNobleByLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNobleByLevelResp) ProtoMessage() {}

func (x *UpdateNobleByLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNobleByLevelResp.ProtoReflect.Descriptor instead.
func (*UpdateNobleByLevelResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{7}
}

type NobleRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RightsIcon             string                     `protobuf:"bytes,1,opt,name=rights_icon,json=rightsIcon,proto3" json:"rights_icon,omitempty"`                                          // 身份标签
	RightsAvoidKick        bool                       `protobuf:"varint,2,opt,name=rights_avoid_kick,json=rightsAvoidKick,proto3" json:"rights_avoid_kick,omitempty"`                        // 防踢
	RightsAvoidBanSpeaking bool                       `protobuf:"varint,3,opt,name=rights_avoid_ban_speaking,json=rightsAvoidBanSpeaking,proto3" json:"rights_avoid_ban_speaking,omitempty"` // 防禁言
	RightsIdentityIcon     bool                       `protobuf:"varint,4,opt,name=rights_identity_icon,json=rightsIdentityIcon,proto3" json:"rights_identity_icon,omitempty"`               // 身份标签（所有贵族都有，此字段不入库默认为true）
	RightsUpgradeAddition  int32                      `protobuf:"varint,5,opt,name=rights_upgrade_addition,json=rightsUpgradeAddition,proto3" json:"rights_upgrade_addition,omitempty"`      // 升级加成（保存的是加成比例，20%的话，存的是数字20）
	RightsInroomEffect     bool                       `protobuf:"varint,6,opt,name=rights_inroom_effect,json=rightsInroomEffect,proto3" json:"rights_inroom_effect,omitempty"`               // 进场特效（所有贵族都有，此字段不入库默认为true）
	RightsBarrageColors    []string                   `protobuf:"bytes,7,rep,name=rights_barrage_colors,json=rightsBarrageColors,proto3" json:"rights_barrage_colors,omitempty"`             // 弹幕颜色
	RightsRemandDiamond    bool                       `protobuf:"varint,8,opt,name=rights_remand_diamond,json=rightsRemandDiamond,proto3" json:"rights_remand_diamond,omitempty"`            // 专属俸禄（所有贵族都有，此字段不入库默认为true）
	RightsMounts           []string                   `protobuf:"bytes,9,rep,name=rights_mounts,json=rightsMounts,proto3" json:"rights_mounts,omitempty"`                                    // 坐骑（进场特效）
	RightsFreeGifts        []*NobleRightsFreeGift     `protobuf:"bytes,10,rep,name=rights_free_gifts,json=rightsFreeGifts,proto3" json:"rights_free_gifts,omitempty"`                        // 免费礼物
	RightsNobleGift        bool                       `protobuf:"varint,11,opt,name=rights_noble_gift,json=rightsNobleGift,proto3" json:"rights_noble_gift,omitempty"`                       // 专属礼物（所有贵族都有，此字段不入库默认为true）
	RightsIntoRoomHide     bool                       `protobuf:"varint,12,opt,name=rights_into_room_hide,json=rightsIntoRoomHide,proto3" json:"rights_into_room_hide,omitempty"`            // 进场隐身
	RightsRankHide         bool                       `protobuf:"varint,13,opt,name=rights_rank_hide,json=rightsRankHide,proto3" json:"rights_rank_hide,omitempty"`                          // 榜单隐身
	RightsDiscountGifts    []*NobleRightsDiscountGift `protobuf:"bytes,14,rep,name=rights_discount_gifts,json=rightsDiscountGifts,proto3" json:"rights_discount_gifts,omitempty"`            // 特价礼物
}

func (x *NobleRights) Reset() {
	*x = NobleRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRights) ProtoMessage() {}

func (x *NobleRights) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRights.ProtoReflect.Descriptor instead.
func (*NobleRights) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{8}
}

func (x *NobleRights) GetRightsIcon() string {
	if x != nil {
		return x.RightsIcon
	}
	return ""
}

func (x *NobleRights) GetRightsAvoidKick() bool {
	if x != nil {
		return x.RightsAvoidKick
	}
	return false
}

func (x *NobleRights) GetRightsAvoidBanSpeaking() bool {
	if x != nil {
		return x.RightsAvoidBanSpeaking
	}
	return false
}

func (x *NobleRights) GetRightsIdentityIcon() bool {
	if x != nil {
		return x.RightsIdentityIcon
	}
	return false
}

func (x *NobleRights) GetRightsUpgradeAddition() int32 {
	if x != nil {
		return x.RightsUpgradeAddition
	}
	return 0
}

func (x *NobleRights) GetRightsInroomEffect() bool {
	if x != nil {
		return x.RightsInroomEffect
	}
	return false
}

func (x *NobleRights) GetRightsBarrageColors() []string {
	if x != nil {
		return x.RightsBarrageColors
	}
	return nil
}

func (x *NobleRights) GetRightsRemandDiamond() bool {
	if x != nil {
		return x.RightsRemandDiamond
	}
	return false
}

func (x *NobleRights) GetRightsMounts() []string {
	if x != nil {
		return x.RightsMounts
	}
	return nil
}

func (x *NobleRights) GetRightsFreeGifts() []*NobleRightsFreeGift {
	if x != nil {
		return x.RightsFreeGifts
	}
	return nil
}

func (x *NobleRights) GetRightsNobleGift() bool {
	if x != nil {
		return x.RightsNobleGift
	}
	return false
}

func (x *NobleRights) GetRightsIntoRoomHide() bool {
	if x != nil {
		return x.RightsIntoRoomHide
	}
	return false
}

func (x *NobleRights) GetRightsRankHide() bool {
	if x != nil {
		return x.RightsRankHide
	}
	return false
}

func (x *NobleRights) GetRightsDiscountGifts() []*NobleRightsDiscountGift {
	if x != nil {
		return x.RightsDiscountGifts
	}
	return nil
}

type NobleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level              NobleLevel             `protobuf:"varint,1,opt,name=level,proto3,enum=svc.biz.vip.NobleLevel" json:"level,omitempty"`                           // 等级
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                          // 名称
	FirstOpenPrice     int32                  `protobuf:"varint,3,opt,name=first_open_price,json=firstOpenPrice,proto3" json:"first_open_price,omitempty"`             // 首次开通价格
	FirstRemandDiamond int32                  `protobuf:"varint,4,opt,name=first_remand_diamond,json=firstRemandDiamond,proto3" json:"first_remand_diamond,omitempty"` // 首次开通奖励金
	RenewPrice         int32                  `protobuf:"varint,5,opt,name=renew_price,json=renewPrice,proto3" json:"renew_price,omitempty"`                           // 续费价格
	RenewRemandDiamond int32                  `protobuf:"varint,6,opt,name=renew_remand_diamond,json=renewRemandDiamond,proto3" json:"renew_remand_diamond,omitempty"` // 续费奖励金
	Rights             *NobleRights           `protobuf:"bytes,100,opt,name=rights,proto3" json:"rights,omitempty"`                                                    // 权益
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,201,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 创建时间
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,202,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                             // 更新时间
}

func (x *NobleInfo) Reset() {
	*x = NobleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleInfo) ProtoMessage() {}

func (x *NobleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleInfo.ProtoReflect.Descriptor instead.
func (*NobleInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{9}
}

func (x *NobleInfo) GetLevel() NobleLevel {
	if x != nil {
		return x.Level
	}
	return NobleLevel_NobleLevelUnknown
}

func (x *NobleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NobleInfo) GetFirstOpenPrice() int32 {
	if x != nil {
		return x.FirstOpenPrice
	}
	return 0
}

func (x *NobleInfo) GetFirstRemandDiamond() int32 {
	if x != nil {
		return x.FirstRemandDiamond
	}
	return 0
}

func (x *NobleInfo) GetRenewPrice() int32 {
	if x != nil {
		return x.RenewPrice
	}
	return 0
}

func (x *NobleInfo) GetRenewRemandDiamond() int32 {
	if x != nil {
		return x.RenewRemandDiamond
	}
	return 0
}

func (x *NobleInfo) GetRights() *NobleRights {
	if x != nil {
		return x.Rights
	}
	return nil
}

func (x *NobleInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NobleInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type NobleRightsFreeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"` // 礼物id
	Num    int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                    // 个数
}

func (x *NobleRightsFreeGift) Reset() {
	*x = NobleRightsFreeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRightsFreeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRightsFreeGift) ProtoMessage() {}

func (x *NobleRightsFreeGift) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRightsFreeGift.ProtoReflect.Descriptor instead.
func (*NobleRightsFreeGift) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{10}
}

func (x *NobleRightsFreeGift) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *NobleRightsFreeGift) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type NobleRightsDiscountGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId        string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`                       // 礼物id
	DiscountPrice int32  `protobuf:"varint,2,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"` // 折扣价格
}

func (x *NobleRightsDiscountGift) Reset() {
	*x = NobleRightsDiscountGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRightsDiscountGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRightsDiscountGift) ProtoMessage() {}

func (x *NobleRightsDiscountGift) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRightsDiscountGift.ProtoReflect.Descriptor instead.
func (*NobleRightsDiscountGift) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{11}
}

func (x *NobleRightsDiscountGift) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *NobleRightsDiscountGift) GetDiscountPrice() int32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

var File_svc_biz_vip_noble_proto protoreflect.FileDescriptor

var file_svc_biz_vip_noble_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x05, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70,
	0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e,
	0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x18, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xef, 0x05, 0x0a, 0x0b, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x76, 0x6f, 0x69, 0x64,
	0x4b, 0x69, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x61,
	0x76, 0x6f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x76, 0x6f, 0x69, 0x64, 0x42, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49,
	0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x52, 0x6f, 0x6f,
	0x6d, 0x48, 0x69, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x69, 0x64, 0x65, 0x12,
	0x58, 0x0a, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x09, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x59, 0x0a, 0x17, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x2a, 0xa4, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x61, 0x72, 0x6c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x71, 0x75, 0x69, 0x73, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x75, 0x6b,
	0x65, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4b, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x32, 0xdb, 0x02, 0x0a, 0x05, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x3b, 0x76, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_svc_biz_vip_noble_proto_rawDescOnce sync.Once
	file_svc_biz_vip_noble_proto_rawDescData = file_svc_biz_vip_noble_proto_rawDesc
)

func file_svc_biz_vip_noble_proto_rawDescGZIP() []byte {
	file_svc_biz_vip_noble_proto_rawDescOnce.Do(func() {
		file_svc_biz_vip_noble_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_vip_noble_proto_rawDescData)
	})
	return file_svc_biz_vip_noble_proto_rawDescData
}

var file_svc_biz_vip_noble_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_svc_biz_vip_noble_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_svc_biz_vip_noble_proto_goTypes = []any{
	(NobleLevel)(0),                 // 0: svc.biz.vip.NobleLevel
	(*CreateNobleReq)(nil),          // 1: svc.biz.vip.CreateNobleReq
	(*CreateNobleResp)(nil),         // 2: svc.biz.vip.CreateNobleResp
	(*GetNobleByLevelReq)(nil),      // 3: svc.biz.vip.GetNobleByLevelReq
	(*GetNobleByLevelResp)(nil),     // 4: svc.biz.vip.GetNobleByLevelResp
	(*GetNobleListReq)(nil),         // 5: svc.biz.vip.GetNobleListReq
	(*GetNobleListResp)(nil),        // 6: svc.biz.vip.GetNobleListResp
	(*UpdateNobleByLevelReq)(nil),   // 7: svc.biz.vip.UpdateNobleByLevelReq
	(*UpdateNobleByLevelResp)(nil),  // 8: svc.biz.vip.UpdateNobleByLevelResp
	(*NobleRights)(nil),             // 9: svc.biz.vip.NobleRights
	(*NobleInfo)(nil),               // 10: svc.biz.vip.NobleInfo
	(*NobleRightsFreeGift)(nil),     // 11: svc.biz.vip.NobleRightsFreeGift
	(*NobleRightsDiscountGift)(nil), // 12: svc.biz.vip.NobleRightsDiscountGift
	(*fieldmaskpb.FieldMask)(nil),   // 13: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),   // 14: google.protobuf.Timestamp
}
var file_svc_biz_vip_noble_proto_depIdxs = []int32{
	10, // 0: svc.biz.vip.CreateNobleReq.noble:type_name -> svc.biz.vip.NobleInfo
	10, // 1: svc.biz.vip.CreateNobleResp.noble:type_name -> svc.biz.vip.NobleInfo
	0,  // 2: svc.biz.vip.GetNobleByLevelReq.level:type_name -> svc.biz.vip.NobleLevel
	10, // 3: svc.biz.vip.GetNobleByLevelResp.noble:type_name -> svc.biz.vip.NobleInfo
	10, // 4: svc.biz.vip.GetNobleListResp.items:type_name -> svc.biz.vip.NobleInfo
	0,  // 5: svc.biz.vip.UpdateNobleByLevelReq.level:type_name -> svc.biz.vip.NobleLevel
	10, // 6: svc.biz.vip.UpdateNobleByLevelReq.noble:type_name -> svc.biz.vip.NobleInfo
	13, // 7: svc.biz.vip.UpdateNobleByLevelReq.update_mask:type_name -> google.protobuf.FieldMask
	11, // 8: svc.biz.vip.NobleRights.rights_free_gifts:type_name -> svc.biz.vip.NobleRightsFreeGift
	12, // 9: svc.biz.vip.NobleRights.rights_discount_gifts:type_name -> svc.biz.vip.NobleRightsDiscountGift
	0,  // 10: svc.biz.vip.NobleInfo.level:type_name -> svc.biz.vip.NobleLevel
	9,  // 11: svc.biz.vip.NobleInfo.rights:type_name -> svc.biz.vip.NobleRights
	14, // 12: svc.biz.vip.NobleInfo.created_at:type_name -> google.protobuf.Timestamp
	14, // 13: svc.biz.vip.NobleInfo.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 14: svc.biz.vip.Noble.CreateNoble:input_type -> svc.biz.vip.CreateNobleReq
	3,  // 15: svc.biz.vip.Noble.GetNobleByLevel:input_type -> svc.biz.vip.GetNobleByLevelReq
	5,  // 16: svc.biz.vip.Noble.GetNobleList:input_type -> svc.biz.vip.GetNobleListReq
	7,  // 17: svc.biz.vip.Noble.UpdateNobleByLevel:input_type -> svc.biz.vip.UpdateNobleByLevelReq
	2,  // 18: svc.biz.vip.Noble.CreateNoble:output_type -> svc.biz.vip.CreateNobleResp
	4,  // 19: svc.biz.vip.Noble.GetNobleByLevel:output_type -> svc.biz.vip.GetNobleByLevelResp
	6,  // 20: svc.biz.vip.Noble.GetNobleList:output_type -> svc.biz.vip.GetNobleListResp
	8,  // 21: svc.biz.vip.Noble.UpdateNobleByLevel:output_type -> svc.biz.vip.UpdateNobleByLevelResp
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_svc_biz_vip_noble_proto_init() }
func file_svc_biz_vip_noble_proto_init() {
	if File_svc_biz_vip_noble_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_vip_noble_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleByLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleByLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateNobleByLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateNobleByLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NobleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRightsFreeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRightsDiscountGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_vip_noble_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_vip_noble_proto_goTypes,
		DependencyIndexes: file_svc_biz_vip_noble_proto_depIdxs,
		EnumInfos:         file_svc_biz_vip_noble_proto_enumTypes,
		MessageInfos:      file_svc_biz_vip_noble_proto_msgTypes,
	}.Build()
	File_svc_biz_vip_noble_proto = out.File
	file_svc_biz_vip_noble_proto_rawDesc = nil
	file_svc_biz_vip_noble_proto_goTypes = nil
	file_svc_biz_vip_noble_proto_depIdxs = nil
}
