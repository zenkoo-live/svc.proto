// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: svc.biz.vip/noble.proto

package vip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *CreateNobleReq) Reset() {
	*x = CreateNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNobleReq) ProtoMessage() {}

func (x *CreateNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNobleReq.ProtoReflect.Descriptor instead.
func (*CreateNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNobleReq) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type CreateNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *CreateNobleResp) Reset() {
	*x = CreateNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNobleResp) ProtoMessage() {}

func (x *CreateNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNobleResp.ProtoReflect.Descriptor instead.
func (*CreateNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNobleResp) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type GetNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId string `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`
}

func (x *GetNobleReq) Reset() {
	*x = GetNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleReq) ProtoMessage() {}

func (x *GetNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleReq.ProtoReflect.Descriptor instead.
func (*GetNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{2}
}

func (x *GetNobleReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

type GetNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noble *NobleInfo `protobuf:"bytes,1,opt,name=noble,proto3" json:"noble,omitempty"`
}

func (x *GetNobleResp) Reset() {
	*x = GetNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleResp) ProtoMessage() {}

func (x *GetNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleResp.ProtoReflect.Descriptor instead.
func (*GetNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{3}
}

func (x *GetNobleResp) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type GetNobleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNobleListReq) Reset() {
	*x = GetNobleListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleListReq) ProtoMessage() {}

func (x *GetNobleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleListReq.ProtoReflect.Descriptor instead.
func (*GetNobleListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{4}
}

type GetNobleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NobleInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetNobleListResp) Reset() {
	*x = GetNobleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleListResp) ProtoMessage() {}

func (x *GetNobleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleListResp.ProtoReflect.Descriptor instead.
func (*GetNobleListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{5}
}

func (x *GetNobleListResp) GetItems() []*NobleInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId    string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"` // 贵族id
	Noble      *NobleInfo             `protobuf:"bytes,2,opt,name=noble,proto3" json:"noble,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateNobleReq) Reset() {
	*x = UpdateNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNobleReq) ProtoMessage() {}

func (x *UpdateNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNobleReq.ProtoReflect.Descriptor instead.
func (*UpdateNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNobleReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *UpdateNobleReq) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

func (x *UpdateNobleReq) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNobleResp) Reset() {
	*x = UpdateNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNobleResp) ProtoMessage() {}

func (x *UpdateNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNobleResp.ProtoReflect.Descriptor instead.
func (*UpdateNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{7}
}

//	enum NobleLevel {
//	    NobleLevelUnknown = 0; // 未知
//	    NobleLevelKnight = 1; // 骑士
//	    NobleLevelViscount = 2; // 子爵
//	    NobleLevelEarl = 3; // 伯爵
//	    NobleLevelMarquis = 4; // 侯爵
//	    NobleLevelDuke = 5; // 公爵
//	    NobleLevelKing = 6; // 国王
//	}
type NobleRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RightsIcon             string                     `protobuf:"bytes,1,opt,name=rights_icon,json=rightsIcon,proto3" json:"rights_icon,omitempty"`                                          // 身份标签
	RightsAvoidKick        bool                       `protobuf:"varint,2,opt,name=rights_avoid_kick,json=rightsAvoidKick,proto3" json:"rights_avoid_kick,omitempty"`                        // 防踢
	RightsAvoidBanSpeaking bool                       `protobuf:"varint,3,opt,name=rights_avoid_ban_speaking,json=rightsAvoidBanSpeaking,proto3" json:"rights_avoid_ban_speaking,omitempty"` // 防禁言
	RightsUpgradeAddition  int32                      `protobuf:"varint,4,opt,name=rights_upgrade_addition,json=rightsUpgradeAddition,proto3" json:"rights_upgrade_addition,omitempty"`      // 升级加成（保存的是加成比例，20%的话，存的是数字20）
	RightsBarrageColors    []string                   `protobuf:"bytes,5,rep,name=rights_barrage_colors,json=rightsBarrageColors,proto3" json:"rights_barrage_colors,omitempty"`             // 弹幕颜色
	RightsMounts           []string                   `protobuf:"bytes,6,rep,name=rights_mounts,json=rightsMounts,proto3" json:"rights_mounts,omitempty"`                                    // 坐骑（进场特效）
	RightsFreeGifts        []*NobleRightsFreeGift     `protobuf:"bytes,7,rep,name=rights_free_gifts,json=rightsFreeGifts,proto3" json:"rights_free_gifts,omitempty"`                         // 免费礼物
	RightsEnterRoomHide    bool                       `protobuf:"varint,8,opt,name=rights_enter_room_hide,json=rightsEnterRoomHide,proto3" json:"rights_enter_room_hide,omitempty"`          // 进场隐身
	RightsRankHide         bool                       `protobuf:"varint,9,opt,name=rights_rank_hide,json=rightsRankHide,proto3" json:"rights_rank_hide,omitempty"`                           // 榜单隐身
	RightsDiscountGifts    []*NobleRightsDiscountGift `protobuf:"bytes,10,rep,name=rights_discount_gifts,json=rightsDiscountGifts,proto3" json:"rights_discount_gifts,omitempty"`            // 特价礼物
	RightsGlobalNotify     bool                       `protobuf:"varint,11,opt,name=rights_global_notify,json=rightsGlobalNotify,proto3" json:"rights_global_notify,omitempty"`              // 全局通知
	RightsEnterRoomEffect  string                     `protobuf:"bytes,12,opt,name=rights_enter_room_effect,json=rightsEnterRoomEffect,proto3" json:"rights_enter_room_effect,omitempty"`    // 进场特效
}

func (x *NobleRights) Reset() {
	*x = NobleRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRights) ProtoMessage() {}

func (x *NobleRights) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRights.ProtoReflect.Descriptor instead.
func (*NobleRights) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{8}
}

func (x *NobleRights) GetRightsIcon() string {
	if x != nil {
		return x.RightsIcon
	}
	return ""
}

func (x *NobleRights) GetRightsAvoidKick() bool {
	if x != nil {
		return x.RightsAvoidKick
	}
	return false
}

func (x *NobleRights) GetRightsAvoidBanSpeaking() bool {
	if x != nil {
		return x.RightsAvoidBanSpeaking
	}
	return false
}

func (x *NobleRights) GetRightsUpgradeAddition() int32 {
	if x != nil {
		return x.RightsUpgradeAddition
	}
	return 0
}

func (x *NobleRights) GetRightsBarrageColors() []string {
	if x != nil {
		return x.RightsBarrageColors
	}
	return nil
}

func (x *NobleRights) GetRightsMounts() []string {
	if x != nil {
		return x.RightsMounts
	}
	return nil
}

func (x *NobleRights) GetRightsFreeGifts() []*NobleRightsFreeGift {
	if x != nil {
		return x.RightsFreeGifts
	}
	return nil
}

func (x *NobleRights) GetRightsEnterRoomHide() bool {
	if x != nil {
		return x.RightsEnterRoomHide
	}
	return false
}

func (x *NobleRights) GetRightsRankHide() bool {
	if x != nil {
		return x.RightsRankHide
	}
	return false
}

func (x *NobleRights) GetRightsDiscountGifts() []*NobleRightsDiscountGift {
	if x != nil {
		return x.RightsDiscountGifts
	}
	return nil
}

func (x *NobleRights) GetRightsGlobalNotify() bool {
	if x != nil {
		return x.RightsGlobalNotify
	}
	return false
}

func (x *NobleRights) GetRightsEnterRoomEffect() string {
	if x != nil {
		return x.RightsEnterRoomEffect
	}
	return ""
}

type NobleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId              string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`                                            // 贵族id
	Level                int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                              // 等级（排序）
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                 // 名称
	Icon                 string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                                                                 // 贵族图标
	OpenPrice            int32                  `protobuf:"varint,5,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                                     // 开通价格
	RemandDiamond        int32                  `protobuf:"varint,6,opt,name=remand_diamond,json=remandDiamond,proto3" json:"remand_diamond,omitempty"`                         // 开通奖励金
	RenewPrice           int32                  `protobuf:"varint,7,opt,name=renew_price,json=renewPrice,proto3" json:"renew_price,omitempty"`                                  // 续费价格
	RenewRemandDiamond   int32                  `protobuf:"varint,8,opt,name=renew_remand_diamond,json=renewRemandDiamond,proto3" json:"renew_remand_diamond,omitempty"`        // 续费奖励金
	UpgradePrice         int32                  `protobuf:"varint,9,opt,name=upgrade_price,json=upgradePrice,proto3" json:"upgrade_price,omitempty"`                            // 升级价格
	UpgradeRemandDiamond int32                  `protobuf:"varint,10,opt,name=upgrade_remand_diamond,json=upgradeRemandDiamond,proto3" json:"upgrade_remand_diamond,omitempty"` // 升级奖励金
	Rights               *NobleRights           `protobuf:"bytes,100,opt,name=rights,proto3" json:"rights,omitempty"`                                                           // 权益
	RightsNum            int32                  `protobuf:"varint,101,opt,name=rights_num,json=rightsNum,proto3" json:"rights_num,omitempty"`                                   // 权益数量
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,201,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                    // 创建时间
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,202,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                    // 更新时间
}

func (x *NobleInfo) Reset() {
	*x = NobleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleInfo) ProtoMessage() {}

func (x *NobleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleInfo.ProtoReflect.Descriptor instead.
func (*NobleInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{9}
}

func (x *NobleInfo) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *NobleInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *NobleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NobleInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *NobleInfo) GetOpenPrice() int32 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *NobleInfo) GetRemandDiamond() int32 {
	if x != nil {
		return x.RemandDiamond
	}
	return 0
}

func (x *NobleInfo) GetRenewPrice() int32 {
	if x != nil {
		return x.RenewPrice
	}
	return 0
}

func (x *NobleInfo) GetRenewRemandDiamond() int32 {
	if x != nil {
		return x.RenewRemandDiamond
	}
	return 0
}

func (x *NobleInfo) GetUpgradePrice() int32 {
	if x != nil {
		return x.UpgradePrice
	}
	return 0
}

func (x *NobleInfo) GetUpgradeRemandDiamond() int32 {
	if x != nil {
		return x.UpgradeRemandDiamond
	}
	return 0
}

func (x *NobleInfo) GetRights() *NobleRights {
	if x != nil {
		return x.Rights
	}
	return nil
}

func (x *NobleInfo) GetRightsNum() int32 {
	if x != nil {
		return x.RightsNum
	}
	return 0
}

func (x *NobleInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NobleInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type NobleRightsFreeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"` // 礼物id
	Num    int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                    // 个数
}

func (x *NobleRightsFreeGift) Reset() {
	*x = NobleRightsFreeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRightsFreeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRightsFreeGift) ProtoMessage() {}

func (x *NobleRightsFreeGift) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRightsFreeGift.ProtoReflect.Descriptor instead.
func (*NobleRightsFreeGift) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{10}
}

func (x *NobleRightsFreeGift) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *NobleRightsFreeGift) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type NobleRightsDiscountGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId        string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`                       // 礼物id
	DiscountPrice int32  `protobuf:"varint,2,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"` // 折扣价格
}

func (x *NobleRightsDiscountGift) Reset() {
	*x = NobleRightsDiscountGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleRightsDiscountGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleRightsDiscountGift) ProtoMessage() {}

func (x *NobleRightsDiscountGift) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleRightsDiscountGift.ProtoReflect.Descriptor instead.
func (*NobleRightsDiscountGift) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_proto_rawDescGZIP(), []int{11}
}

func (x *NobleRightsDiscountGift) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *NobleRightsDiscountGift) GetDiscountPrice() int32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

var File_svc_biz_vip_noble_proto protoreflect.FileDescriptor

var file_svc_biz_vip_noble_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x05, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x22, 0x28, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x98, 0x05, 0x0a, 0x0b, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x61,
	0x76, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4b, 0x69, 0x63, 0x6b,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x76, 0x6f, 0x69, 0x64,
	0x42, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x62, 0x61,
	0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x11,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x68, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x68,
	0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x69, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x13,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69,
	0x66, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xa1,
	0x04, 0x0a, 0x09, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x52, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x22, 0x59, 0x0a, 0x17, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x66, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0xb1, 0x02, 0x0a, 0x05, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x76, 0x69, 0x70, 0x3b, 0x76, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_vip_noble_proto_rawDescOnce sync.Once
	file_svc_biz_vip_noble_proto_rawDescData = file_svc_biz_vip_noble_proto_rawDesc
)

func file_svc_biz_vip_noble_proto_rawDescGZIP() []byte {
	file_svc_biz_vip_noble_proto_rawDescOnce.Do(func() {
		file_svc_biz_vip_noble_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_vip_noble_proto_rawDescData)
	})
	return file_svc_biz_vip_noble_proto_rawDescData
}

var file_svc_biz_vip_noble_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_svc_biz_vip_noble_proto_goTypes = []any{
	(*CreateNobleReq)(nil),          // 0: svc.biz.vip.CreateNobleReq
	(*CreateNobleResp)(nil),         // 1: svc.biz.vip.CreateNobleResp
	(*GetNobleReq)(nil),             // 2: svc.biz.vip.GetNobleReq
	(*GetNobleResp)(nil),            // 3: svc.biz.vip.GetNobleResp
	(*GetNobleListReq)(nil),         // 4: svc.biz.vip.GetNobleListReq
	(*GetNobleListResp)(nil),        // 5: svc.biz.vip.GetNobleListResp
	(*UpdateNobleReq)(nil),          // 6: svc.biz.vip.UpdateNobleReq
	(*UpdateNobleResp)(nil),         // 7: svc.biz.vip.UpdateNobleResp
	(*NobleRights)(nil),             // 8: svc.biz.vip.NobleRights
	(*NobleInfo)(nil),               // 9: svc.biz.vip.NobleInfo
	(*NobleRightsFreeGift)(nil),     // 10: svc.biz.vip.NobleRightsFreeGift
	(*NobleRightsDiscountGift)(nil), // 11: svc.biz.vip.NobleRightsDiscountGift
	(*fieldmaskpb.FieldMask)(nil),   // 12: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),   // 13: google.protobuf.Timestamp
}
var file_svc_biz_vip_noble_proto_depIdxs = []int32{
	9,  // 0: svc.biz.vip.CreateNobleReq.noble:type_name -> svc.biz.vip.NobleInfo
	9,  // 1: svc.biz.vip.CreateNobleResp.noble:type_name -> svc.biz.vip.NobleInfo
	9,  // 2: svc.biz.vip.GetNobleResp.noble:type_name -> svc.biz.vip.NobleInfo
	9,  // 3: svc.biz.vip.GetNobleListResp.items:type_name -> svc.biz.vip.NobleInfo
	9,  // 4: svc.biz.vip.UpdateNobleReq.noble:type_name -> svc.biz.vip.NobleInfo
	12, // 5: svc.biz.vip.UpdateNobleReq.update_mask:type_name -> google.protobuf.FieldMask
	10, // 6: svc.biz.vip.NobleRights.rights_free_gifts:type_name -> svc.biz.vip.NobleRightsFreeGift
	11, // 7: svc.biz.vip.NobleRights.rights_discount_gifts:type_name -> svc.biz.vip.NobleRightsDiscountGift
	8,  // 8: svc.biz.vip.NobleInfo.rights:type_name -> svc.biz.vip.NobleRights
	13, // 9: svc.biz.vip.NobleInfo.created_at:type_name -> google.protobuf.Timestamp
	13, // 10: svc.biz.vip.NobleInfo.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 11: svc.biz.vip.Noble.CreateNoble:input_type -> svc.biz.vip.CreateNobleReq
	2,  // 12: svc.biz.vip.Noble.GetNoble:input_type -> svc.biz.vip.GetNobleReq
	6,  // 13: svc.biz.vip.Noble.UpdateNoble:input_type -> svc.biz.vip.UpdateNobleReq
	4,  // 14: svc.biz.vip.Noble.GetNobleList:input_type -> svc.biz.vip.GetNobleListReq
	1,  // 15: svc.biz.vip.Noble.CreateNoble:output_type -> svc.biz.vip.CreateNobleResp
	3,  // 16: svc.biz.vip.Noble.GetNoble:output_type -> svc.biz.vip.GetNobleResp
	7,  // 17: svc.biz.vip.Noble.UpdateNoble:output_type -> svc.biz.vip.UpdateNobleResp
	5,  // 18: svc.biz.vip.Noble.GetNobleList:output_type -> svc.biz.vip.GetNobleListResp
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_svc_biz_vip_noble_proto_init() }
func file_svc_biz_vip_noble_proto_init() {
	if File_svc_biz_vip_noble_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_vip_noble_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NobleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRightsFreeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NobleRightsDiscountGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_vip_noble_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_vip_noble_proto_goTypes,
		DependencyIndexes: file_svc_biz_vip_noble_proto_depIdxs,
		MessageInfos:      file_svc_biz_vip_noble_proto_msgTypes,
	}.Build()
	File_svc_biz_vip_noble_proto = out.File
	file_svc_biz_vip_noble_proto_rawDesc = nil
	file_svc_biz_vip_noble_proto_goTypes = nil
	file_svc_biz_vip_noble_proto_depIdxs = nil
}
