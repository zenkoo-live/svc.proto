// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: svc.biz.vip/fans_club.proto

package vip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FansClub_Create_FullMethodName             = "/svc.biz.vip.FansClub/Create"
	FansClub_GetByStreamerID_FullMethodName    = "/svc.biz.vip.FansClub/GetByStreamerID"
	FansClub_GetByName_FullMethodName          = "/svc.biz.vip.FansClub/GetByName"
	FansClub_UpdateByStreamerID_FullMethodName = "/svc.biz.vip.FansClub/UpdateByStreamerID"
)

// FansClubClient is the client API for FansClub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FansClubClient interface {
	// CreateFansClub 创建粉丝团
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	// GetFansClub 获取粉丝团
	GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, opts ...grpc.CallOption) (*GetFansClubResp, error)
	// GetFansClubByName 通过名称获取粉丝团
	GetByName(ctx context.Context, in *GetByNameReq, opts ...grpc.CallOption) (*GetFansClubResp, error)
	// UpdateByStreamerID 更新粉丝团
	UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fansClubClient struct {
	cc grpc.ClientConnInterface
}

func NewFansClubClient(cc grpc.ClientConnInterface) FansClubClient {
	return &fansClubClient{cc}
}

func (c *fansClubClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, FansClub_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubClient) GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, opts ...grpc.CallOption) (*GetFansClubResp, error) {
	out := new(GetFansClubResp)
	err := c.cc.Invoke(ctx, FansClub_GetByStreamerID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubClient) GetByName(ctx context.Context, in *GetByNameReq, opts ...grpc.CallOption) (*GetFansClubResp, error) {
	out := new(GetFansClubResp)
	err := c.cc.Invoke(ctx, FansClub_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubClient) UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FansClub_UpdateByStreamerID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FansClubServer is the server API for FansClub service.
// All implementations must embed UnimplementedFansClubServer
// for forward compatibility
type FansClubServer interface {
	// CreateFansClub 创建粉丝团
	Create(context.Context, *CreateReq) (*CreateResp, error)
	// GetFansClub 获取粉丝团
	GetByStreamerID(context.Context, *GetByStreamerIDReq) (*GetFansClubResp, error)
	// GetFansClubByName 通过名称获取粉丝团
	GetByName(context.Context, *GetByNameReq) (*GetFansClubResp, error)
	// UpdateByStreamerID 更新粉丝团
	UpdateByStreamerID(context.Context, *UpdateByStreamerIDReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedFansClubServer()
}

// UnimplementedFansClubServer must be embedded to have forward compatible implementations.
type UnimplementedFansClubServer struct {
}

func (UnimplementedFansClubServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFansClubServer) GetByStreamerID(context.Context, *GetByStreamerIDReq) (*GetFansClubResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByStreamerID not implemented")
}
func (UnimplementedFansClubServer) GetByName(context.Context, *GetByNameReq) (*GetFansClubResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedFansClubServer) UpdateByStreamerID(context.Context, *UpdateByStreamerIDReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByStreamerID not implemented")
}
func (UnimplementedFansClubServer) mustEmbedUnimplementedFansClubServer() {}

// UnsafeFansClubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FansClubServer will
// result in compilation errors.
type UnsafeFansClubServer interface {
	mustEmbedUnimplementedFansClubServer()
}

func RegisterFansClubServer(s grpc.ServiceRegistrar, srv FansClubServer) {
	s.RegisterService(&FansClub_ServiceDesc, srv)
}

func _FansClub_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClub_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClub_GetByStreamerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByStreamerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubServer).GetByStreamerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClub_GetByStreamerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubServer).GetByStreamerID(ctx, req.(*GetByStreamerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClub_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClub_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubServer).GetByName(ctx, req.(*GetByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClub_UpdateByStreamerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByStreamerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubServer).UpdateByStreamerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClub_UpdateByStreamerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubServer).UpdateByStreamerID(ctx, req.(*UpdateByStreamerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FansClub_ServiceDesc is the grpc.ServiceDesc for FansClub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FansClub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.vip.FansClub",
	HandlerType: (*FansClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FansClub_Create_Handler,
		},
		{
			MethodName: "GetByStreamerID",
			Handler:    _FansClub_GetByStreamerID_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _FansClub_GetByName_Handler,
		},
		{
			MethodName: "UpdateByStreamerID",
			Handler:    _FansClub_UpdateByStreamerID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.vip/fans_club.proto",
}
