// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: svc.biz.vip/noble_member.proto

package vip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NobleMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId    string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`          // 贵族id
	MemberId   string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`       // 用户id
	StreamerId string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"` // 主播id（可为空）
	JoinTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`       // 加入时间
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // 过期时间
	Noble      *NobleInfo             `protobuf:"bytes,100,opt,name=noble,proto3" json:"noble,omitempty"`                           // 仅在请求时带了with_noble_info时返回
}

func (x *NobleMemberInfo) Reset() {
	*x = NobleMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NobleMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleMemberInfo) ProtoMessage() {}

func (x *NobleMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleMemberInfo.ProtoReflect.Descriptor instead.
func (*NobleMemberInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{0}
}

func (x *NobleMemberInfo) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *NobleMemberInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *NobleMemberInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *NobleMemberInfo) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *NobleMemberInfo) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *NobleMemberInfo) GetNoble() *NobleInfo {
	if x != nil {
		return x.Noble
	}
	return nil
}

type JoinNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId    string `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`           // 贵族id
	MemberId   string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`        // 用户id
	StreamerId string `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`  // 主播id（可为空；贵族可直接开通，也可在某个直播间开通）
	OrderId    string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           // 支付订单id
	OrderPrice int64  `protobuf:"varint,5,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"` // 支付订单价格
}

func (x *JoinNobleReq) Reset() {
	*x = JoinNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNobleReq) ProtoMessage() {}

func (x *JoinNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNobleReq.ProtoReflect.Descriptor instead.
func (*JoinNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{1}
}

func (x *JoinNobleReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *JoinNobleReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *JoinNobleReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *JoinNobleReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *JoinNobleReq) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

type JoinNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinNobleResp) Reset() {
	*x = JoinNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNobleResp) ProtoMessage() {}

func (x *JoinNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNobleResp.ProtoReflect.Descriptor instead.
func (*JoinNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{2}
}

type RenewNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId  string `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`    // 贵族id
	MemberId string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // 用户id
	// string streamer_id = 3; // 主播id（可为空；贵族可直接开通，也可在某个直播间开通）
	OrderId    string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           // 支付订单id
	OrderPrice int64  `protobuf:"varint,5,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"` // 支付订单价格
}

func (x *RenewNobleReq) Reset() {
	*x = RenewNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewNobleReq) ProtoMessage() {}

func (x *RenewNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewNobleReq.ProtoReflect.Descriptor instead.
func (*RenewNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{3}
}

func (x *RenewNobleReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *RenewNobleReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RenewNobleReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RenewNobleReq) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

type RenewNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenewNobleResp) Reset() {
	*x = RenewNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewNobleResp) ProtoMessage() {}

func (x *RenewNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewNobleResp.ProtoReflect.Descriptor instead.
func (*RenewNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{4}
}

type UpgradeNobleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId  string `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`    // 贵族id
	MemberId string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // 用户id
	// string streamer_id = 3; // 主播id（可为空；贵族可直接开通，也可在某个直播间开通）
	OrderId    string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           // 支付订单id
	OrderPrice int64  `protobuf:"varint,5,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"` // 支付订单价格
}

func (x *UpgradeNobleReq) Reset() {
	*x = UpgradeNobleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeNobleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeNobleReq) ProtoMessage() {}

func (x *UpgradeNobleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeNobleReq.ProtoReflect.Descriptor instead.
func (*UpgradeNobleReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{5}
}

func (x *UpgradeNobleReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *UpgradeNobleReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *UpgradeNobleReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UpgradeNobleReq) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

type UpgradeNobleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeNobleResp) Reset() {
	*x = UpgradeNobleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeNobleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeNobleResp) ProtoMessage() {}

func (x *UpgradeNobleResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeNobleResp.ProtoReflect.Descriptor instead.
func (*UpgradeNobleResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{6}
}

type GetNobleMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId      string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`                   // 用户id
	WithNobleInfo bool   `protobuf:"varint,2,opt,name=with_noble_info,json=withNobleInfo,proto3" json:"with_noble_info,omitempty"` // 是否返回贵族信息
}

func (x *GetNobleMemberReq) Reset() {
	*x = GetNobleMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleMemberReq) ProtoMessage() {}

func (x *GetNobleMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleMemberReq.ProtoReflect.Descriptor instead.
func (*GetNobleMemberReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{7}
}

func (x *GetNobleMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GetNobleMemberReq) GetWithNobleInfo() bool {
	if x != nil {
		return x.WithNobleInfo
	}
	return false
}

type GetNobleMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleMember *NobleMemberInfo `protobuf:"bytes,1,opt,name=noble_member,json=nobleMember,proto3" json:"noble_member,omitempty"`
}

func (x *GetNobleMemberResp) Reset() {
	*x = GetNobleMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleMemberResp) ProtoMessage() {}

func (x *GetNobleMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleMemberResp.ProtoReflect.Descriptor instead.
func (*GetNobleMemberResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{8}
}

func (x *GetNobleMemberResp) GetNobleMember() *NobleMemberInfo {
	if x != nil {
		return x.NobleMember
	}
	return nil
}

type GetNobleMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                          // 页数
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                        // 条数
	WithNobleInfo bool                   `protobuf:"varint,3,opt,name=with_noble_info,json=withNobleInfo,proto3" json:"with_noble_info,omitempty"` // 是否返回贵族信息
	NobleId       string                 `protobuf:"bytes,4,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`                      // 贵族id
	StreamerId    string                 `protobuf:"bytes,5,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`             // 主播id
	JoinTimeStart *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=join_time_start,json=joinTimeStart,proto3" json:"join_time_start,omitempty"`  // 开通贵族的开始时间
	JoinTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=join_time_end,json=joinTimeEnd,proto3" json:"join_time_end,omitempty"`        // 开通贵族的结束时间
}

func (x *GetNobleMemberListReq) Reset() {
	*x = GetNobleMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleMemberListReq) ProtoMessage() {}

func (x *GetNobleMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleMemberListReq.ProtoReflect.Descriptor instead.
func (*GetNobleMemberListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{9}
}

func (x *GetNobleMemberListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNobleMemberListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNobleMemberListReq) GetWithNobleInfo() bool {
	if x != nil {
		return x.WithNobleInfo
	}
	return false
}

func (x *GetNobleMemberListReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *GetNobleMemberListReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *GetNobleMemberListReq) GetJoinTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimeStart
	}
	return nil
}

func (x *GetNobleMemberListReq) GetJoinTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimeEnd
	}
	return nil
}

type GetOnlineNobleMemberListByStreamerIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                          // 页数
	Limit         int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                        // 条数
	WithNobleInfo bool   `protobuf:"varint,3,opt,name=with_noble_info,json=withNobleInfo,proto3" json:"with_noble_info,omitempty"` // 是否返回贵族信息
	StreamerId    string `protobuf:"bytes,4,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`             // 主播id
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) Reset() {
	*x = GetOnlineNobleMemberListByStreamerIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineNobleMemberListByStreamerIDReq) ProtoMessage() {}

func (x *GetOnlineNobleMemberListByStreamerIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineNobleMemberListByStreamerIDReq.ProtoReflect.Descriptor instead.
func (*GetOnlineNobleMemberListByStreamerIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{10}
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) GetWithNobleInfo() bool {
	if x != nil {
		return x.WithNobleInfo
	}
	return false
}

func (x *GetOnlineNobleMemberListByStreamerIDReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type GetNobleMemberListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NobleMemberInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetNobleMemberListResp) Reset() {
	*x = GetNobleMemberListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNobleMemberListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNobleMemberListResp) ProtoMessage() {}

func (x *GetNobleMemberListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNobleMemberListResp.ProtoReflect.Descriptor instead.
func (*GetNobleMemberListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{11}
}

func (x *GetNobleMemberListResp) GetItems() []*NobleMemberInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type CountNobleMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId    string                 `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`            // 主播id
	NobleId       string                 `protobuf:"bytes,2,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`                     // 贵族id
	JoinTimeStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=join_time_start,json=joinTimeStart,proto3" json:"join_time_start,omitempty"` // 开通贵族的开始时间
	JoinTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=join_time_end,json=joinTimeEnd,proto3" json:"join_time_end,omitempty"`       // 开通贵族的结束时间
}

func (x *CountNobleMemberReq) Reset() {
	*x = CountNobleMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNobleMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNobleMemberReq) ProtoMessage() {}

func (x *CountNobleMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNobleMemberReq.ProtoReflect.Descriptor instead.
func (*CountNobleMemberReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{12}
}

func (x *CountNobleMemberReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *CountNobleMemberReq) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *CountNobleMemberReq) GetJoinTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimeStart
	}
	return nil
}

func (x *CountNobleMemberReq) GetJoinTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimeEnd
	}
	return nil
}

type CountNobleMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 总数
}

func (x *CountNobleMemberResp) Reset() {
	*x = CountNobleMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_noble_member_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNobleMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNobleMemberResp) ProtoMessage() {}

func (x *CountNobleMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_noble_member_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNobleMemberResp.ProtoReflect.Descriptor instead.
func (*CountNobleMemberResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_noble_member_proto_rawDescGZIP(), []int{13}
}

func (x *CountNobleMemberResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_svc_biz_vip_noble_member_proto protoreflect.FileDescriptor

var file_svc_biz_vip_noble_member_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x6e, 0x6f, 0x62, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x69,
	0x6e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x0f,
	0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x83, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x12, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x3e, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x22, 0x9c, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x82, 0x05, 0x0a, 0x0b, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x12, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x3b, 0x76, 0x69, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_vip_noble_member_proto_rawDescOnce sync.Once
	file_svc_biz_vip_noble_member_proto_rawDescData = file_svc_biz_vip_noble_member_proto_rawDesc
)

func file_svc_biz_vip_noble_member_proto_rawDescGZIP() []byte {
	file_svc_biz_vip_noble_member_proto_rawDescOnce.Do(func() {
		file_svc_biz_vip_noble_member_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_vip_noble_member_proto_rawDescData)
	})
	return file_svc_biz_vip_noble_member_proto_rawDescData
}

var file_svc_biz_vip_noble_member_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_svc_biz_vip_noble_member_proto_goTypes = []any{
	(*NobleMemberInfo)(nil),                         // 0: svc.biz.vip.NobleMemberInfo
	(*JoinNobleReq)(nil),                            // 1: svc.biz.vip.JoinNobleReq
	(*JoinNobleResp)(nil),                           // 2: svc.biz.vip.JoinNobleResp
	(*RenewNobleReq)(nil),                           // 3: svc.biz.vip.RenewNobleReq
	(*RenewNobleResp)(nil),                          // 4: svc.biz.vip.RenewNobleResp
	(*UpgradeNobleReq)(nil),                         // 5: svc.biz.vip.UpgradeNobleReq
	(*UpgradeNobleResp)(nil),                        // 6: svc.biz.vip.UpgradeNobleResp
	(*GetNobleMemberReq)(nil),                       // 7: svc.biz.vip.GetNobleMemberReq
	(*GetNobleMemberResp)(nil),                      // 8: svc.biz.vip.GetNobleMemberResp
	(*GetNobleMemberListReq)(nil),                   // 9: svc.biz.vip.GetNobleMemberListReq
	(*GetOnlineNobleMemberListByStreamerIDReq)(nil), // 10: svc.biz.vip.GetOnlineNobleMemberListByStreamerIDReq
	(*GetNobleMemberListResp)(nil),                  // 11: svc.biz.vip.GetNobleMemberListResp
	(*CountNobleMemberReq)(nil),                     // 12: svc.biz.vip.CountNobleMemberReq
	(*CountNobleMemberResp)(nil),                    // 13: svc.biz.vip.CountNobleMemberResp
	(*timestamppb.Timestamp)(nil),                   // 14: google.protobuf.Timestamp
	(*NobleInfo)(nil),                               // 15: svc.biz.vip.NobleInfo
}
var file_svc_biz_vip_noble_member_proto_depIdxs = []int32{
	14, // 0: svc.biz.vip.NobleMemberInfo.join_time:type_name -> google.protobuf.Timestamp
	14, // 1: svc.biz.vip.NobleMemberInfo.expire_time:type_name -> google.protobuf.Timestamp
	15, // 2: svc.biz.vip.NobleMemberInfo.noble:type_name -> svc.biz.vip.NobleInfo
	0,  // 3: svc.biz.vip.GetNobleMemberResp.noble_member:type_name -> svc.biz.vip.NobleMemberInfo
	14, // 4: svc.biz.vip.GetNobleMemberListReq.join_time_start:type_name -> google.protobuf.Timestamp
	14, // 5: svc.biz.vip.GetNobleMemberListReq.join_time_end:type_name -> google.protobuf.Timestamp
	0,  // 6: svc.biz.vip.GetNobleMemberListResp.items:type_name -> svc.biz.vip.NobleMemberInfo
	14, // 7: svc.biz.vip.CountNobleMemberReq.join_time_start:type_name -> google.protobuf.Timestamp
	14, // 8: svc.biz.vip.CountNobleMemberReq.join_time_end:type_name -> google.protobuf.Timestamp
	1,  // 9: svc.biz.vip.NobleMember.JoinNoble:input_type -> svc.biz.vip.JoinNobleReq
	3,  // 10: svc.biz.vip.NobleMember.RenewNoble:input_type -> svc.biz.vip.RenewNobleReq
	5,  // 11: svc.biz.vip.NobleMember.UpgradeNoble:input_type -> svc.biz.vip.UpgradeNobleReq
	7,  // 12: svc.biz.vip.NobleMember.GetNobleMember:input_type -> svc.biz.vip.GetNobleMemberReq
	9,  // 13: svc.biz.vip.NobleMember.GetNobleMemberList:input_type -> svc.biz.vip.GetNobleMemberListReq
	12, // 14: svc.biz.vip.NobleMember.CountNobleMember:input_type -> svc.biz.vip.CountNobleMemberReq
	10, // 15: svc.biz.vip.NobleMember.GetOnlineNobleMemberListByStreamerID:input_type -> svc.biz.vip.GetOnlineNobleMemberListByStreamerIDReq
	2,  // 16: svc.biz.vip.NobleMember.JoinNoble:output_type -> svc.biz.vip.JoinNobleResp
	4,  // 17: svc.biz.vip.NobleMember.RenewNoble:output_type -> svc.biz.vip.RenewNobleResp
	6,  // 18: svc.biz.vip.NobleMember.UpgradeNoble:output_type -> svc.biz.vip.UpgradeNobleResp
	8,  // 19: svc.biz.vip.NobleMember.GetNobleMember:output_type -> svc.biz.vip.GetNobleMemberResp
	11, // 20: svc.biz.vip.NobleMember.GetNobleMemberList:output_type -> svc.biz.vip.GetNobleMemberListResp
	13, // 21: svc.biz.vip.NobleMember.CountNobleMember:output_type -> svc.biz.vip.CountNobleMemberResp
	11, // 22: svc.biz.vip.NobleMember.GetOnlineNobleMemberListByStreamerID:output_type -> svc.biz.vip.GetNobleMemberListResp
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_svc_biz_vip_noble_member_proto_init() }
func file_svc_biz_vip_noble_member_proto_init() {
	if File_svc_biz_vip_noble_member_proto != nil {
		return
	}
	file_svc_biz_vip_noble_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_vip_noble_member_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NobleMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JoinNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*JoinNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RenewNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RenewNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeNobleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeNobleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnlineNobleMemberListByStreamerIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetNobleMemberListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CountNobleMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_noble_member_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CountNobleMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_vip_noble_member_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_vip_noble_member_proto_goTypes,
		DependencyIndexes: file_svc_biz_vip_noble_member_proto_depIdxs,
		MessageInfos:      file_svc_biz_vip_noble_member_proto_msgTypes,
	}.Build()
	File_svc_biz_vip_noble_member_proto = out.File
	file_svc_biz_vip_noble_member_proto_rawDesc = nil
	file_svc_biz_vip_noble_member_proto_goTypes = nil
	file_svc_biz_vip_noble_member_proto_depIdxs = nil
}
