// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: svc.biz.vip/fans_club_member.proto

package vip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FansClubMember_Join_FullMethodName                = "/svc.biz.vip.FansClubMember/Join"
	FansClubMember_Leave_FullMethodName               = "/svc.biz.vip.FansClubMember/Leave"
	FansClubMember_Get_FullMethodName                 = "/svc.biz.vip.FansClubMember/Get"
	FansClubMember_GetListByStreamerID_FullMethodName = "/svc.biz.vip.FansClubMember/GetListByStreamerID"
	FansClubMember_GetListByMemberID_FullMethodName   = "/svc.biz.vip.FansClubMember/GetListByMemberID"
)

// FansClubMemberClient is the client API for FansClubMember service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FansClubMemberClient interface {
	// Join 加入粉丝团
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Leave 离开粉丝团
	Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get 获取粉丝团成员信息
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetFansClubMemberResp, error)
	// GetListByStreamerID 获取主播粉丝团成员列表
	GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, opts ...grpc.CallOption) (*GetListResp, error)
	// GetListByMemberID 获取用户加入的粉丝团列表
	GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, opts ...grpc.CallOption) (*GetListResp, error)
}

type fansClubMemberClient struct {
	cc grpc.ClientConnInterface
}

func NewFansClubMemberClient(cc grpc.ClientConnInterface) FansClubMemberClient {
	return &fansClubMemberClient{cc}
}

func (c *fansClubMemberClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FansClubMember_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberClient) Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FansClubMember_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetFansClubMemberResp, error) {
	out := new(GetFansClubMemberResp)
	err := c.cc.Invoke(ctx, FansClubMember_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberClient) GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, opts ...grpc.CallOption) (*GetListResp, error) {
	out := new(GetListResp)
	err := c.cc.Invoke(ctx, FansClubMember_GetListByStreamerID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberClient) GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, opts ...grpc.CallOption) (*GetListResp, error) {
	out := new(GetListResp)
	err := c.cc.Invoke(ctx, FansClubMember_GetListByMemberID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FansClubMemberServer is the server API for FansClubMember service.
// All implementations must embed UnimplementedFansClubMemberServer
// for forward compatibility
type FansClubMemberServer interface {
	// Join 加入粉丝团
	Join(context.Context, *JoinReq) (*emptypb.Empty, error)
	// Leave 离开粉丝团
	Leave(context.Context, *LeaveReq) (*emptypb.Empty, error)
	// Get 获取粉丝团成员信息
	Get(context.Context, *GetReq) (*GetFansClubMemberResp, error)
	// GetListByStreamerID 获取主播粉丝团成员列表
	GetListByStreamerID(context.Context, *GetListByStreamerIDReq) (*GetListResp, error)
	// GetListByMemberID 获取用户加入的粉丝团列表
	GetListByMemberID(context.Context, *GetListByMemberIDReq) (*GetListResp, error)
	mustEmbedUnimplementedFansClubMemberServer()
}

// UnimplementedFansClubMemberServer must be embedded to have forward compatible implementations.
type UnimplementedFansClubMemberServer struct {
}

func (UnimplementedFansClubMemberServer) Join(context.Context, *JoinReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedFansClubMemberServer) Leave(context.Context, *LeaveReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedFansClubMemberServer) Get(context.Context, *GetReq) (*GetFansClubMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFansClubMemberServer) GetListByStreamerID(context.Context, *GetListByStreamerIDReq) (*GetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByStreamerID not implemented")
}
func (UnimplementedFansClubMemberServer) GetListByMemberID(context.Context, *GetListByMemberIDReq) (*GetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByMemberID not implemented")
}
func (UnimplementedFansClubMemberServer) mustEmbedUnimplementedFansClubMemberServer() {}

// UnsafeFansClubMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FansClubMemberServer will
// result in compilation errors.
type UnsafeFansClubMemberServer interface {
	mustEmbedUnimplementedFansClubMemberServer()
}

func RegisterFansClubMemberServer(s grpc.ServiceRegistrar, srv FansClubMemberServer) {
	s.RegisterService(&FansClubMember_ServiceDesc, srv)
}

func _FansClubMember_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubMemberServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClubMember_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubMemberServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClubMember_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubMemberServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClubMember_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubMemberServer).Leave(ctx, req.(*LeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClubMember_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubMemberServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClubMember_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubMemberServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClubMember_GetListByStreamerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByStreamerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubMemberServer).GetListByStreamerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClubMember_GetListByStreamerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubMemberServer).GetListByStreamerID(ctx, req.(*GetListByStreamerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FansClubMember_GetListByMemberID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByMemberIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FansClubMemberServer).GetListByMemberID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FansClubMember_GetListByMemberID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FansClubMemberServer).GetListByMemberID(ctx, req.(*GetListByMemberIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FansClubMember_ServiceDesc is the grpc.ServiceDesc for FansClubMember service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FansClubMember_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.vip.FansClubMember",
	HandlerType: (*FansClubMemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _FansClubMember_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _FansClubMember_Leave_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FansClubMember_Get_Handler,
		},
		{
			MethodName: "GetListByStreamerID",
			Handler:    _FansClubMember_GetListByStreamerID_Handler,
		},
		{
			MethodName: "GetListByMemberID",
			Handler:    _FansClubMember_GetListByMemberID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.vip/fans_club_member.proto",
}
