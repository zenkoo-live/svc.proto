// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: svc.biz.vip/mq.proto

package vip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// topic: topic.vip.join_fanbase
type JoinFanbaseTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string                 `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`    // 主播id
	RoomId     string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // 房间id
	LiveId     string                 `protobuf:"bytes,3,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`                // 直播id
	MemberId   string                 `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`          // 用户id
	Level      FanbaseLevel           `protobuf:"varint,5,opt,name=level,proto3,enum=svc.biz.vip.FanbaseLevel" json:"level,omitempty"` // 粉丝牌等级
	OrderId    string                 `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`             // 支付订单id
	OrderPrice int64                  `protobuf:"varint,7,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`   // 支付订单价格
	JoinTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`          // 时间
}

func (x *JoinFanbaseTopicInfo) Reset() {
	*x = JoinFanbaseTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_mq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinFanbaseTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinFanbaseTopicInfo) ProtoMessage() {}

func (x *JoinFanbaseTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_mq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinFanbaseTopicInfo.ProtoReflect.Descriptor instead.
func (*JoinFanbaseTopicInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_mq_proto_rawDescGZIP(), []int{0}
}

func (x *JoinFanbaseTopicInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *JoinFanbaseTopicInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *JoinFanbaseTopicInfo) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *JoinFanbaseTopicInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *JoinFanbaseTopicInfo) GetLevel() FanbaseLevel {
	if x != nil {
		return x.Level
	}
	return FanbaseLevel_FanbaseLevelUnknown
}

func (x *JoinFanbaseTopicInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *JoinFanbaseTopicInfo) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *JoinFanbaseTopicInfo) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

// topic: topic.vip.join_noble
type JoinNobleTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId    string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`           // 贵族id
	Level      int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                             // 等级
	MemberId   string                 `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`        // 用户id
	StreamerId string                 `protobuf:"bytes,4,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`  // 主播id
	RoomId     string                 `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`              // 房间id
	LiveId     string                 `protobuf:"bytes,6,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`              // 直播id
	OrderId    string                 `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           // 支付订单id
	OrderPrice int64                  `protobuf:"varint,8,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"` // 支付订单价格
	JoinTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`        // 时间
}

func (x *JoinNobleTopicInfo) Reset() {
	*x = JoinNobleTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_mq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNobleTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNobleTopicInfo) ProtoMessage() {}

func (x *JoinNobleTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_mq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNobleTopicInfo.ProtoReflect.Descriptor instead.
func (*JoinNobleTopicInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_mq_proto_rawDescGZIP(), []int{1}
}

func (x *JoinNobleTopicInfo) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *JoinNobleTopicInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *JoinNobleTopicInfo) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *JoinNobleTopicInfo) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

// topic: topic.vip.renew_noble
type RenewNobleTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId    string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`           // 贵族id
	Level      int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                             // 等级
	MemberId   string                 `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`        // 用户id
	StreamerId string                 `protobuf:"bytes,4,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`  // 主播id
	RoomId     string                 `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`              // 房间id
	LiveId     string                 `protobuf:"bytes,6,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`              // 直播id
	OrderId    string                 `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           // 支付订单id
	OrderPrice int64                  `protobuf:"varint,8,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"` // 支付订单价格
	RenewTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`     // 时间
}

func (x *RenewNobleTopicInfo) Reset() {
	*x = RenewNobleTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_mq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewNobleTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewNobleTopicInfo) ProtoMessage() {}

func (x *RenewNobleTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_mq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewNobleTopicInfo.ProtoReflect.Descriptor instead.
func (*RenewNobleTopicInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_mq_proto_rawDescGZIP(), []int{2}
}

func (x *RenewNobleTopicInfo) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RenewNobleTopicInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RenewNobleTopicInfo) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *RenewNobleTopicInfo) GetRenewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RenewTime
	}
	return nil
}

// topic: topic.vip.upgrade_noble
type UpgradeNobleTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleId     string                 `protobuf:"bytes,1,opt,name=noble_id,json=nobleId,proto3" json:"noble_id,omitempty"`             // 贵族id
	Level       int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                               // 等级
	MemberId    string                 `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`          // 用户id
	StreamerId  string                 `protobuf:"bytes,4,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`    // 主播id
	RoomId      string                 `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // 房间id
	LiveId      string                 `protobuf:"bytes,6,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`                // 直播id
	OrderId     string                 `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`             // 支付订单id
	OrderPrice  int64                  `protobuf:"varint,8,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`   // 支付订单价格
	UpgradeTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=upgrade_time,json=upgradeTime,proto3" json:"upgrade_time,omitempty"` // 时间
}

func (x *UpgradeNobleTopicInfo) Reset() {
	*x = UpgradeNobleTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_mq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeNobleTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeNobleTopicInfo) ProtoMessage() {}

func (x *UpgradeNobleTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_mq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeNobleTopicInfo.ProtoReflect.Descriptor instead.
func (*UpgradeNobleTopicInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_mq_proto_rawDescGZIP(), []int{3}
}

func (x *UpgradeNobleTopicInfo) GetNobleId() string {
	if x != nil {
		return x.NobleId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpgradeNobleTopicInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UpgradeNobleTopicInfo) GetOrderPrice() int64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *UpgradeNobleTopicInfo) GetUpgradeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpgradeTime
	}
	return nil
}

var File_svc_biz_vip_mq_proto protoreflect.FileDescriptor

var file_svc_biz_vip_mq_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x6d, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69,
	0x70, 0x2f, 0x66, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x02, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa,
	0x02, 0x0a, 0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x15,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76,
	0x69, 0x70, 0x3b, 0x76, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_vip_mq_proto_rawDescOnce sync.Once
	file_svc_biz_vip_mq_proto_rawDescData = file_svc_biz_vip_mq_proto_rawDesc
)

func file_svc_biz_vip_mq_proto_rawDescGZIP() []byte {
	file_svc_biz_vip_mq_proto_rawDescOnce.Do(func() {
		file_svc_biz_vip_mq_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_vip_mq_proto_rawDescData)
	})
	return file_svc_biz_vip_mq_proto_rawDescData
}

var file_svc_biz_vip_mq_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_svc_biz_vip_mq_proto_goTypes = []any{
	(*JoinFanbaseTopicInfo)(nil),  // 0: svc.biz.vip.JoinFanbaseTopicInfo
	(*JoinNobleTopicInfo)(nil),    // 1: svc.biz.vip.JoinNobleTopicInfo
	(*RenewNobleTopicInfo)(nil),   // 2: svc.biz.vip.RenewNobleTopicInfo
	(*UpgradeNobleTopicInfo)(nil), // 3: svc.biz.vip.UpgradeNobleTopicInfo
	(FanbaseLevel)(0),             // 4: svc.biz.vip.FanbaseLevel
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_svc_biz_vip_mq_proto_depIdxs = []int32{
	4, // 0: svc.biz.vip.JoinFanbaseTopicInfo.level:type_name -> svc.biz.vip.FanbaseLevel
	5, // 1: svc.biz.vip.JoinFanbaseTopicInfo.join_time:type_name -> google.protobuf.Timestamp
	5, // 2: svc.biz.vip.JoinNobleTopicInfo.join_time:type_name -> google.protobuf.Timestamp
	5, // 3: svc.biz.vip.RenewNobleTopicInfo.renew_time:type_name -> google.protobuf.Timestamp
	5, // 4: svc.biz.vip.UpgradeNobleTopicInfo.upgrade_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_svc_biz_vip_mq_proto_init() }
func file_svc_biz_vip_mq_proto_init() {
	if File_svc_biz_vip_mq_proto != nil {
		return
	}
	file_svc_biz_vip_fanbase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_vip_mq_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*JoinFanbaseTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_mq_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JoinNobleTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_mq_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RenewNobleTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_mq_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeNobleTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_vip_mq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_svc_biz_vip_mq_proto_goTypes,
		DependencyIndexes: file_svc_biz_vip_mq_proto_depIdxs,
		MessageInfos:      file_svc_biz_vip_mq_proto_msgTypes,
	}.Build()
	File_svc_biz_vip_mq_proto = out.File
	file_svc_biz_vip_mq_proto_rawDesc = nil
	file_svc_biz_vip_mq_proto_goTypes = nil
	file_svc_biz_vip_mq_proto_depIdxs = nil
}
