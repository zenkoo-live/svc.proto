// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.vip/noble_member.proto

package vip

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NobleMember service

func NewNobleMemberEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NobleMember service

type NobleMemberService interface {
	// JoinNoble 加入贵族
	JoinNoble(ctx context.Context, in *JoinNobleReq, opts ...client.CallOption) (*JoinNobleResp, error)
	// RenewNoble 续费贵族
	RenewNoble(ctx context.Context, in *RenewNobleReq, opts ...client.CallOption) (*RenewNobleResp, error)
	// UpgradeNoble 升级贵族
	UpgradeNoble(ctx context.Context, in *UpgradeNobleReq, opts ...client.CallOption) (*UpgradeNobleResp, error)
	// GetNobleMember 获取成员贵族信息
	GetNobleMember(ctx context.Context, in *GetNobleMemberReq, opts ...client.CallOption) (*GetNobleMemberResp, error)
	// MGetNobleMember 批量获取成员贵族信息
	MGetNobleMember(ctx context.Context, in *MGetNobleMemberReq, opts ...client.CallOption) (*MGetNobleMemberResp, error)
	// GetNobleMemberList 获取贵族成员列表（streamer_id传空字符串取所有）
	GetNobleMemberList(ctx context.Context, in *GetNobleMemberListReq, opts ...client.CallOption) (*GetNobleMemberListResp, error)
	// CountNobleMember 获取成员总数
	CountNobleMember(ctx context.Context, in *CountNobleMemberReq, opts ...client.CallOption) (*CountNobleMemberResp, error)
	// GetOnlineNobleMemberListByStreamerID 获取主播贵族在线成员列表
	GetOnlineNobleMemberListByStreamerID(ctx context.Context, in *GetOnlineNobleMemberListByStreamerIDReq, opts ...client.CallOption) (*GetNobleMemberListResp, error)
	// GetOrders 获取开通的贵族订单
	GetOrders(ctx context.Context, in *GetOrdersReq, opts ...client.CallOption) (*GetOrdersResp, error)
	// GetOrderStat 获取开通的贵族订单
	GetOrderStat(ctx context.Context, in *GetOrderStatReq, opts ...client.CallOption) (*GetOrderStatResp, error)
}

type nobleMemberService struct {
	c    client.Client
	name string
}

func NewNobleMemberService(name string, c client.Client) NobleMemberService {
	return &nobleMemberService{
		c:    c,
		name: name,
	}
}

func (c *nobleMemberService) JoinNoble(ctx context.Context, in *JoinNobleReq, opts ...client.CallOption) (*JoinNobleResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.JoinNoble", in)
	out := new(JoinNobleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) RenewNoble(ctx context.Context, in *RenewNobleReq, opts ...client.CallOption) (*RenewNobleResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.RenewNoble", in)
	out := new(RenewNobleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) UpgradeNoble(ctx context.Context, in *UpgradeNobleReq, opts ...client.CallOption) (*UpgradeNobleResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.UpgradeNoble", in)
	out := new(UpgradeNobleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) GetNobleMember(ctx context.Context, in *GetNobleMemberReq, opts ...client.CallOption) (*GetNobleMemberResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.GetNobleMember", in)
	out := new(GetNobleMemberResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) MGetNobleMember(ctx context.Context, in *MGetNobleMemberReq, opts ...client.CallOption) (*MGetNobleMemberResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.MGetNobleMember", in)
	out := new(MGetNobleMemberResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) GetNobleMemberList(ctx context.Context, in *GetNobleMemberListReq, opts ...client.CallOption) (*GetNobleMemberListResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.GetNobleMemberList", in)
	out := new(GetNobleMemberListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) CountNobleMember(ctx context.Context, in *CountNobleMemberReq, opts ...client.CallOption) (*CountNobleMemberResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.CountNobleMember", in)
	out := new(CountNobleMemberResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) GetOnlineNobleMemberListByStreamerID(ctx context.Context, in *GetOnlineNobleMemberListByStreamerIDReq, opts ...client.CallOption) (*GetNobleMemberListResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.GetOnlineNobleMemberListByStreamerID", in)
	out := new(GetNobleMemberListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) GetOrders(ctx context.Context, in *GetOrdersReq, opts ...client.CallOption) (*GetOrdersResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.GetOrders", in)
	out := new(GetOrdersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobleMemberService) GetOrderStat(ctx context.Context, in *GetOrderStatReq, opts ...client.CallOption) (*GetOrderStatResp, error) {
	req := c.c.NewRequest(c.name, "NobleMember.GetOrderStat", in)
	out := new(GetOrderStatResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NobleMember service

type NobleMemberHandler interface {
	// JoinNoble 加入贵族
	JoinNoble(context.Context, *JoinNobleReq, *JoinNobleResp) error
	// RenewNoble 续费贵族
	RenewNoble(context.Context, *RenewNobleReq, *RenewNobleResp) error
	// UpgradeNoble 升级贵族
	UpgradeNoble(context.Context, *UpgradeNobleReq, *UpgradeNobleResp) error
	// GetNobleMember 获取成员贵族信息
	GetNobleMember(context.Context, *GetNobleMemberReq, *GetNobleMemberResp) error
	// MGetNobleMember 批量获取成员贵族信息
	MGetNobleMember(context.Context, *MGetNobleMemberReq, *MGetNobleMemberResp) error
	// GetNobleMemberList 获取贵族成员列表（streamer_id传空字符串取所有）
	GetNobleMemberList(context.Context, *GetNobleMemberListReq, *GetNobleMemberListResp) error
	// CountNobleMember 获取成员总数
	CountNobleMember(context.Context, *CountNobleMemberReq, *CountNobleMemberResp) error
	// GetOnlineNobleMemberListByStreamerID 获取主播贵族在线成员列表
	GetOnlineNobleMemberListByStreamerID(context.Context, *GetOnlineNobleMemberListByStreamerIDReq, *GetNobleMemberListResp) error
	// GetOrders 获取开通的贵族订单
	GetOrders(context.Context, *GetOrdersReq, *GetOrdersResp) error
	// GetOrderStat 获取开通的贵族订单
	GetOrderStat(context.Context, *GetOrderStatReq, *GetOrderStatResp) error
}

func RegisterNobleMemberHandler(s server.Server, hdlr NobleMemberHandler, opts ...server.HandlerOption) error {
	type nobleMember interface {
		JoinNoble(ctx context.Context, in *JoinNobleReq, out *JoinNobleResp) error
		RenewNoble(ctx context.Context, in *RenewNobleReq, out *RenewNobleResp) error
		UpgradeNoble(ctx context.Context, in *UpgradeNobleReq, out *UpgradeNobleResp) error
		GetNobleMember(ctx context.Context, in *GetNobleMemberReq, out *GetNobleMemberResp) error
		MGetNobleMember(ctx context.Context, in *MGetNobleMemberReq, out *MGetNobleMemberResp) error
		GetNobleMemberList(ctx context.Context, in *GetNobleMemberListReq, out *GetNobleMemberListResp) error
		CountNobleMember(ctx context.Context, in *CountNobleMemberReq, out *CountNobleMemberResp) error
		GetOnlineNobleMemberListByStreamerID(ctx context.Context, in *GetOnlineNobleMemberListByStreamerIDReq, out *GetNobleMemberListResp) error
		GetOrders(ctx context.Context, in *GetOrdersReq, out *GetOrdersResp) error
		GetOrderStat(ctx context.Context, in *GetOrderStatReq, out *GetOrderStatResp) error
	}
	type NobleMember struct {
		nobleMember
	}
	h := &nobleMemberHandler{hdlr}
	return s.Handle(s.NewHandler(&NobleMember{h}, opts...))
}

type nobleMemberHandler struct {
	NobleMemberHandler
}

func (h *nobleMemberHandler) JoinNoble(ctx context.Context, in *JoinNobleReq, out *JoinNobleResp) error {
	return h.NobleMemberHandler.JoinNoble(ctx, in, out)
}

func (h *nobleMemberHandler) RenewNoble(ctx context.Context, in *RenewNobleReq, out *RenewNobleResp) error {
	return h.NobleMemberHandler.RenewNoble(ctx, in, out)
}

func (h *nobleMemberHandler) UpgradeNoble(ctx context.Context, in *UpgradeNobleReq, out *UpgradeNobleResp) error {
	return h.NobleMemberHandler.UpgradeNoble(ctx, in, out)
}

func (h *nobleMemberHandler) GetNobleMember(ctx context.Context, in *GetNobleMemberReq, out *GetNobleMemberResp) error {
	return h.NobleMemberHandler.GetNobleMember(ctx, in, out)
}

func (h *nobleMemberHandler) MGetNobleMember(ctx context.Context, in *MGetNobleMemberReq, out *MGetNobleMemberResp) error {
	return h.NobleMemberHandler.MGetNobleMember(ctx, in, out)
}

func (h *nobleMemberHandler) GetNobleMemberList(ctx context.Context, in *GetNobleMemberListReq, out *GetNobleMemberListResp) error {
	return h.NobleMemberHandler.GetNobleMemberList(ctx, in, out)
}

func (h *nobleMemberHandler) CountNobleMember(ctx context.Context, in *CountNobleMemberReq, out *CountNobleMemberResp) error {
	return h.NobleMemberHandler.CountNobleMember(ctx, in, out)
}

func (h *nobleMemberHandler) GetOnlineNobleMemberListByStreamerID(ctx context.Context, in *GetOnlineNobleMemberListByStreamerIDReq, out *GetNobleMemberListResp) error {
	return h.NobleMemberHandler.GetOnlineNobleMemberListByStreamerID(ctx, in, out)
}

func (h *nobleMemberHandler) GetOrders(ctx context.Context, in *GetOrdersReq, out *GetOrdersResp) error {
	return h.NobleMemberHandler.GetOrders(ctx, in, out)
}

func (h *nobleMemberHandler) GetOrderStat(ctx context.Context, in *GetOrderStatReq, out *GetOrderStatResp) error {
	return h.NobleMemberHandler.GetOrderStat(ctx, in, out)
}
