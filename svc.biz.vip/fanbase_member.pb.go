// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: svc.biz.vip/fanbase_member.proto

package vip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FanbaseLevel int32

const (
	FanbaseLevel_FanbaseLevelUnknown FanbaseLevel = 0 // 未知
	FanbaseLevel_FanbaseLevelPrimary FanbaseLevel = 1 // 初级
	FanbaseLevel_FanbaseLevelSuper   FanbaseLevel = 2 // 超级
	FanbaseLevel_FanbaseLevelExtreme FanbaseLevel = 3 // 至尊
)

// Enum value maps for FanbaseLevel.
var (
	FanbaseLevel_name = map[int32]string{
		0: "FanbaseLevelUnknown",
		1: "FanbaseLevelPrimary",
		2: "FanbaseLevelSuper",
		3: "FanbaseLevelExtreme",
	}
	FanbaseLevel_value = map[string]int32{
		"FanbaseLevelUnknown": 0,
		"FanbaseLevelPrimary": 1,
		"FanbaseLevelSuper":   2,
		"FanbaseLevelExtreme": 3,
	}
)

func (x FanbaseLevel) Enum() *FanbaseLevel {
	p := new(FanbaseLevel)
	*p = x
	return p
}

func (x FanbaseLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanbaseLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_vip_fanbase_member_proto_enumTypes[0].Descriptor()
}

func (FanbaseLevel) Type() protoreflect.EnumType {
	return &file_svc_biz_vip_fanbase_member_proto_enumTypes[0]
}

func (x FanbaseLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanbaseLevel.Descriptor instead.
func (FanbaseLevel) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{0}
}

type JoinFanbaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string       `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	MemberId   string       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Level      FanbaseLevel `protobuf:"varint,3,opt,name=level,proto3,enum=svc.biz.vip.FanbaseLevel" json:"level,omitempty"`
}

func (x *JoinFanbaseReq) Reset() {
	*x = JoinFanbaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinFanbaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinFanbaseReq) ProtoMessage() {}

func (x *JoinFanbaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinFanbaseReq.ProtoReflect.Descriptor instead.
func (*JoinFanbaseReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{0}
}

func (x *JoinFanbaseReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *JoinFanbaseReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *JoinFanbaseReq) GetLevel() FanbaseLevel {
	if x != nil {
		return x.Level
	}
	return FanbaseLevel_FanbaseLevelUnknown
}

type LeaveFanbaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	MemberId   string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *LeaveFanbaseReq) Reset() {
	*x = LeaveFanbaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveFanbaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveFanbaseReq) ProtoMessage() {}

func (x *LeaveFanbaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveFanbaseReq.ProtoReflect.Descriptor instead.
func (*LeaveFanbaseReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{1}
}

func (x *LeaveFanbaseReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *LeaveFanbaseReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetFanbaseMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	MemberId   string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *GetFanbaseMemberReq) Reset() {
	*x = GetFanbaseMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanbaseMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanbaseMemberReq) ProtoMessage() {}

func (x *GetFanbaseMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanbaseMemberReq.ProtoReflect.Descriptor instead.
func (*GetFanbaseMemberReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{2}
}

func (x *GetFanbaseMemberReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *GetFanbaseMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetFanbaseMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanbaseMember *FanbaseMemberInfo `protobuf:"bytes,1,opt,name=fanbase_member,json=fanbaseMember,proto3" json:"fanbase_member,omitempty"`
}

func (x *GetFanbaseMemberResp) Reset() {
	*x = GetFanbaseMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanbaseMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanbaseMemberResp) ProtoMessage() {}

func (x *GetFanbaseMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanbaseMemberResp.ProtoReflect.Descriptor instead.
func (*GetFanbaseMemberResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{3}
}

func (x *GetFanbaseMemberResp) GetFanbaseMember() *FanbaseMemberInfo {
	if x != nil {
		return x.FanbaseMember
	}
	return nil
}

type FanbaseMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanbaseId              string                 `protobuf:"bytes,1,opt,name=fanbase_id,json=fanbaseId,proto3" json:"fanbase_id,omitempty"`
	StreamerId             string                 `protobuf:"bytes,2,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	MemberId               string                 `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Level                  FanbaseLevel           `protobuf:"varint,4,opt,name=level,proto3,enum=svc.biz.vip.FanbaseLevel" json:"level,omitempty"`
	JoinTime               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"` // 加入时间
	Score                  int32                  `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	RightsIcon             bool                   `protobuf:"varint,10,opt,name=rights_icon,json=rightsIcon,proto3" json:"rights_icon,omitempty"`                                         // 专属勋章
	RightsGift             bool                   `protobuf:"varint,11,opt,name=rights_gift,json=rightsGift,proto3" json:"rights_gift,omitempty"`                                         // 专属礼物
	RightsInroomEffect     bool                   `protobuf:"varint,12,opt,name=rights_inroom_effect,json=rightsInroomEffect,proto3" json:"rights_inroom_effect,omitempty"`               // 进场特效
	RightsAvoidKick        bool                   `protobuf:"varint,13,opt,name=rights_avoid_kick,json=rightsAvoidKick,proto3" json:"rights_avoid_kick,omitempty"`                        // 防踢
	RightsAvoidBanSpeaking bool                   `protobuf:"varint,14,opt,name=rights_avoid_ban_speaking,json=rightsAvoidBanSpeaking,proto3" json:"rights_avoid_ban_speaking,omitempty"` // 防禁言
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                            // 创建时间
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                            // 更新时间
}

func (x *FanbaseMemberInfo) Reset() {
	*x = FanbaseMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanbaseMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanbaseMemberInfo) ProtoMessage() {}

func (x *FanbaseMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanbaseMemberInfo.ProtoReflect.Descriptor instead.
func (*FanbaseMemberInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{4}
}

func (x *FanbaseMemberInfo) GetFanbaseId() string {
	if x != nil {
		return x.FanbaseId
	}
	return ""
}

func (x *FanbaseMemberInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *FanbaseMemberInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *FanbaseMemberInfo) GetLevel() FanbaseLevel {
	if x != nil {
		return x.Level
	}
	return FanbaseLevel_FanbaseLevelUnknown
}

func (x *FanbaseMemberInfo) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *FanbaseMemberInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FanbaseMemberInfo) GetRightsIcon() bool {
	if x != nil {
		return x.RightsIcon
	}
	return false
}

func (x *FanbaseMemberInfo) GetRightsGift() bool {
	if x != nil {
		return x.RightsGift
	}
	return false
}

func (x *FanbaseMemberInfo) GetRightsInroomEffect() bool {
	if x != nil {
		return x.RightsInroomEffect
	}
	return false
}

func (x *FanbaseMemberInfo) GetRightsAvoidKick() bool {
	if x != nil {
		return x.RightsAvoidKick
	}
	return false
}

func (x *FanbaseMemberInfo) GetRightsAvoidBanSpeaking() bool {
	if x != nil {
		return x.RightsAvoidBanSpeaking
	}
	return false
}

func (x *FanbaseMemberInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FanbaseMemberInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetFanbaseMemberByStreamerIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                 // 页数
	Limit      int32        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                               // 条数
	StreamerId string       `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`    // 主播id
	Level      FanbaseLevel `protobuf:"varint,4,opt,name=level,proto3,enum=svc.biz.vip.FanbaseLevel" json:"level,omitempty"` // 等级
}

func (x *GetFanbaseMemberByStreamerIDReq) Reset() {
	*x = GetFanbaseMemberByStreamerIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanbaseMemberByStreamerIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanbaseMemberByStreamerIDReq) ProtoMessage() {}

func (x *GetFanbaseMemberByStreamerIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanbaseMemberByStreamerIDReq.ProtoReflect.Descriptor instead.
func (*GetFanbaseMemberByStreamerIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{5}
}

func (x *GetFanbaseMemberByStreamerIDReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFanbaseMemberByStreamerIDReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFanbaseMemberByStreamerIDReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *GetFanbaseMemberByStreamerIDReq) GetLevel() FanbaseLevel {
	if x != nil {
		return x.Level
	}
	return FanbaseLevel_FanbaseLevelUnknown
}

type CountFanbaseMemberByStreamerIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string                 `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`    // 主播id
	Level      FanbaseLevel           `protobuf:"varint,2,opt,name=level,proto3,enum=svc.biz.vip.FanbaseLevel" json:"level,omitempty"` // 等级
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       // 开始时间
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`             // 结束时间
}

func (x *CountFanbaseMemberByStreamerIDReq) Reset() {
	*x = CountFanbaseMemberByStreamerIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFanbaseMemberByStreamerIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFanbaseMemberByStreamerIDReq) ProtoMessage() {}

func (x *CountFanbaseMemberByStreamerIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFanbaseMemberByStreamerIDReq.ProtoReflect.Descriptor instead.
func (*CountFanbaseMemberByStreamerIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{6}
}

func (x *CountFanbaseMemberByStreamerIDReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *CountFanbaseMemberByStreamerIDReq) GetLevel() FanbaseLevel {
	if x != nil {
		return x.Level
	}
	return FanbaseLevel_FanbaseLevelUnknown
}

func (x *CountFanbaseMemberByStreamerIDReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CountFanbaseMemberByStreamerIDReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type CountFanbaseMemberByStreamerIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
}

func (x *CountFanbaseMemberByStreamerIDResp) Reset() {
	*x = CountFanbaseMemberByStreamerIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFanbaseMemberByStreamerIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFanbaseMemberByStreamerIDResp) ProtoMessage() {}

func (x *CountFanbaseMemberByStreamerIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFanbaseMemberByStreamerIDResp.ProtoReflect.Descriptor instead.
func (*CountFanbaseMemberByStreamerIDResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{7}
}

func (x *CountFanbaseMemberByStreamerIDResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFanbaseMembertByMemberIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                        // 页数
	Limit    int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                      // 条数
	MemberId string `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // 成员id
}

func (x *GetFanbaseMembertByMemberIDReq) Reset() {
	*x = GetFanbaseMembertByMemberIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanbaseMembertByMemberIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanbaseMembertByMemberIDReq) ProtoMessage() {}

func (x *GetFanbaseMembertByMemberIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanbaseMembertByMemberIDReq.ProtoReflect.Descriptor instead.
func (*GetFanbaseMembertByMemberIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{8}
}

func (x *GetFanbaseMembertByMemberIDReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFanbaseMembertByMemberIDReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFanbaseMembertByMemberIDReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetOnlineFanbaseMemberByStreamerIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                              // 页数
	Limit      int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                            // 条数
	StreamerId string `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"` // 主播id
}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) Reset() {
	*x = GetOnlineFanbaseMemberByStreamerIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineFanbaseMemberByStreamerIDReq) ProtoMessage() {}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineFanbaseMemberByStreamerIDReq.ProtoReflect.Descriptor instead.
func (*GetOnlineFanbaseMemberByStreamerIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{9}
}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOnlineFanbaseMemberByStreamerIDReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type GetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FanbaseMemberInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetListResp) Reset() {
	*x = GetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResp) ProtoMessage() {}

func (x *GetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_vip_fanbase_member_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResp.ProtoReflect.Descriptor instead.
func (*GetListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_vip_fanbase_member_proto_rawDescGZIP(), []int{10}
}

func (x *GetListResp) GetItems() []*FanbaseMemberInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_svc_biz_vip_fanbase_member_proto protoreflect.FileDescriptor

var file_svc_biz_vip_fanbase_member_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2f, 0x66, 0x61,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a,
	0x0e, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4f,
	0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0e,
	0x66, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc1, 0x04, 0x0a, 0x11, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x47, 0x69, 0x66, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e,
	0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x76, 0x6f,
	0x69, 0x64, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x42, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x67, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a,
	0x70, 0x0a, 0x0c, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x10,
	0x03, 0x32, 0xc6, 0x05, 0x0a, 0x0d, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x46, 0x61, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x74, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x76, 0x69, 0x70, 0x3b, 0x76, 0x69, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_vip_fanbase_member_proto_rawDescOnce sync.Once
	file_svc_biz_vip_fanbase_member_proto_rawDescData = file_svc_biz_vip_fanbase_member_proto_rawDesc
)

func file_svc_biz_vip_fanbase_member_proto_rawDescGZIP() []byte {
	file_svc_biz_vip_fanbase_member_proto_rawDescOnce.Do(func() {
		file_svc_biz_vip_fanbase_member_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_vip_fanbase_member_proto_rawDescData)
	})
	return file_svc_biz_vip_fanbase_member_proto_rawDescData
}

var file_svc_biz_vip_fanbase_member_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_svc_biz_vip_fanbase_member_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_svc_biz_vip_fanbase_member_proto_goTypes = []any{
	(FanbaseLevel)(0),                             // 0: svc.biz.vip.FanbaseLevel
	(*JoinFanbaseReq)(nil),                        // 1: svc.biz.vip.JoinFanbaseReq
	(*LeaveFanbaseReq)(nil),                       // 2: svc.biz.vip.LeaveFanbaseReq
	(*GetFanbaseMemberReq)(nil),                   // 3: svc.biz.vip.GetFanbaseMemberReq
	(*GetFanbaseMemberResp)(nil),                  // 4: svc.biz.vip.GetFanbaseMemberResp
	(*FanbaseMemberInfo)(nil),                     // 5: svc.biz.vip.FanbaseMemberInfo
	(*GetFanbaseMemberByStreamerIDReq)(nil),       // 6: svc.biz.vip.GetFanbaseMemberByStreamerIDReq
	(*CountFanbaseMemberByStreamerIDReq)(nil),     // 7: svc.biz.vip.CountFanbaseMemberByStreamerIDReq
	(*CountFanbaseMemberByStreamerIDResp)(nil),    // 8: svc.biz.vip.CountFanbaseMemberByStreamerIDResp
	(*GetFanbaseMembertByMemberIDReq)(nil),        // 9: svc.biz.vip.GetFanbaseMembertByMemberIDReq
	(*GetOnlineFanbaseMemberByStreamerIDReq)(nil), // 10: svc.biz.vip.GetOnlineFanbaseMemberByStreamerIDReq
	(*GetListResp)(nil),                           // 11: svc.biz.vip.GetListResp
	(*timestamppb.Timestamp)(nil),                 // 12: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 13: google.protobuf.Empty
}
var file_svc_biz_vip_fanbase_member_proto_depIdxs = []int32{
	0,  // 0: svc.biz.vip.JoinFanbaseReq.level:type_name -> svc.biz.vip.FanbaseLevel
	5,  // 1: svc.biz.vip.GetFanbaseMemberResp.fanbase_member:type_name -> svc.biz.vip.FanbaseMemberInfo
	0,  // 2: svc.biz.vip.FanbaseMemberInfo.level:type_name -> svc.biz.vip.FanbaseLevel
	12, // 3: svc.biz.vip.FanbaseMemberInfo.join_time:type_name -> google.protobuf.Timestamp
	12, // 4: svc.biz.vip.FanbaseMemberInfo.created_at:type_name -> google.protobuf.Timestamp
	12, // 5: svc.biz.vip.FanbaseMemberInfo.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 6: svc.biz.vip.GetFanbaseMemberByStreamerIDReq.level:type_name -> svc.biz.vip.FanbaseLevel
	0,  // 7: svc.biz.vip.CountFanbaseMemberByStreamerIDReq.level:type_name -> svc.biz.vip.FanbaseLevel
	12, // 8: svc.biz.vip.CountFanbaseMemberByStreamerIDReq.start_time:type_name -> google.protobuf.Timestamp
	12, // 9: svc.biz.vip.CountFanbaseMemberByStreamerIDReq.end_time:type_name -> google.protobuf.Timestamp
	5,  // 10: svc.biz.vip.GetListResp.items:type_name -> svc.biz.vip.FanbaseMemberInfo
	1,  // 11: svc.biz.vip.FanbaseMember.JoinFanbase:input_type -> svc.biz.vip.JoinFanbaseReq
	2,  // 12: svc.biz.vip.FanbaseMember.LeaveFanbase:input_type -> svc.biz.vip.LeaveFanbaseReq
	3,  // 13: svc.biz.vip.FanbaseMember.GetFanbaseMember:input_type -> svc.biz.vip.GetFanbaseMemberReq
	6,  // 14: svc.biz.vip.FanbaseMember.GetFanbaseMemberByStreamerID:input_type -> svc.biz.vip.GetFanbaseMemberByStreamerIDReq
	7,  // 15: svc.biz.vip.FanbaseMember.CountFanbaseMemberByStreamerID:input_type -> svc.biz.vip.CountFanbaseMemberByStreamerIDReq
	10, // 16: svc.biz.vip.FanbaseMember.GetOnlineFanbaseMemberByStreamerID:input_type -> svc.biz.vip.GetOnlineFanbaseMemberByStreamerIDReq
	9,  // 17: svc.biz.vip.FanbaseMember.GetFanbaseMembertByMemberID:input_type -> svc.biz.vip.GetFanbaseMembertByMemberIDReq
	13, // 18: svc.biz.vip.FanbaseMember.JoinFanbase:output_type -> google.protobuf.Empty
	13, // 19: svc.biz.vip.FanbaseMember.LeaveFanbase:output_type -> google.protobuf.Empty
	4,  // 20: svc.biz.vip.FanbaseMember.GetFanbaseMember:output_type -> svc.biz.vip.GetFanbaseMemberResp
	11, // 21: svc.biz.vip.FanbaseMember.GetFanbaseMemberByStreamerID:output_type -> svc.biz.vip.GetListResp
	8,  // 22: svc.biz.vip.FanbaseMember.CountFanbaseMemberByStreamerID:output_type -> svc.biz.vip.CountFanbaseMemberByStreamerIDResp
	11, // 23: svc.biz.vip.FanbaseMember.GetOnlineFanbaseMemberByStreamerID:output_type -> svc.biz.vip.GetListResp
	11, // 24: svc.biz.vip.FanbaseMember.GetFanbaseMembertByMemberID:output_type -> svc.biz.vip.GetListResp
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_svc_biz_vip_fanbase_member_proto_init() }
func file_svc_biz_vip_fanbase_member_proto_init() {
	if File_svc_biz_vip_fanbase_member_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_vip_fanbase_member_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*JoinFanbaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LeaveFanbaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetFanbaseMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFanbaseMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FanbaseMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetFanbaseMemberByStreamerIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CountFanbaseMemberByStreamerIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CountFanbaseMemberByStreamerIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetFanbaseMembertByMemberIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnlineFanbaseMemberByStreamerIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_vip_fanbase_member_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_vip_fanbase_member_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_vip_fanbase_member_proto_goTypes,
		DependencyIndexes: file_svc_biz_vip_fanbase_member_proto_depIdxs,
		EnumInfos:         file_svc_biz_vip_fanbase_member_proto_enumTypes,
		MessageInfos:      file_svc_biz_vip_fanbase_member_proto_msgTypes,
	}.Build()
	File_svc_biz_vip_fanbase_member_proto = out.File
	file_svc_biz_vip_fanbase_member_proto_rawDesc = nil
	file_svc_biz_vip_fanbase_member_proto_goTypes = nil
	file_svc_biz_vip_fanbase_member_proto_depIdxs = nil
}
