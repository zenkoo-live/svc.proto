// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.vip/fans_club.proto

package vip

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FansClub service

func NewFansClubEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FansClub service

type FansClubService interface {
	// CreateFansClub 创建粉丝团
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateResp, error)
	// GetFansClub 获取粉丝团
	GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, opts ...client.CallOption) (*GetFansClubResp, error)
	// GetFansClubByName 通过名称获取粉丝团
	GetByName(ctx context.Context, in *GetByNameReq, opts ...client.CallOption) (*GetFansClubResp, error)
	// UpdateByStreamerID 更新粉丝团
	UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, opts ...client.CallOption) (*emptypb.Empty, error)
}

type fansClubService struct {
	c    client.Client
	name string
}

func NewFansClubService(name string, c client.Client) FansClubService {
	return &fansClubService{
		c:    c,
		name: name,
	}
}

func (c *fansClubService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateResp, error) {
	req := c.c.NewRequest(c.name, "FansClub.Create", in)
	out := new(CreateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubService) GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, opts ...client.CallOption) (*GetFansClubResp, error) {
	req := c.c.NewRequest(c.name, "FansClub.GetByStreamerID", in)
	out := new(GetFansClubResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubService) GetByName(ctx context.Context, in *GetByNameReq, opts ...client.CallOption) (*GetFansClubResp, error) {
	req := c.c.NewRequest(c.name, "FansClub.GetByName", in)
	out := new(GetFansClubResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubService) UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "FansClub.UpdateByStreamerID", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FansClub service

type FansClubHandler interface {
	// CreateFansClub 创建粉丝团
	Create(context.Context, *CreateReq, *CreateResp) error
	// GetFansClub 获取粉丝团
	GetByStreamerID(context.Context, *GetByStreamerIDReq, *GetFansClubResp) error
	// GetFansClubByName 通过名称获取粉丝团
	GetByName(context.Context, *GetByNameReq, *GetFansClubResp) error
	// UpdateByStreamerID 更新粉丝团
	UpdateByStreamerID(context.Context, *UpdateByStreamerIDReq, *emptypb.Empty) error
}

func RegisterFansClubHandler(s server.Server, hdlr FansClubHandler, opts ...server.HandlerOption) error {
	type fansClub interface {
		Create(ctx context.Context, in *CreateReq, out *CreateResp) error
		GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, out *GetFansClubResp) error
		GetByName(ctx context.Context, in *GetByNameReq, out *GetFansClubResp) error
		UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, out *emptypb.Empty) error
	}
	type FansClub struct {
		fansClub
	}
	h := &fansClubHandler{hdlr}
	return s.Handle(s.NewHandler(&FansClub{h}, opts...))
}

type fansClubHandler struct {
	FansClubHandler
}

func (h *fansClubHandler) Create(ctx context.Context, in *CreateReq, out *CreateResp) error {
	return h.FansClubHandler.Create(ctx, in, out)
}

func (h *fansClubHandler) GetByStreamerID(ctx context.Context, in *GetByStreamerIDReq, out *GetFansClubResp) error {
	return h.FansClubHandler.GetByStreamerID(ctx, in, out)
}

func (h *fansClubHandler) GetByName(ctx context.Context, in *GetByNameReq, out *GetFansClubResp) error {
	return h.FansClubHandler.GetByName(ctx, in, out)
}

func (h *fansClubHandler) UpdateByStreamerID(ctx context.Context, in *UpdateByStreamerIDReq, out *emptypb.Empty) error {
	return h.FansClubHandler.UpdateByStreamerID(ctx, in, out)
}
