// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.vip/fans_club_member.proto

package vip

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FansClubMember service

func NewFansClubMemberEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FansClubMember service

type FansClubMemberService interface {
	// Join 加入粉丝团
	Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// Leave 离开粉丝团
	Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// Get 获取粉丝团成员信息
	Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetFansClubMemberResp, error)
	// GetListByStreamerID 获取主播粉丝团成员列表
	GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error)
	// GetListByMemberID 获取用户加入的粉丝团列表
	GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, opts ...client.CallOption) (*GetListResp, error)
}

type fansClubMemberService struct {
	c    client.Client
	name string
}

func NewFansClubMemberService(name string, c client.Client) FansClubMemberService {
	return &fansClubMemberService{
		c:    c,
		name: name,
	}
}

func (c *fansClubMemberService) Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "FansClubMember.Join", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberService) Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "FansClubMember.Leave", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberService) Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetFansClubMemberResp, error) {
	req := c.c.NewRequest(c.name, "FansClubMember.Get", in)
	out := new(GetFansClubMemberResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberService) GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "FansClubMember.GetListByStreamerID", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fansClubMemberService) GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "FansClubMember.GetListByMemberID", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FansClubMember service

type FansClubMemberHandler interface {
	// Join 加入粉丝团
	Join(context.Context, *JoinReq, *emptypb.Empty) error
	// Leave 离开粉丝团
	Leave(context.Context, *LeaveReq, *emptypb.Empty) error
	// Get 获取粉丝团成员信息
	Get(context.Context, *GetReq, *GetFansClubMemberResp) error
	// GetListByStreamerID 获取主播粉丝团成员列表
	GetListByStreamerID(context.Context, *GetListByStreamerIDReq, *GetListResp) error
	// GetListByMemberID 获取用户加入的粉丝团列表
	GetListByMemberID(context.Context, *GetListByMemberIDReq, *GetListResp) error
}

func RegisterFansClubMemberHandler(s server.Server, hdlr FansClubMemberHandler, opts ...server.HandlerOption) error {
	type fansClubMember interface {
		Join(ctx context.Context, in *JoinReq, out *emptypb.Empty) error
		Leave(ctx context.Context, in *LeaveReq, out *emptypb.Empty) error
		Get(ctx context.Context, in *GetReq, out *GetFansClubMemberResp) error
		GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, out *GetListResp) error
		GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, out *GetListResp) error
	}
	type FansClubMember struct {
		fansClubMember
	}
	h := &fansClubMemberHandler{hdlr}
	return s.Handle(s.NewHandler(&FansClubMember{h}, opts...))
}

type fansClubMemberHandler struct {
	FansClubMemberHandler
}

func (h *fansClubMemberHandler) Join(ctx context.Context, in *JoinReq, out *emptypb.Empty) error {
	return h.FansClubMemberHandler.Join(ctx, in, out)
}

func (h *fansClubMemberHandler) Leave(ctx context.Context, in *LeaveReq, out *emptypb.Empty) error {
	return h.FansClubMemberHandler.Leave(ctx, in, out)
}

func (h *fansClubMemberHandler) Get(ctx context.Context, in *GetReq, out *GetFansClubMemberResp) error {
	return h.FansClubMemberHandler.Get(ctx, in, out)
}

func (h *fansClubMemberHandler) GetListByStreamerID(ctx context.Context, in *GetListByStreamerIDReq, out *GetListResp) error {
	return h.FansClubMemberHandler.GetListByStreamerID(ctx, in, out)
}

func (h *fansClubMemberHandler) GetListByMemberID(ctx context.Context, in *GetListByMemberIDReq, out *GetListResp) error {
	return h.FansClubMemberHandler.GetListByMemberID(ctx, in, out)
}
