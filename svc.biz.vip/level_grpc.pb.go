// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: svc.biz.vip/level.proto

package vip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Level_ReLoadLevelConf_FullMethodName = "/svc.biz.vip.Level/ReLoadLevelConf"
	Level_GetMemberLevel_FullMethodName  = "/svc.biz.vip.Level/GetMemberLevel"
	Level_GetConfList_FullMethodName     = "/svc.biz.vip.Level/GetConfList"
	Level_AddConf_FullMethodName         = "/svc.biz.vip.Level/AddConf"
	Level_UpdateConf_FullMethodName      = "/svc.biz.vip.Level/UpdateConf"
)

// LevelClient is the client API for Level service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 等级
type LevelClient interface {
	// ReLoadLevelConf 重载等级配置
	ReLoadLevelConf(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetMemberLevel 获取成员等级
	GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...grpc.CallOption) (*GetMemberLevelResp, error)
	// GetConfList 获取等级配置列表
	GetConfList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfListResp, error)
	// AddConf 添加等级配置
	AddConf(ctx context.Context, in *AddConfReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateConf 更新等级配置（按照level字段更新）
	UpdateConf(ctx context.Context, in *UpdateConfReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type levelClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelClient(cc grpc.ClientConnInterface) LevelClient {
	return &levelClient{cc}
}

func (c *levelClient) ReLoadLevelConf(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Level_ReLoadLevelConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelClient) GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...grpc.CallOption) (*GetMemberLevelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberLevelResp)
	err := c.cc.Invoke(ctx, Level_GetMemberLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelClient) GetConfList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfListResp)
	err := c.cc.Invoke(ctx, Level_GetConfList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelClient) AddConf(ctx context.Context, in *AddConfReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Level_AddConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelClient) UpdateConf(ctx context.Context, in *UpdateConfReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Level_UpdateConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelServer is the server API for Level service.
// All implementations must embed UnimplementedLevelServer
// for forward compatibility
//
// 等级
type LevelServer interface {
	// ReLoadLevelConf 重载等级配置
	ReLoadLevelConf(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetMemberLevel 获取成员等级
	GetMemberLevel(context.Context, *GetMemberLevelReq) (*GetMemberLevelResp, error)
	// GetConfList 获取等级配置列表
	GetConfList(context.Context, *emptypb.Empty) (*GetConfListResp, error)
	// AddConf 添加等级配置
	AddConf(context.Context, *AddConfReq) (*emptypb.Empty, error)
	// UpdateConf 更新等级配置（按照level字段更新）
	UpdateConf(context.Context, *UpdateConfReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedLevelServer()
}

// UnimplementedLevelServer must be embedded to have forward compatible implementations.
type UnimplementedLevelServer struct {
}

func (UnimplementedLevelServer) ReLoadLevelConf(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReLoadLevelConf not implemented")
}
func (UnimplementedLevelServer) GetMemberLevel(context.Context, *GetMemberLevelReq) (*GetMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberLevel not implemented")
}
func (UnimplementedLevelServer) GetConfList(context.Context, *emptypb.Empty) (*GetConfListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfList not implemented")
}
func (UnimplementedLevelServer) AddConf(context.Context, *AddConfReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConf not implemented")
}
func (UnimplementedLevelServer) UpdateConf(context.Context, *UpdateConfReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConf not implemented")
}
func (UnimplementedLevelServer) mustEmbedUnimplementedLevelServer() {}

// UnsafeLevelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LevelServer will
// result in compilation errors.
type UnsafeLevelServer interface {
	mustEmbedUnimplementedLevelServer()
}

func RegisterLevelServer(s grpc.ServiceRegistrar, srv LevelServer) {
	s.RegisterService(&Level_ServiceDesc, srv)
}

func _Level_ReLoadLevelConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).ReLoadLevelConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_ReLoadLevelConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).ReLoadLevelConf(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Level_GetMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).GetMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_GetMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).GetMemberLevel(ctx, req.(*GetMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Level_GetConfList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).GetConfList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_GetConfList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).GetConfList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Level_AddConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).AddConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_AddConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).AddConf(ctx, req.(*AddConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Level_UpdateConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).UpdateConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_UpdateConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).UpdateConf(ctx, req.(*UpdateConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Level_ServiceDesc is the grpc.ServiceDesc for Level service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Level_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.vip.Level",
	HandlerType: (*LevelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReLoadLevelConf",
			Handler:    _Level_ReLoadLevelConf_Handler,
		},
		{
			MethodName: "GetMemberLevel",
			Handler:    _Level_GetMemberLevel_Handler,
		},
		{
			MethodName: "GetConfList",
			Handler:    _Level_GetConfList_Handler,
		},
		{
			MethodName: "AddConf",
			Handler:    _Level_AddConf_Handler,
		},
		{
			MethodName: "UpdateConf",
			Handler:    _Level_UpdateConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.vip/level.proto",
}
