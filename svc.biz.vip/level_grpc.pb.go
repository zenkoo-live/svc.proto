// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: svc.biz.vip/level.proto

package vip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Level_GetMemberLevel_FullMethodName = "/svc.biz.vip.Level/GetMemberLevel"
)

// LevelClient is the client API for Level service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 等级
type LevelClient interface {
	// GetMemberLevel 获取成员等级
	GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...grpc.CallOption) (*GetMemberLevelResp, error)
}

type levelClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelClient(cc grpc.ClientConnInterface) LevelClient {
	return &levelClient{cc}
}

func (c *levelClient) GetMemberLevel(ctx context.Context, in *GetMemberLevelReq, opts ...grpc.CallOption) (*GetMemberLevelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberLevelResp)
	err := c.cc.Invoke(ctx, Level_GetMemberLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelServer is the server API for Level service.
// All implementations must embed UnimplementedLevelServer
// for forward compatibility
//
// 等级
type LevelServer interface {
	// GetMemberLevel 获取成员等级
	GetMemberLevel(context.Context, *GetMemberLevelReq) (*GetMemberLevelResp, error)
	mustEmbedUnimplementedLevelServer()
}

// UnimplementedLevelServer must be embedded to have forward compatible implementations.
type UnimplementedLevelServer struct {
}

func (UnimplementedLevelServer) GetMemberLevel(context.Context, *GetMemberLevelReq) (*GetMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberLevel not implemented")
}
func (UnimplementedLevelServer) mustEmbedUnimplementedLevelServer() {}

// UnsafeLevelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LevelServer will
// result in compilation errors.
type UnsafeLevelServer interface {
	mustEmbedUnimplementedLevelServer()
}

func RegisterLevelServer(s grpc.ServiceRegistrar, srv LevelServer) {
	s.RegisterService(&Level_ServiceDesc, srv)
}

func _Level_GetMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServer).GetMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Level_GetMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServer).GetMemberLevel(ctx, req.(*GetMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Level_ServiceDesc is the grpc.ServiceDesc for Level service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Level_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.vip.Level",
	HandlerType: (*LevelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemberLevel",
			Handler:    _Level_GetMemberLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.vip/level.proto",
}
