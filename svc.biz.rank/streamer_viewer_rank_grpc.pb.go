// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: svc.biz.rank/streamer_viewer_rank.proto

package rank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamerViewerRank_GetStreamerViewerLiveMember_FullMethodName       = "/svc.biz.rank.StreamerViewerRank/GetStreamerViewerLiveMember"
	StreamerViewerRank_GetStreamerViewerLiveOnlineMember_FullMethodName = "/svc.biz.rank.StreamerViewerRank/GetStreamerViewerLiveOnlineMember"
	StreamerViewerRank_GetStreamerViewerGiftMember_FullMethodName       = "/svc.biz.rank.StreamerViewerRank/GetStreamerViewerGiftMember"
	StreamerViewerRank_GetStreamerViewerGlamourMember_FullMethodName    = "/svc.biz.rank.StreamerViewerRank/GetStreamerViewerGlamourMember"
)

// StreamerViewerRankClient is the client API for StreamerViewerRank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 排行
type StreamerViewerRankClient interface {
	// 获取主播某场直播的排行榜成员
	GetStreamerViewerLiveMember(ctx context.Context, in *GetStreamerViewerLiveMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error)
	// 获取主播某场直播的在线排行榜成员
	GetStreamerViewerLiveOnlineMember(ctx context.Context, in *GetStreamerViewerLiveMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error)
	// 获取给主播贡献礼物的排行榜成员
	GetStreamerViewerGiftMember(ctx context.Context, in *GetStreamerViewerGiftMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error)
	// 获取给主播贡献魅力值的排行榜成员
	GetStreamerViewerGlamourMember(ctx context.Context, in *GetStreamerViewerGlamourMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error)
}

type streamerViewerRankClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerViewerRankClient(cc grpc.ClientConnInterface) StreamerViewerRankClient {
	return &streamerViewerRankClient{cc}
}

func (c *streamerViewerRankClient) GetStreamerViewerLiveMember(ctx context.Context, in *GetStreamerViewerLiveMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamerViewerRankResp)
	err := c.cc.Invoke(ctx, StreamerViewerRank_GetStreamerViewerLiveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerViewerRankClient) GetStreamerViewerLiveOnlineMember(ctx context.Context, in *GetStreamerViewerLiveMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamerViewerRankResp)
	err := c.cc.Invoke(ctx, StreamerViewerRank_GetStreamerViewerLiveOnlineMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerViewerRankClient) GetStreamerViewerGiftMember(ctx context.Context, in *GetStreamerViewerGiftMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamerViewerRankResp)
	err := c.cc.Invoke(ctx, StreamerViewerRank_GetStreamerViewerGiftMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerViewerRankClient) GetStreamerViewerGlamourMember(ctx context.Context, in *GetStreamerViewerGlamourMemberReq, opts ...grpc.CallOption) (*GetStreamerViewerRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamerViewerRankResp)
	err := c.cc.Invoke(ctx, StreamerViewerRank_GetStreamerViewerGlamourMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamerViewerRankServer is the server API for StreamerViewerRank service.
// All implementations must embed UnimplementedStreamerViewerRankServer
// for forward compatibility
//
// 排行
type StreamerViewerRankServer interface {
	// 获取主播某场直播的排行榜成员
	GetStreamerViewerLiveMember(context.Context, *GetStreamerViewerLiveMemberReq) (*GetStreamerViewerRankResp, error)
	// 获取主播某场直播的在线排行榜成员
	GetStreamerViewerLiveOnlineMember(context.Context, *GetStreamerViewerLiveMemberReq) (*GetStreamerViewerRankResp, error)
	// 获取给主播贡献礼物的排行榜成员
	GetStreamerViewerGiftMember(context.Context, *GetStreamerViewerGiftMemberReq) (*GetStreamerViewerRankResp, error)
	// 获取给主播贡献魅力值的排行榜成员
	GetStreamerViewerGlamourMember(context.Context, *GetStreamerViewerGlamourMemberReq) (*GetStreamerViewerRankResp, error)
	mustEmbedUnimplementedStreamerViewerRankServer()
}

// UnimplementedStreamerViewerRankServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerViewerRankServer struct {
}

func (UnimplementedStreamerViewerRankServer) GetStreamerViewerLiveMember(context.Context, *GetStreamerViewerLiveMemberReq) (*GetStreamerViewerRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerViewerLiveMember not implemented")
}
func (UnimplementedStreamerViewerRankServer) GetStreamerViewerLiveOnlineMember(context.Context, *GetStreamerViewerLiveMemberReq) (*GetStreamerViewerRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerViewerLiveOnlineMember not implemented")
}
func (UnimplementedStreamerViewerRankServer) GetStreamerViewerGiftMember(context.Context, *GetStreamerViewerGiftMemberReq) (*GetStreamerViewerRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerViewerGiftMember not implemented")
}
func (UnimplementedStreamerViewerRankServer) GetStreamerViewerGlamourMember(context.Context, *GetStreamerViewerGlamourMemberReq) (*GetStreamerViewerRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerViewerGlamourMember not implemented")
}
func (UnimplementedStreamerViewerRankServer) mustEmbedUnimplementedStreamerViewerRankServer() {}

// UnsafeStreamerViewerRankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerViewerRankServer will
// result in compilation errors.
type UnsafeStreamerViewerRankServer interface {
	mustEmbedUnimplementedStreamerViewerRankServer()
}

func RegisterStreamerViewerRankServer(s grpc.ServiceRegistrar, srv StreamerViewerRankServer) {
	s.RegisterService(&StreamerViewerRank_ServiceDesc, srv)
}

func _StreamerViewerRank_GetStreamerViewerLiveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerViewerLiveMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerViewerRankServer).GetStreamerViewerLiveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamerViewerRank_GetStreamerViewerLiveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerViewerRankServer).GetStreamerViewerLiveMember(ctx, req.(*GetStreamerViewerLiveMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamerViewerRank_GetStreamerViewerLiveOnlineMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerViewerLiveMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerViewerRankServer).GetStreamerViewerLiveOnlineMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamerViewerRank_GetStreamerViewerLiveOnlineMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerViewerRankServer).GetStreamerViewerLiveOnlineMember(ctx, req.(*GetStreamerViewerLiveMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamerViewerRank_GetStreamerViewerGiftMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerViewerGiftMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerViewerRankServer).GetStreamerViewerGiftMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamerViewerRank_GetStreamerViewerGiftMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerViewerRankServer).GetStreamerViewerGiftMember(ctx, req.(*GetStreamerViewerGiftMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamerViewerRank_GetStreamerViewerGlamourMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerViewerGlamourMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerViewerRankServer).GetStreamerViewerGlamourMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamerViewerRank_GetStreamerViewerGlamourMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerViewerRankServer).GetStreamerViewerGlamourMember(ctx, req.(*GetStreamerViewerGlamourMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamerViewerRank_ServiceDesc is the grpc.ServiceDesc for StreamerViewerRank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamerViewerRank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.rank.StreamerViewerRank",
	HandlerType: (*StreamerViewerRankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreamerViewerLiveMember",
			Handler:    _StreamerViewerRank_GetStreamerViewerLiveMember_Handler,
		},
		{
			MethodName: "GetStreamerViewerLiveOnlineMember",
			Handler:    _StreamerViewerRank_GetStreamerViewerLiveOnlineMember_Handler,
		},
		{
			MethodName: "GetStreamerViewerGiftMember",
			Handler:    _StreamerViewerRank_GetStreamerViewerGiftMember_Handler,
		},
		{
			MethodName: "GetStreamerViewerGlamourMember",
			Handler:    _StreamerViewerRank_GetStreamerViewerGlamourMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.rank/streamer_viewer_rank.proto",
}
