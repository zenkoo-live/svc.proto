// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.infra.link/trace.proto

package link

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LinkTrace service

type LinkTraceService interface {
	// 设置Trace
	Start(ctx context.Context, in *StartTraceRequest, opts ...client.CallOption) (*StartTraceResponse, error)
	// 关闭Trace
	Stop(ctx context.Context, in *StopTraceRequest, opts ...client.CallOption) (*StopTraceResponse, error)
}

type linkTraceService struct {
	c    client.Client
	name string
}

func NewLinkTraceService(name string, c client.Client) LinkTraceService {
	return &linkTraceService{
		c:    c,
		name: name,
	}
}

func (c *linkTraceService) Start(ctx context.Context, in *StartTraceRequest, opts ...client.CallOption) (*StartTraceResponse, error) {
	req := c.c.NewRequest(c.name, "LinkTrace.Start", in)
	out := new(StartTraceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkTraceService) Stop(ctx context.Context, in *StopTraceRequest, opts ...client.CallOption) (*StopTraceResponse, error) {
	req := c.c.NewRequest(c.name, "LinkTrace.Stop", in)
	out := new(StopTraceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LinkTrace service

type LinkTraceHandler interface {
	// 设置Trace
	Start(context.Context, *StartTraceRequest, *StartTraceResponse) error
	// 关闭Trace
	Stop(context.Context, *StopTraceRequest, *StopTraceResponse) error
}

func RegisterLinkTraceHandler(s server.Server, hdlr LinkTraceHandler, opts ...server.HandlerOption) error {
	type linkTrace interface {
		Start(ctx context.Context, in *StartTraceRequest, out *StartTraceResponse) error
		Stop(ctx context.Context, in *StopTraceRequest, out *StopTraceResponse) error
	}
	type LinkTrace struct {
		linkTrace
	}
	h := &linkTraceHandler{hdlr}
	return s.Handle(s.NewHandler(&LinkTrace{h}, opts...))
}

type linkTraceHandler struct {
	LinkTraceHandler
}

func (h *linkTraceHandler) Start(ctx context.Context, in *StartTraceRequest, out *StartTraceResponse) error {
	return h.LinkTraceHandler.Start(ctx, in, out)
}

func (h *linkTraceHandler) Stop(ctx context.Context, in *StopTraceRequest, out *StopTraceResponse) error {
	return h.LinkTraceHandler.Stop(ctx, in, out)
}
