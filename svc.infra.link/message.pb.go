// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: svc.infra.link/message.proto

package link

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendGlobalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PayloadType            `protobuf:"varint,1,opt,name=type,proto3,enum=svc.infra.link.PayloadType" json:"type,omitempty"`          // 消息类型
	Priority      PriorityType           `protobuf:"varint,2,opt,name=priority,proto3,enum=svc.infra.link.PriorityType" json:"priority,omitempty"` // 消息优先级
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                     // 消息内容
	ToGroup       string                 `protobuf:"bytes,17,opt,name=to_group,json=toGroup,proto3" json:"to_group,omitempty"`                     // 组别（大于0：所有在组中的连接、0：所有连接、小于0：所有不在组中的连接）
	From          string                 `protobuf:"bytes,255,opt,name=from,proto3" json:"from,omitempty"`                                         // 发送者（账号ID）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendGlobalRequest) Reset() {
	*x = SendGlobalRequest{}
	mi := &file_svc_infra_link_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendGlobalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGlobalRequest) ProtoMessage() {}

func (x *SendGlobalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGlobalRequest.ProtoReflect.Descriptor instead.
func (*SendGlobalRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{0}
}

func (x *SendGlobalRequest) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_StreamerDm
}

func (x *SendGlobalRequest) GetPriority() PriorityType {
	if x != nil {
		return x.Priority
	}
	return PriorityType_Low
}

func (x *SendGlobalRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendGlobalRequest) GetToGroup() string {
	if x != nil {
		return x.ToGroup
	}
	return ""
}

func (x *SendGlobalRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SendGlobalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`                                // 是否发送成功（仅标识接收成功状态，不代表完全投递）
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // 消息ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendGlobalResponse) Reset() {
	*x = SendGlobalResponse{}
	mi := &file_svc_infra_link_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendGlobalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGlobalResponse) ProtoMessage() {}

func (x *SendGlobalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGlobalResponse.ProtoReflect.Descriptor instead.
func (*SendGlobalResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{1}
}

func (x *SendGlobalResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SendGlobalResponse) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type SendGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PayloadType            `protobuf:"varint,1,opt,name=type,proto3,enum=svc.infra.link.PayloadType" json:"type,omitempty"`          // 消息类型
	Priority      PriorityType           `protobuf:"varint,2,opt,name=priority,proto3,enum=svc.infra.link.PriorityType" json:"priority,omitempty"` // 消息优先级
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                     // 消息内容
	ToGroup       string                 `protobuf:"bytes,17,opt,name=to_group,json=toGroup,proto3" json:"to_group,omitempty"`                     // 接收群组
	From          string                 `protobuf:"bytes,255,opt,name=from,proto3" json:"from,omitempty"`                                         // 发送者
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendGroupRequest) Reset() {
	*x = SendGroupRequest{}
	mi := &file_svc_infra_link_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGroupRequest) ProtoMessage() {}

func (x *SendGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGroupRequest.ProtoReflect.Descriptor instead.
func (*SendGroupRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{2}
}

func (x *SendGroupRequest) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_StreamerDm
}

func (x *SendGroupRequest) GetPriority() PriorityType {
	if x != nil {
		return x.Priority
	}
	return PriorityType_Low
}

func (x *SendGroupRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendGroupRequest) GetToGroup() string {
	if x != nil {
		return x.ToGroup
	}
	return ""
}

func (x *SendGroupRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SendGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`                                // 是否发送成功
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // 消息ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendGroupResponse) Reset() {
	*x = SendGroupResponse{}
	mi := &file_svc_infra_link_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGroupResponse) ProtoMessage() {}

func (x *SendGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGroupResponse.ProtoReflect.Descriptor instead.
func (*SendGroupResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{3}
}

func (x *SendGroupResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SendGroupResponse) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type SendAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PayloadType            `protobuf:"varint,1,opt,name=type,proto3,enum=svc.infra.link.PayloadType" json:"type,omitempty"`          // 消息类型
	Priority      PriorityType           `protobuf:"varint,2,opt,name=priority,proto3,enum=svc.infra.link.PriorityType" json:"priority,omitempty"` // 消息优先级
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                     // 消息内容
	ToAccount     string                 `protobuf:"bytes,16,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`               // 接收账号
	ToGroup       string                 `protobuf:"bytes,17,opt,name=to_group,json=toGroup,proto3" json:"to_group,omitempty"`                     // 接收群组（可留空）（如不为空，标识只发给该群组下的对应账号）
	From          string                 `protobuf:"bytes,255,opt,name=from,proto3" json:"from,omitempty"`                                         // 发送者
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendAccountRequest) Reset() {
	*x = SendAccountRequest{}
	mi := &file_svc_infra_link_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAccountRequest) ProtoMessage() {}

func (x *SendAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAccountRequest.ProtoReflect.Descriptor instead.
func (*SendAccountRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{4}
}

func (x *SendAccountRequest) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_StreamerDm
}

func (x *SendAccountRequest) GetPriority() PriorityType {
	if x != nil {
		return x.Priority
	}
	return PriorityType_Low
}

func (x *SendAccountRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendAccountRequest) GetToAccount() string {
	if x != nil {
		return x.ToAccount
	}
	return ""
}

func (x *SendAccountRequest) GetToGroup() string {
	if x != nil {
		return x.ToGroup
	}
	return ""
}

func (x *SendAccountRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SendAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`                                // 是否发送成功
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // 消息ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendAccountResponse) Reset() {
	*x = SendAccountResponse{}
	mi := &file_svc_infra_link_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAccountResponse) ProtoMessage() {}

func (x *SendAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAccountResponse.ProtoReflect.Descriptor instead.
func (*SendAccountResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{5}
}

func (x *SendAccountResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SendAccountResponse) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type SendDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PayloadType            `protobuf:"varint,1,opt,name=type,proto3,enum=svc.infra.link.PayloadType" json:"type,omitempty"`          // 消息类型
	Priority      PriorityType           `protobuf:"varint,2,opt,name=priority,proto3,enum=svc.infra.link.PriorityType" json:"priority,omitempty"` // 消息优先级
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                     // 消息内容
	ToDevice      string                 `protobuf:"bytes,18,opt,name=to_device,json=toDevice,proto3" json:"to_device,omitempty"`                  // 接收设备
	From          string                 `protobuf:"bytes,255,opt,name=from,proto3" json:"from,omitempty"`                                         // 发送者
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendDeviceRequest) Reset() {
	*x = SendDeviceRequest{}
	mi := &file_svc_infra_link_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDeviceRequest) ProtoMessage() {}

func (x *SendDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDeviceRequest.ProtoReflect.Descriptor instead.
func (*SendDeviceRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{6}
}

func (x *SendDeviceRequest) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_StreamerDm
}

func (x *SendDeviceRequest) GetPriority() PriorityType {
	if x != nil {
		return x.Priority
	}
	return PriorityType_Low
}

func (x *SendDeviceRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendDeviceRequest) GetToDevice() string {
	if x != nil {
		return x.ToDevice
	}
	return ""
}

func (x *SendDeviceRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SendDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`                                // 是否发送成功
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // 消息ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendDeviceResponse) Reset() {
	*x = SendDeviceResponse{}
	mi := &file_svc_infra_link_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDeviceResponse) ProtoMessage() {}

func (x *SendDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDeviceResponse.ProtoReflect.Descriptor instead.
func (*SendDeviceResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{7}
}

func (x *SendDeviceResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SendDeviceResponse) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type SendSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PayloadType            `protobuf:"varint,1,opt,name=type,proto3,enum=svc.infra.link.PayloadType" json:"type,omitempty"`
	Priority      PriorityType           `protobuf:"varint,2,opt,name=priority,proto3,enum=svc.infra.link.PriorityType" json:"priority,omitempty"`
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	ToSession     string                 `protobuf:"bytes,15,opt,name=to_session,json=toSession,proto3" json:"to_session,omitempty"`
	From          string                 `protobuf:"bytes,255,opt,name=from,proto3" json:"from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSessionRequest) Reset() {
	*x = SendSessionRequest{}
	mi := &file_svc_infra_link_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionRequest) ProtoMessage() {}

func (x *SendSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionRequest.ProtoReflect.Descriptor instead.
func (*SendSessionRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{8}
}

func (x *SendSessionRequest) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_StreamerDm
}

func (x *SendSessionRequest) GetPriority() PriorityType {
	if x != nil {
		return x.Priority
	}
	return PriorityType_Low
}

func (x *SendSessionRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendSessionRequest) GetToSession() string {
	if x != nil {
		return x.ToSession
	}
	return ""
}

func (x *SendSessionRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SendSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSessionResponse) Reset() {
	*x = SendSessionResponse{}
	mi := &file_svc_infra_link_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionResponse) ProtoMessage() {}

func (x *SendSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_link_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionResponse.ProtoReflect.Descriptor instead.
func (*SendSessionResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_link_message_proto_rawDescGZIP(), []int{9}
}

func (x *SendSessionResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SendSessionResponse) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

var File_svc_infra_link_message_proto protoreflect.FileDescriptor

var file_svc_infra_link_message_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x1c,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a,
	0x11, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x43, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x43, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x01,
	0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x44, 0x0a,
	0x13, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x32, 0xc3, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x65,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x3b, 0x6c, 0x69,
	0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_svc_infra_link_message_proto_rawDescOnce sync.Once
	file_svc_infra_link_message_proto_rawDescData []byte
)

func file_svc_infra_link_message_proto_rawDescGZIP() []byte {
	file_svc_infra_link_message_proto_rawDescOnce.Do(func() {
		file_svc_infra_link_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_infra_link_message_proto_rawDesc), len(file_svc_infra_link_message_proto_rawDesc)))
	})
	return file_svc_infra_link_message_proto_rawDescData
}

var file_svc_infra_link_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_svc_infra_link_message_proto_goTypes = []any{
	(*SendGlobalRequest)(nil),   // 0: svc.infra.link.SendGlobalRequest
	(*SendGlobalResponse)(nil),  // 1: svc.infra.link.SendGlobalResponse
	(*SendGroupRequest)(nil),    // 2: svc.infra.link.SendGroupRequest
	(*SendGroupResponse)(nil),   // 3: svc.infra.link.SendGroupResponse
	(*SendAccountRequest)(nil),  // 4: svc.infra.link.SendAccountRequest
	(*SendAccountResponse)(nil), // 5: svc.infra.link.SendAccountResponse
	(*SendDeviceRequest)(nil),   // 6: svc.infra.link.SendDeviceRequest
	(*SendDeviceResponse)(nil),  // 7: svc.infra.link.SendDeviceResponse
	(*SendSessionRequest)(nil),  // 8: svc.infra.link.SendSessionRequest
	(*SendSessionResponse)(nil), // 9: svc.infra.link.SendSessionResponse
	(PayloadType)(0),            // 10: svc.infra.link.PayloadType
	(PriorityType)(0),           // 11: svc.infra.link.PriorityType
}
var file_svc_infra_link_message_proto_depIdxs = []int32{
	10, // 0: svc.infra.link.SendGlobalRequest.type:type_name -> svc.infra.link.PayloadType
	11, // 1: svc.infra.link.SendGlobalRequest.priority:type_name -> svc.infra.link.PriorityType
	10, // 2: svc.infra.link.SendGroupRequest.type:type_name -> svc.infra.link.PayloadType
	11, // 3: svc.infra.link.SendGroupRequest.priority:type_name -> svc.infra.link.PriorityType
	10, // 4: svc.infra.link.SendAccountRequest.type:type_name -> svc.infra.link.PayloadType
	11, // 5: svc.infra.link.SendAccountRequest.priority:type_name -> svc.infra.link.PriorityType
	10, // 6: svc.infra.link.SendDeviceRequest.type:type_name -> svc.infra.link.PayloadType
	11, // 7: svc.infra.link.SendDeviceRequest.priority:type_name -> svc.infra.link.PriorityType
	10, // 8: svc.infra.link.SendSessionRequest.type:type_name -> svc.infra.link.PayloadType
	11, // 9: svc.infra.link.SendSessionRequest.priority:type_name -> svc.infra.link.PriorityType
	0,  // 10: svc.infra.link.LinkMessage.SendGlobal:input_type -> svc.infra.link.SendGlobalRequest
	2,  // 11: svc.infra.link.LinkMessage.SendGroup:input_type -> svc.infra.link.SendGroupRequest
	4,  // 12: svc.infra.link.LinkMessage.SendAccount:input_type -> svc.infra.link.SendAccountRequest
	6,  // 13: svc.infra.link.LinkMessage.SendDevice:input_type -> svc.infra.link.SendDeviceRequest
	8,  // 14: svc.infra.link.LinkMessage.SendSession:input_type -> svc.infra.link.SendSessionRequest
	1,  // 15: svc.infra.link.LinkMessage.SendGlobal:output_type -> svc.infra.link.SendGlobalResponse
	3,  // 16: svc.infra.link.LinkMessage.SendGroup:output_type -> svc.infra.link.SendGroupResponse
	5,  // 17: svc.infra.link.LinkMessage.SendAccount:output_type -> svc.infra.link.SendAccountResponse
	7,  // 18: svc.infra.link.LinkMessage.SendDevice:output_type -> svc.infra.link.SendDeviceResponse
	9,  // 19: svc.infra.link.LinkMessage.SendSession:output_type -> svc.infra.link.SendSessionResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_svc_infra_link_message_proto_init() }
func file_svc_infra_link_message_proto_init() {
	if File_svc_infra_link_message_proto != nil {
		return
	}
	file_svc_infra_link_payload_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_infra_link_message_proto_rawDesc), len(file_svc_infra_link_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_infra_link_message_proto_goTypes,
		DependencyIndexes: file_svc_infra_link_message_proto_depIdxs,
		MessageInfos:      file_svc_infra_link_message_proto_msgTypes,
	}.Build()
	File_svc_infra_link_message_proto = out.File
	file_svc_infra_link_message_proto_goTypes = nil
	file_svc_infra_link_message_proto_depIdxs = nil
}
