// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: svc.infra.link/gateway.proto

package link

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LinkGateway_List_FullMethodName   = "/svc.infra.center.LinkGateway/List"
	LinkGateway_Get_FullMethodName    = "/svc.infra.center.LinkGateway/Get"
	LinkGateway_Select_FullMethodName = "/svc.infra.center.LinkGateway/Select"
)

// LinkGatewayClient is the client API for LinkGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkGatewayClient interface {
	// 网关列表
	List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// 获取网关信息
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// 分配网关
	Select(ctx context.Context, in *SelectGatewayRequest, opts ...grpc.CallOption) (*SelectGatewayResponse, error)
}

type linkGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkGatewayClient(cc grpc.ClientConnInterface) LinkGatewayClient {
	return &linkGatewayClient{cc}
}

func (c *linkGatewayClient) List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := c.cc.Invoke(ctx, LinkGateway_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkGatewayClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := c.cc.Invoke(ctx, LinkGateway_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkGatewayClient) Select(ctx context.Context, in *SelectGatewayRequest, opts ...grpc.CallOption) (*SelectGatewayResponse, error) {
	out := new(SelectGatewayResponse)
	err := c.cc.Invoke(ctx, LinkGateway_Select_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkGatewayServer is the server API for LinkGateway service.
// All implementations must embed UnimplementedLinkGatewayServer
// for forward compatibility
type LinkGatewayServer interface {
	// 网关列表
	List(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// 获取网关信息
	Get(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// 分配网关
	Select(context.Context, *SelectGatewayRequest) (*SelectGatewayResponse, error)
	mustEmbedUnimplementedLinkGatewayServer()
}

// UnimplementedLinkGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedLinkGatewayServer struct {
}

func (UnimplementedLinkGatewayServer) List(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLinkGatewayServer) Get(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLinkGatewayServer) Select(context.Context, *SelectGatewayRequest) (*SelectGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedLinkGatewayServer) mustEmbedUnimplementedLinkGatewayServer() {}

// UnsafeLinkGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkGatewayServer will
// result in compilation errors.
type UnsafeLinkGatewayServer interface {
	mustEmbedUnimplementedLinkGatewayServer()
}

func RegisterLinkGatewayServer(s grpc.ServiceRegistrar, srv LinkGatewayServer) {
	s.RegisterService(&LinkGateway_ServiceDesc, srv)
}

func _LinkGateway_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGatewayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkGateway_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGatewayServer).List(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkGateway_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGatewayServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkGateway_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGatewayServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkGateway_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGatewayServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkGateway_Select_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGatewayServer).Select(ctx, req.(*SelectGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkGateway_ServiceDesc is the grpc.ServiceDesc for LinkGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.infra.center.LinkGateway",
	HandlerType: (*LinkGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _LinkGateway_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LinkGateway_Get_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _LinkGateway_Select_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.infra.link/gateway.proto",
}
