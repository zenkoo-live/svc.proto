// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: svc.biz.org/org.proto

package org

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Org_InitDB_FullMethodName                    = "/svc.biz.org.Org/InitDB"
	Org_GetDepartment_FullMethodName             = "/svc.biz.org.Org/GetDepartment"
	Org_ListDepartments_FullMethodName           = "/svc.biz.org.Org/ListDepartments"
	Org_FilterDepartments_FullMethodName         = "/svc.biz.org.Org/FilterDepartments"
	Org_AddDepartment_FullMethodName             = "/svc.biz.org.Org/AddDepartment"
	Org_UpdateDepartment_FullMethodName          = "/svc.biz.org.Org/UpdateDepartment"
	Org_DeleteDepartment_FullMethodName          = "/svc.biz.org.Org/DeleteDepartment"
	Org_TotalDepartments_FullMethodName          = "/svc.biz.org.Org/TotalDepartments"
	Org_DepartmentAdditionsSet_FullMethodName    = "/svc.biz.org.Org/DepartmentAdditionsSet"
	Org_DepartmentAdditionsGet_FullMethodName    = "/svc.biz.org.Org/DepartmentAdditionsGet"
	Org_DepartmentAdditionsDump_FullMethodName   = "/svc.biz.org.Org/DepartmentAdditionsDump"
	Org_DepartmentAdditionsFilter_FullMethodName = "/svc.biz.org.Org/DepartmentAdditionsFilter"
	Org_GetMerchant_FullMethodName               = "/svc.biz.org.Org/GetMerchant"
	Org_ListMerchants_FullMethodName             = "/svc.biz.org.Org/ListMerchants"
	Org_FilterMerchants_FullMethodName           = "/svc.biz.org.Org/FilterMerchants"
	Org_AddMerchant_FullMethodName               = "/svc.biz.org.Org/AddMerchant"
	Org_UpdateMerchant_FullMethodName            = "/svc.biz.org.Org/UpdateMerchant"
	Org_DeleteMerchant_FullMethodName            = "/svc.biz.org.Org/DeleteMerchant"
	Org_TotalMerchants_FullMethodName            = "/svc.biz.org.Org/TotalMerchants"
	Org_MerchantAdditionsSet_FullMethodName      = "/svc.biz.org.Org/MerchantAdditionsSet"
	Org_MerchantAdditionsGet_FullMethodName      = "/svc.biz.org.Org/MerchantAdditionsGet"
	Org_MerchantAdditionsDump_FullMethodName     = "/svc.biz.org.Org/MerchantAdditionsDump"
	Org_MerchantAdditionsFilter_FullMethodName   = "/svc.biz.org.Org/MerchantAdditionsFilter"
	Org_GetUnion_FullMethodName                  = "/svc.biz.org.Org/GetUnion"
	Org_ListUnions_FullMethodName                = "/svc.biz.org.Org/ListUnions"
	Org_FilterUnions_FullMethodName              = "/svc.biz.org.Org/FilterUnions"
	Org_AddUnion_FullMethodName                  = "/svc.biz.org.Org/AddUnion"
	Org_UpdateUnion_FullMethodName               = "/svc.biz.org.Org/UpdateUnion"
	Org_DeleteUnion_FullMethodName               = "/svc.biz.org.Org/DeleteUnion"
	Org_TotalUnions_FullMethodName               = "/svc.biz.org.Org/TotalUnions"
	Org_UnionAdditionsSet_FullMethodName         = "/svc.biz.org.Org/UnionAdditionsSet"
	Org_UnionAdditionsGet_FullMethodName         = "/svc.biz.org.Org/UnionAdditionsGet"
	Org_UnionAdditionsDump_FullMethodName        = "/svc.biz.org.Org/UnionAdditionsDump"
	Org_UnionAdditionsFilter_FullMethodName      = "/svc.biz.org.Org/UnionAdditionsFilter"
)

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgClient interface {
	InitDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitDBResp, error)
	GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*GetDepartmentResp, error)
	ListDepartments(ctx context.Context, in *ListDepartmentsReq, opts ...grpc.CallOption) (*ListDepartmentsResp, error)
	FilterDepartments(ctx context.Context, in *FilterDepartmentsReq, opts ...grpc.CallOption) (*FilterDepartmentsResp, error)
	AddDepartment(ctx context.Context, in *AddDepartmentReq, opts ...grpc.CallOption) (*AddDepartmentResp, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentResp, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentResp, error)
	TotalDepartments(ctx context.Context, in *TotalDepartmentsReq, opts ...grpc.CallOption) (*TotalDepartmentsResp, error)
	DepartmentAdditionsSet(ctx context.Context, in *DepartmentAdditionsSetReq, opts ...grpc.CallOption) (*DepartmentAdditionsSetResp, error)
	DepartmentAdditionsGet(ctx context.Context, in *DepartmentAdditionsGetReq, opts ...grpc.CallOption) (*DepartmentAdditionsGetResp, error)
	DepartmentAdditionsDump(ctx context.Context, in *DepartmentAdditionsDumpReq, opts ...grpc.CallOption) (*DepartmentAdditionsDumpResp, error)
	DepartmentAdditionsFilter(ctx context.Context, in *DepartmentAdditionsFilterReq, opts ...grpc.CallOption) (*DepartmentAdditionsFilterResp, error)
	GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*GetMerchantResp, error)
	ListMerchants(ctx context.Context, in *ListMerchantsReq, opts ...grpc.CallOption) (*ListMerchantsResp, error)
	FilterMerchants(ctx context.Context, in *FilterMerchantsReq, opts ...grpc.CallOption) (*FilterMerchantsResp, error)
	AddMerchant(ctx context.Context, in *AddMerchantReq, opts ...grpc.CallOption) (*AddMerchantResp, error)
	UpdateMerchant(ctx context.Context, in *UpdateMerchantReq, opts ...grpc.CallOption) (*UpdateMerchantResp, error)
	DeleteMerchant(ctx context.Context, in *DeleteMerchantReq, opts ...grpc.CallOption) (*DeleteMerchantResp, error)
	TotalMerchants(ctx context.Context, in *TotalMerchantsReq, opts ...grpc.CallOption) (*TotalMerchantsResp, error)
	MerchantAdditionsSet(ctx context.Context, in *MerchantAdditionsSetReq, opts ...grpc.CallOption) (*MerchantAdditionsSetResp, error)
	MerchantAdditionsGet(ctx context.Context, in *MerchantAdditionsGetReq, opts ...grpc.CallOption) (*MerchantAdditionsGetResp, error)
	MerchantAdditionsDump(ctx context.Context, in *MerchantAdditionsDumpReq, opts ...grpc.CallOption) (*MerchantAdditionsDumpResp, error)
	MerchantAdditionsFilter(ctx context.Context, in *MerchantAdditionsFilterReq, opts ...grpc.CallOption) (*MerchantAdditionsFilterResp, error)
	GetUnion(ctx context.Context, in *GetUnionReq, opts ...grpc.CallOption) (*GetUnionResp, error)
	ListUnions(ctx context.Context, in *ListUnionsReq, opts ...grpc.CallOption) (*ListUnionsResp, error)
	FilterUnions(ctx context.Context, in *FilterUnionsReq, opts ...grpc.CallOption) (*FilterUnionsResp, error)
	AddUnion(ctx context.Context, in *AddUnionReq, opts ...grpc.CallOption) (*AddUnionResp, error)
	UpdateUnion(ctx context.Context, in *UpdateUnionReq, opts ...grpc.CallOption) (*UpdateUnionResp, error)
	DeleteUnion(ctx context.Context, in *DeleteUnionReq, opts ...grpc.CallOption) (*DeleteUnionResp, error)
	TotalUnions(ctx context.Context, in *TotalUnionsReq, opts ...grpc.CallOption) (*TotalUnionsResp, error)
	UnionAdditionsSet(ctx context.Context, in *UnionAdditionsSetReq, opts ...grpc.CallOption) (*UnionAdditionsSetResp, error)
	UnionAdditionsGet(ctx context.Context, in *UnionAdditionsGetReq, opts ...grpc.CallOption) (*UnionAdditionsGetResp, error)
	UnionAdditionsDump(ctx context.Context, in *UnionAdditionsDumpReq, opts ...grpc.CallOption) (*UnionAdditionsDumpResp, error)
	UnionAdditionsFilter(ctx context.Context, in *UnionAdditionsFilterReq, opts ...grpc.CallOption) (*UnionAdditionsFilterResp, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) InitDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitDBResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitDBResp)
	err := c.cc.Invoke(ctx, Org_InitDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*GetDepartmentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentResp)
	err := c.cc.Invoke(ctx, Org_GetDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListDepartments(ctx context.Context, in *ListDepartmentsReq, opts ...grpc.CallOption) (*ListDepartmentsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentsResp)
	err := c.cc.Invoke(ctx, Org_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) FilterDepartments(ctx context.Context, in *FilterDepartmentsReq, opts ...grpc.CallOption) (*FilterDepartmentsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterDepartmentsResp)
	err := c.cc.Invoke(ctx, Org_FilterDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddDepartment(ctx context.Context, in *AddDepartmentReq, opts ...grpc.CallOption) (*AddDepartmentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDepartmentResp)
	err := c.cc.Invoke(ctx, Org_AddDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDepartmentResp)
	err := c.cc.Invoke(ctx, Org_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDepartmentResp)
	err := c.cc.Invoke(ctx, Org_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) TotalDepartments(ctx context.Context, in *TotalDepartmentsReq, opts ...grpc.CallOption) (*TotalDepartmentsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalDepartmentsResp)
	err := c.cc.Invoke(ctx, Org_TotalDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DepartmentAdditionsSet(ctx context.Context, in *DepartmentAdditionsSetReq, opts ...grpc.CallOption) (*DepartmentAdditionsSetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentAdditionsSetResp)
	err := c.cc.Invoke(ctx, Org_DepartmentAdditionsSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DepartmentAdditionsGet(ctx context.Context, in *DepartmentAdditionsGetReq, opts ...grpc.CallOption) (*DepartmentAdditionsGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentAdditionsGetResp)
	err := c.cc.Invoke(ctx, Org_DepartmentAdditionsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DepartmentAdditionsDump(ctx context.Context, in *DepartmentAdditionsDumpReq, opts ...grpc.CallOption) (*DepartmentAdditionsDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentAdditionsDumpResp)
	err := c.cc.Invoke(ctx, Org_DepartmentAdditionsDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DepartmentAdditionsFilter(ctx context.Context, in *DepartmentAdditionsFilterReq, opts ...grpc.CallOption) (*DepartmentAdditionsFilterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentAdditionsFilterResp)
	err := c.cc.Invoke(ctx, Org_DepartmentAdditionsFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*GetMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantResp)
	err := c.cc.Invoke(ctx, Org_GetMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListMerchants(ctx context.Context, in *ListMerchantsReq, opts ...grpc.CallOption) (*ListMerchantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMerchantsResp)
	err := c.cc.Invoke(ctx, Org_ListMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) FilterMerchants(ctx context.Context, in *FilterMerchantsReq, opts ...grpc.CallOption) (*FilterMerchantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterMerchantsResp)
	err := c.cc.Invoke(ctx, Org_FilterMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddMerchant(ctx context.Context, in *AddMerchantReq, opts ...grpc.CallOption) (*AddMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMerchantResp)
	err := c.cc.Invoke(ctx, Org_AddMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateMerchant(ctx context.Context, in *UpdateMerchantReq, opts ...grpc.CallOption) (*UpdateMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMerchantResp)
	err := c.cc.Invoke(ctx, Org_UpdateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteMerchant(ctx context.Context, in *DeleteMerchantReq, opts ...grpc.CallOption) (*DeleteMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMerchantResp)
	err := c.cc.Invoke(ctx, Org_DeleteMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) TotalMerchants(ctx context.Context, in *TotalMerchantsReq, opts ...grpc.CallOption) (*TotalMerchantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalMerchantsResp)
	err := c.cc.Invoke(ctx, Org_TotalMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) MerchantAdditionsSet(ctx context.Context, in *MerchantAdditionsSetReq, opts ...grpc.CallOption) (*MerchantAdditionsSetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAdditionsSetResp)
	err := c.cc.Invoke(ctx, Org_MerchantAdditionsSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) MerchantAdditionsGet(ctx context.Context, in *MerchantAdditionsGetReq, opts ...grpc.CallOption) (*MerchantAdditionsGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAdditionsGetResp)
	err := c.cc.Invoke(ctx, Org_MerchantAdditionsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) MerchantAdditionsDump(ctx context.Context, in *MerchantAdditionsDumpReq, opts ...grpc.CallOption) (*MerchantAdditionsDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAdditionsDumpResp)
	err := c.cc.Invoke(ctx, Org_MerchantAdditionsDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) MerchantAdditionsFilter(ctx context.Context, in *MerchantAdditionsFilterReq, opts ...grpc.CallOption) (*MerchantAdditionsFilterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAdditionsFilterResp)
	err := c.cc.Invoke(ctx, Org_MerchantAdditionsFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUnion(ctx context.Context, in *GetUnionReq, opts ...grpc.CallOption) (*GetUnionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnionResp)
	err := c.cc.Invoke(ctx, Org_GetUnion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListUnions(ctx context.Context, in *ListUnionsReq, opts ...grpc.CallOption) (*ListUnionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnionsResp)
	err := c.cc.Invoke(ctx, Org_ListUnions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) FilterUnions(ctx context.Context, in *FilterUnionsReq, opts ...grpc.CallOption) (*FilterUnionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterUnionsResp)
	err := c.cc.Invoke(ctx, Org_FilterUnions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddUnion(ctx context.Context, in *AddUnionReq, opts ...grpc.CallOption) (*AddUnionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUnionResp)
	err := c.cc.Invoke(ctx, Org_AddUnion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUnion(ctx context.Context, in *UpdateUnionReq, opts ...grpc.CallOption) (*UpdateUnionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUnionResp)
	err := c.cc.Invoke(ctx, Org_UpdateUnion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteUnion(ctx context.Context, in *DeleteUnionReq, opts ...grpc.CallOption) (*DeleteUnionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUnionResp)
	err := c.cc.Invoke(ctx, Org_DeleteUnion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) TotalUnions(ctx context.Context, in *TotalUnionsReq, opts ...grpc.CallOption) (*TotalUnionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalUnionsResp)
	err := c.cc.Invoke(ctx, Org_TotalUnions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnionAdditionsSet(ctx context.Context, in *UnionAdditionsSetReq, opts ...grpc.CallOption) (*UnionAdditionsSetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnionAdditionsSetResp)
	err := c.cc.Invoke(ctx, Org_UnionAdditionsSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnionAdditionsGet(ctx context.Context, in *UnionAdditionsGetReq, opts ...grpc.CallOption) (*UnionAdditionsGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnionAdditionsGetResp)
	err := c.cc.Invoke(ctx, Org_UnionAdditionsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnionAdditionsDump(ctx context.Context, in *UnionAdditionsDumpReq, opts ...grpc.CallOption) (*UnionAdditionsDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnionAdditionsDumpResp)
	err := c.cc.Invoke(ctx, Org_UnionAdditionsDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnionAdditionsFilter(ctx context.Context, in *UnionAdditionsFilterReq, opts ...grpc.CallOption) (*UnionAdditionsFilterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnionAdditionsFilterResp)
	err := c.cc.Invoke(ctx, Org_UnionAdditionsFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility
type OrgServer interface {
	InitDB(context.Context, *emptypb.Empty) (*InitDBResp, error)
	GetDepartment(context.Context, *GetDepartmentReq) (*GetDepartmentResp, error)
	ListDepartments(context.Context, *ListDepartmentsReq) (*ListDepartmentsResp, error)
	FilterDepartments(context.Context, *FilterDepartmentsReq) (*FilterDepartmentsResp, error)
	AddDepartment(context.Context, *AddDepartmentReq) (*AddDepartmentResp, error)
	UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentResp, error)
	DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentResp, error)
	TotalDepartments(context.Context, *TotalDepartmentsReq) (*TotalDepartmentsResp, error)
	DepartmentAdditionsSet(context.Context, *DepartmentAdditionsSetReq) (*DepartmentAdditionsSetResp, error)
	DepartmentAdditionsGet(context.Context, *DepartmentAdditionsGetReq) (*DepartmentAdditionsGetResp, error)
	DepartmentAdditionsDump(context.Context, *DepartmentAdditionsDumpReq) (*DepartmentAdditionsDumpResp, error)
	DepartmentAdditionsFilter(context.Context, *DepartmentAdditionsFilterReq) (*DepartmentAdditionsFilterResp, error)
	GetMerchant(context.Context, *GetMerchantReq) (*GetMerchantResp, error)
	ListMerchants(context.Context, *ListMerchantsReq) (*ListMerchantsResp, error)
	FilterMerchants(context.Context, *FilterMerchantsReq) (*FilterMerchantsResp, error)
	AddMerchant(context.Context, *AddMerchantReq) (*AddMerchantResp, error)
	UpdateMerchant(context.Context, *UpdateMerchantReq) (*UpdateMerchantResp, error)
	DeleteMerchant(context.Context, *DeleteMerchantReq) (*DeleteMerchantResp, error)
	TotalMerchants(context.Context, *TotalMerchantsReq) (*TotalMerchantsResp, error)
	MerchantAdditionsSet(context.Context, *MerchantAdditionsSetReq) (*MerchantAdditionsSetResp, error)
	MerchantAdditionsGet(context.Context, *MerchantAdditionsGetReq) (*MerchantAdditionsGetResp, error)
	MerchantAdditionsDump(context.Context, *MerchantAdditionsDumpReq) (*MerchantAdditionsDumpResp, error)
	MerchantAdditionsFilter(context.Context, *MerchantAdditionsFilterReq) (*MerchantAdditionsFilterResp, error)
	GetUnion(context.Context, *GetUnionReq) (*GetUnionResp, error)
	ListUnions(context.Context, *ListUnionsReq) (*ListUnionsResp, error)
	FilterUnions(context.Context, *FilterUnionsReq) (*FilterUnionsResp, error)
	AddUnion(context.Context, *AddUnionReq) (*AddUnionResp, error)
	UpdateUnion(context.Context, *UpdateUnionReq) (*UpdateUnionResp, error)
	DeleteUnion(context.Context, *DeleteUnionReq) (*DeleteUnionResp, error)
	TotalUnions(context.Context, *TotalUnionsReq) (*TotalUnionsResp, error)
	UnionAdditionsSet(context.Context, *UnionAdditionsSetReq) (*UnionAdditionsSetResp, error)
	UnionAdditionsGet(context.Context, *UnionAdditionsGetReq) (*UnionAdditionsGetResp, error)
	UnionAdditionsDump(context.Context, *UnionAdditionsDumpReq) (*UnionAdditionsDumpResp, error)
	UnionAdditionsFilter(context.Context, *UnionAdditionsFilterReq) (*UnionAdditionsFilterResp, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServer struct {
}

func (UnimplementedOrgServer) InitDB(context.Context, *emptypb.Empty) (*InitDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDB not implemented")
}
func (UnimplementedOrgServer) GetDepartment(context.Context, *GetDepartmentReq) (*GetDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedOrgServer) ListDepartments(context.Context, *ListDepartmentsReq) (*ListDepartmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedOrgServer) FilterDepartments(context.Context, *FilterDepartmentsReq) (*FilterDepartmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterDepartments not implemented")
}
func (UnimplementedOrgServer) AddDepartment(context.Context, *AddDepartmentReq) (*AddDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDepartment not implemented")
}
func (UnimplementedOrgServer) UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedOrgServer) DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedOrgServer) TotalDepartments(context.Context, *TotalDepartmentsReq) (*TotalDepartmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalDepartments not implemented")
}
func (UnimplementedOrgServer) DepartmentAdditionsSet(context.Context, *DepartmentAdditionsSetReq) (*DepartmentAdditionsSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentAdditionsSet not implemented")
}
func (UnimplementedOrgServer) DepartmentAdditionsGet(context.Context, *DepartmentAdditionsGetReq) (*DepartmentAdditionsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentAdditionsGet not implemented")
}
func (UnimplementedOrgServer) DepartmentAdditionsDump(context.Context, *DepartmentAdditionsDumpReq) (*DepartmentAdditionsDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentAdditionsDump not implemented")
}
func (UnimplementedOrgServer) DepartmentAdditionsFilter(context.Context, *DepartmentAdditionsFilterReq) (*DepartmentAdditionsFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentAdditionsFilter not implemented")
}
func (UnimplementedOrgServer) GetMerchant(context.Context, *GetMerchantReq) (*GetMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedOrgServer) ListMerchants(context.Context, *ListMerchantsReq) (*ListMerchantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchants not implemented")
}
func (UnimplementedOrgServer) FilterMerchants(context.Context, *FilterMerchantsReq) (*FilterMerchantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterMerchants not implemented")
}
func (UnimplementedOrgServer) AddMerchant(context.Context, *AddMerchantReq) (*AddMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMerchant not implemented")
}
func (UnimplementedOrgServer) UpdateMerchant(context.Context, *UpdateMerchantReq) (*UpdateMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedOrgServer) DeleteMerchant(context.Context, *DeleteMerchantReq) (*DeleteMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchant not implemented")
}
func (UnimplementedOrgServer) TotalMerchants(context.Context, *TotalMerchantsReq) (*TotalMerchantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMerchants not implemented")
}
func (UnimplementedOrgServer) MerchantAdditionsSet(context.Context, *MerchantAdditionsSetReq) (*MerchantAdditionsSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantAdditionsSet not implemented")
}
func (UnimplementedOrgServer) MerchantAdditionsGet(context.Context, *MerchantAdditionsGetReq) (*MerchantAdditionsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantAdditionsGet not implemented")
}
func (UnimplementedOrgServer) MerchantAdditionsDump(context.Context, *MerchantAdditionsDumpReq) (*MerchantAdditionsDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantAdditionsDump not implemented")
}
func (UnimplementedOrgServer) MerchantAdditionsFilter(context.Context, *MerchantAdditionsFilterReq) (*MerchantAdditionsFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantAdditionsFilter not implemented")
}
func (UnimplementedOrgServer) GetUnion(context.Context, *GetUnionReq) (*GetUnionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnion not implemented")
}
func (UnimplementedOrgServer) ListUnions(context.Context, *ListUnionsReq) (*ListUnionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnions not implemented")
}
func (UnimplementedOrgServer) FilterUnions(context.Context, *FilterUnionsReq) (*FilterUnionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUnions not implemented")
}
func (UnimplementedOrgServer) AddUnion(context.Context, *AddUnionReq) (*AddUnionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUnion not implemented")
}
func (UnimplementedOrgServer) UpdateUnion(context.Context, *UpdateUnionReq) (*UpdateUnionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnion not implemented")
}
func (UnimplementedOrgServer) DeleteUnion(context.Context, *DeleteUnionReq) (*DeleteUnionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnion not implemented")
}
func (UnimplementedOrgServer) TotalUnions(context.Context, *TotalUnionsReq) (*TotalUnionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUnions not implemented")
}
func (UnimplementedOrgServer) UnionAdditionsSet(context.Context, *UnionAdditionsSetReq) (*UnionAdditionsSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionAdditionsSet not implemented")
}
func (UnimplementedOrgServer) UnionAdditionsGet(context.Context, *UnionAdditionsGetReq) (*UnionAdditionsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionAdditionsGet not implemented")
}
func (UnimplementedOrgServer) UnionAdditionsDump(context.Context, *UnionAdditionsDumpReq) (*UnionAdditionsDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionAdditionsDump not implemented")
}
func (UnimplementedOrgServer) UnionAdditionsFilter(context.Context, *UnionAdditionsFilterReq) (*UnionAdditionsFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionAdditionsFilter not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_InitDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).InitDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_InitDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).InitDB(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDepartment(ctx, req.(*GetDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListDepartments(ctx, req.(*ListDepartmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_FilterDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDepartmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).FilterDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_FilterDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).FilterDepartments(ctx, req.(*FilterDepartmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddDepartment(ctx, req.(*AddDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDepartment(ctx, req.(*UpdateDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteDepartment(ctx, req.(*DeleteDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_TotalDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalDepartmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).TotalDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_TotalDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).TotalDepartments(ctx, req.(*TotalDepartmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DepartmentAdditionsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentAdditionsSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DepartmentAdditionsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DepartmentAdditionsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DepartmentAdditionsSet(ctx, req.(*DepartmentAdditionsSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DepartmentAdditionsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentAdditionsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DepartmentAdditionsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DepartmentAdditionsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DepartmentAdditionsGet(ctx, req.(*DepartmentAdditionsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DepartmentAdditionsDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentAdditionsDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DepartmentAdditionsDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DepartmentAdditionsDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DepartmentAdditionsDump(ctx, req.(*DepartmentAdditionsDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DepartmentAdditionsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentAdditionsFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DepartmentAdditionsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DepartmentAdditionsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DepartmentAdditionsFilter(ctx, req.(*DepartmentAdditionsFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMerchant(ctx, req.(*GetMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListMerchants(ctx, req.(*ListMerchantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_FilterMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterMerchantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).FilterMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_FilterMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).FilterMerchants(ctx, req.(*FilterMerchantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddMerchant(ctx, req.(*AddMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateMerchant(ctx, req.(*UpdateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteMerchant(ctx, req.(*DeleteMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_TotalMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMerchantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).TotalMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_TotalMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).TotalMerchants(ctx, req.(*TotalMerchantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_MerchantAdditionsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAdditionsSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).MerchantAdditionsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_MerchantAdditionsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).MerchantAdditionsSet(ctx, req.(*MerchantAdditionsSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_MerchantAdditionsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAdditionsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).MerchantAdditionsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_MerchantAdditionsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).MerchantAdditionsGet(ctx, req.(*MerchantAdditionsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_MerchantAdditionsDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAdditionsDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).MerchantAdditionsDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_MerchantAdditionsDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).MerchantAdditionsDump(ctx, req.(*MerchantAdditionsDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_MerchantAdditionsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAdditionsFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).MerchantAdditionsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_MerchantAdditionsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).MerchantAdditionsFilter(ctx, req.(*MerchantAdditionsFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUnion(ctx, req.(*GetUnionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListUnions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListUnions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListUnions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListUnions(ctx, req.(*ListUnionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_FilterUnions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUnionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).FilterUnions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_FilterUnions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).FilterUnions(ctx, req.(*FilterUnionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUnionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddUnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddUnion(ctx, req.(*AddUnionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUnion(ctx, req.(*UpdateUnionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteUnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteUnion(ctx, req.(*DeleteUnionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_TotalUnions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalUnionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).TotalUnions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_TotalUnions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).TotalUnions(ctx, req.(*TotalUnionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnionAdditionsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnionAdditionsSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnionAdditionsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnionAdditionsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnionAdditionsSet(ctx, req.(*UnionAdditionsSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnionAdditionsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnionAdditionsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnionAdditionsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnionAdditionsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnionAdditionsGet(ctx, req.(*UnionAdditionsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnionAdditionsDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnionAdditionsDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnionAdditionsDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnionAdditionsDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnionAdditionsDump(ctx, req.(*UnionAdditionsDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnionAdditionsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnionAdditionsFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnionAdditionsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnionAdditionsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnionAdditionsFilter(ctx, req.(*UnionAdditionsFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.org.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDB",
			Handler:    _Org_InitDB_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _Org_GetDepartment_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _Org_ListDepartments_Handler,
		},
		{
			MethodName: "FilterDepartments",
			Handler:    _Org_FilterDepartments_Handler,
		},
		{
			MethodName: "AddDepartment",
			Handler:    _Org_AddDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Org_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Org_DeleteDepartment_Handler,
		},
		{
			MethodName: "TotalDepartments",
			Handler:    _Org_TotalDepartments_Handler,
		},
		{
			MethodName: "DepartmentAdditionsSet",
			Handler:    _Org_DepartmentAdditionsSet_Handler,
		},
		{
			MethodName: "DepartmentAdditionsGet",
			Handler:    _Org_DepartmentAdditionsGet_Handler,
		},
		{
			MethodName: "DepartmentAdditionsDump",
			Handler:    _Org_DepartmentAdditionsDump_Handler,
		},
		{
			MethodName: "DepartmentAdditionsFilter",
			Handler:    _Org_DepartmentAdditionsFilter_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _Org_GetMerchant_Handler,
		},
		{
			MethodName: "ListMerchants",
			Handler:    _Org_ListMerchants_Handler,
		},
		{
			MethodName: "FilterMerchants",
			Handler:    _Org_FilterMerchants_Handler,
		},
		{
			MethodName: "AddMerchant",
			Handler:    _Org_AddMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _Org_UpdateMerchant_Handler,
		},
		{
			MethodName: "DeleteMerchant",
			Handler:    _Org_DeleteMerchant_Handler,
		},
		{
			MethodName: "TotalMerchants",
			Handler:    _Org_TotalMerchants_Handler,
		},
		{
			MethodName: "MerchantAdditionsSet",
			Handler:    _Org_MerchantAdditionsSet_Handler,
		},
		{
			MethodName: "MerchantAdditionsGet",
			Handler:    _Org_MerchantAdditionsGet_Handler,
		},
		{
			MethodName: "MerchantAdditionsDump",
			Handler:    _Org_MerchantAdditionsDump_Handler,
		},
		{
			MethodName: "MerchantAdditionsFilter",
			Handler:    _Org_MerchantAdditionsFilter_Handler,
		},
		{
			MethodName: "GetUnion",
			Handler:    _Org_GetUnion_Handler,
		},
		{
			MethodName: "ListUnions",
			Handler:    _Org_ListUnions_Handler,
		},
		{
			MethodName: "FilterUnions",
			Handler:    _Org_FilterUnions_Handler,
		},
		{
			MethodName: "AddUnion",
			Handler:    _Org_AddUnion_Handler,
		},
		{
			MethodName: "UpdateUnion",
			Handler:    _Org_UpdateUnion_Handler,
		},
		{
			MethodName: "DeleteUnion",
			Handler:    _Org_DeleteUnion_Handler,
		},
		{
			MethodName: "TotalUnions",
			Handler:    _Org_TotalUnions_Handler,
		},
		{
			MethodName: "UnionAdditionsSet",
			Handler:    _Org_UnionAdditionsSet_Handler,
		},
		{
			MethodName: "UnionAdditionsGet",
			Handler:    _Org_UnionAdditionsGet_Handler,
		},
		{
			MethodName: "UnionAdditionsDump",
			Handler:    _Org_UnionAdditionsDump_Handler,
		},
		{
			MethodName: "UnionAdditionsFilter",
			Handler:    _Org_UnionAdditionsFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.org/org.proto",
}
