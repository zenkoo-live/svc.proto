// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.asset/asset.proto

package asset

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Asset service

func NewAssetEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Asset service

type AssetService interface {
	// 余额 money
	GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...client.CallOption) (*GetUserMoneyResp, error)
	GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...client.CallOption) (*GetUserMoneyMultiResp, error)
	IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...client.CallOption) (*IncrUserMoneyResp, error)
	DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...client.CallOption) (*DecrUserMoneyResp, error)
	ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...client.CallOption) (*ListUserMoneyDetailResp, error)
	// 虚拟币coin
	GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...client.CallOption) (*GetUserCoinResp, error)
	GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...client.CallOption) (*GetUserCoinMultiResp, error)
	IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...client.CallOption) (*IncrUserCoinResp, error)
	DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...client.CallOption) (*DecrUserCoinResp, error)
	ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...client.CallOption) (*ListUserCoinDetailResp, error)
	// 虚拟币coin
	GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, opts ...client.CallOption) (*GetAnchorCoinResp, error)
	GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, opts ...client.CallOption) (*GetAnchorCoinMultiResp, error)
	IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, opts ...client.CallOption) (*IncrAnchorCoinResp, error)
	DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, opts ...client.CallOption) (*DecrAnchorCoinResp, error)
	ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, opts ...client.CallOption) (*ListAnchorCoinDetailResp, error)
	// 虚拟币coin
	GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...client.CallOption) (*GetUnionCoinResp, error)
	GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...client.CallOption) (*GetUnionCoinMultiResp, error)
	IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...client.CallOption) (*IncrUnionCoinResp, error)
	DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...client.CallOption) (*DecrUnionCoinResp, error)
	ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...client.CallOption) (*ListUnionCoinDetailResp, error)
	// 余额 money
	GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, opts ...client.CallOption) (*GetMerchantMoneyResp, error)
	GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, opts ...client.CallOption) (*GetMerchantMoneyMultiResp, error)
	IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, opts ...client.CallOption) (*IncrMerchantMoneyResp, error)
	DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, opts ...client.CallOption) (*DecrMerchantMoneyResp, error)
	ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, opts ...client.CallOption) (*ListMerchantMoneyDetailResp, error)
	// 虚拟币coin
	GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...client.CallOption) (*GetMerchantCoinResp, error)
	GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...client.CallOption) (*GetMerchantCoinMultiResp, error)
	IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...client.CallOption) (*IncrMerchantCoinResp, error)
	DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...client.CallOption) (*DecrMerchantCoinResp, error)
	ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...client.CallOption) (*ListMerchantCoinDetailResp, error)
}

type assetService struct {
	c    client.Client
	name string
}

func NewAssetService(name string, c client.Client) AssetService {
	return &assetService{
		c:    c,
		name: name,
	}
}

func (c *assetService) GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...client.CallOption) (*GetUserMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUserMoney", in)
	out := new(GetUserMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...client.CallOption) (*GetUserMoneyMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUserMoneyMulti", in)
	out := new(GetUserMoneyMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...client.CallOption) (*IncrUserMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrUserMoney", in)
	out := new(IncrUserMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...client.CallOption) (*DecrUserMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrUserMoney", in)
	out := new(DecrUserMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...client.CallOption) (*ListUserMoneyDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListUserMoneyDetail", in)
	out := new(ListUserMoneyDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...client.CallOption) (*GetUserCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUserCoin", in)
	out := new(GetUserCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...client.CallOption) (*GetUserCoinMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUserCoinMulti", in)
	out := new(GetUserCoinMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...client.CallOption) (*IncrUserCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrUserCoin", in)
	out := new(IncrUserCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...client.CallOption) (*DecrUserCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrUserCoin", in)
	out := new(DecrUserCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...client.CallOption) (*ListUserCoinDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListUserCoinDetail", in)
	out := new(ListUserCoinDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, opts ...client.CallOption) (*GetAnchorCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetAnchorCoin", in)
	out := new(GetAnchorCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, opts ...client.CallOption) (*GetAnchorCoinMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetAnchorCoinMulti", in)
	out := new(GetAnchorCoinMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, opts ...client.CallOption) (*IncrAnchorCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrAnchorCoin", in)
	out := new(IncrAnchorCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, opts ...client.CallOption) (*DecrAnchorCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrAnchorCoin", in)
	out := new(DecrAnchorCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, opts ...client.CallOption) (*ListAnchorCoinDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListAnchorCoinDetail", in)
	out := new(ListAnchorCoinDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...client.CallOption) (*GetUnionCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUnionCoin", in)
	out := new(GetUnionCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...client.CallOption) (*GetUnionCoinMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetUnionCoinMulti", in)
	out := new(GetUnionCoinMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...client.CallOption) (*IncrUnionCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrUnionCoin", in)
	out := new(IncrUnionCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...client.CallOption) (*DecrUnionCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrUnionCoin", in)
	out := new(DecrUnionCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...client.CallOption) (*ListUnionCoinDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListUnionCoinDetail", in)
	out := new(ListUnionCoinDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, opts ...client.CallOption) (*GetMerchantMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetMerchantMoney", in)
	out := new(GetMerchantMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, opts ...client.CallOption) (*GetMerchantMoneyMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetMerchantMoneyMulti", in)
	out := new(GetMerchantMoneyMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, opts ...client.CallOption) (*IncrMerchantMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrMerchantMoney", in)
	out := new(IncrMerchantMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, opts ...client.CallOption) (*DecrMerchantMoneyResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrMerchantMoney", in)
	out := new(DecrMerchantMoneyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, opts ...client.CallOption) (*ListMerchantMoneyDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListMerchantMoneyDetail", in)
	out := new(ListMerchantMoneyDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...client.CallOption) (*GetMerchantCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetMerchantCoin", in)
	out := new(GetMerchantCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...client.CallOption) (*GetMerchantCoinMultiResp, error) {
	req := c.c.NewRequest(c.name, "Asset.GetMerchantCoinMulti", in)
	out := new(GetMerchantCoinMultiResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...client.CallOption) (*IncrMerchantCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.IncrMerchantCoin", in)
	out := new(IncrMerchantCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...client.CallOption) (*DecrMerchantCoinResp, error) {
	req := c.c.NewRequest(c.name, "Asset.DecrMerchantCoin", in)
	out := new(DecrMerchantCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetService) ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...client.CallOption) (*ListMerchantCoinDetailResp, error) {
	req := c.c.NewRequest(c.name, "Asset.ListMerchantCoinDetail", in)
	out := new(ListMerchantCoinDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Asset service

type AssetHandler interface {
	// 余额 money
	GetUserMoney(context.Context, *GetUserMoneyReq, *GetUserMoneyResp) error
	GetUserMoneyMulti(context.Context, *GetUserMoneyMultiReq, *GetUserMoneyMultiResp) error
	IncrUserMoney(context.Context, *IncrUserMoneyReq, *IncrUserMoneyResp) error
	DecrUserMoney(context.Context, *DecrUserMoneyReq, *DecrUserMoneyResp) error
	ListUserMoneyDetail(context.Context, *ListUserMoneyDetailReq, *ListUserMoneyDetailResp) error
	// 虚拟币coin
	GetUserCoin(context.Context, *GetUserCoinReq, *GetUserCoinResp) error
	GetUserCoinMulti(context.Context, *GetUserCoinMultiReq, *GetUserCoinMultiResp) error
	IncrUserCoin(context.Context, *IncrUserCoinReq, *IncrUserCoinResp) error
	DecrUserCoin(context.Context, *DecrUserCoinReq, *DecrUserCoinResp) error
	ListUserCoinDetail(context.Context, *ListUserCoinDetailReq, *ListUserCoinDetailResp) error
	// 虚拟币coin
	GetAnchorCoin(context.Context, *GetAnchorCoinReq, *GetAnchorCoinResp) error
	GetAnchorCoinMulti(context.Context, *GetAnchorCoinMultiReq, *GetAnchorCoinMultiResp) error
	IncrAnchorCoin(context.Context, *IncrAnchorCoinReq, *IncrAnchorCoinResp) error
	DecrAnchorCoin(context.Context, *DecrAnchorCoinReq, *DecrAnchorCoinResp) error
	ListAnchorCoinDetail(context.Context, *ListAnchorCoinDetailReq, *ListAnchorCoinDetailResp) error
	// 虚拟币coin
	GetUnionCoin(context.Context, *GetUnionCoinReq, *GetUnionCoinResp) error
	GetUnionCoinMulti(context.Context, *GetUnionCoinMultiReq, *GetUnionCoinMultiResp) error
	IncrUnionCoin(context.Context, *IncrUnionCoinReq, *IncrUnionCoinResp) error
	DecrUnionCoin(context.Context, *DecrUnionCoinReq, *DecrUnionCoinResp) error
	ListUnionCoinDetail(context.Context, *ListUnionCoinDetailReq, *ListUnionCoinDetailResp) error
	// 余额 money
	GetMerchantMoney(context.Context, *GetMerchantMoneyReq, *GetMerchantMoneyResp) error
	GetMerchantMoneyMulti(context.Context, *GetMerchantMoneyMultiReq, *GetMerchantMoneyMultiResp) error
	IncrMerchantMoney(context.Context, *IncrMerchantMoneyReq, *IncrMerchantMoneyResp) error
	DecrMerchantMoney(context.Context, *DecrMerchantMoneyReq, *DecrMerchantMoneyResp) error
	ListMerchantMoneyDetail(context.Context, *ListMerchantMoneyDetailReq, *ListMerchantMoneyDetailResp) error
	// 虚拟币coin
	GetMerchantCoin(context.Context, *GetMerchantCoinReq, *GetMerchantCoinResp) error
	GetMerchantCoinMulti(context.Context, *GetMerchantCoinMultiReq, *GetMerchantCoinMultiResp) error
	IncrMerchantCoin(context.Context, *IncrMerchantCoinReq, *IncrMerchantCoinResp) error
	DecrMerchantCoin(context.Context, *DecrMerchantCoinReq, *DecrMerchantCoinResp) error
	ListMerchantCoinDetail(context.Context, *ListMerchantCoinDetailReq, *ListMerchantCoinDetailResp) error
}

func RegisterAssetHandler(s server.Server, hdlr AssetHandler, opts ...server.HandlerOption) error {
	type asset interface {
		GetUserMoney(ctx context.Context, in *GetUserMoneyReq, out *GetUserMoneyResp) error
		GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, out *GetUserMoneyMultiResp) error
		IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, out *IncrUserMoneyResp) error
		DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, out *DecrUserMoneyResp) error
		ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, out *ListUserMoneyDetailResp) error
		GetUserCoin(ctx context.Context, in *GetUserCoinReq, out *GetUserCoinResp) error
		GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, out *GetUserCoinMultiResp) error
		IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, out *IncrUserCoinResp) error
		DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, out *DecrUserCoinResp) error
		ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, out *ListUserCoinDetailResp) error
		GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, out *GetAnchorCoinResp) error
		GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, out *GetAnchorCoinMultiResp) error
		IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, out *IncrAnchorCoinResp) error
		DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, out *DecrAnchorCoinResp) error
		ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, out *ListAnchorCoinDetailResp) error
		GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, out *GetUnionCoinResp) error
		GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, out *GetUnionCoinMultiResp) error
		IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, out *IncrUnionCoinResp) error
		DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, out *DecrUnionCoinResp) error
		ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, out *ListUnionCoinDetailResp) error
		GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, out *GetMerchantMoneyResp) error
		GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, out *GetMerchantMoneyMultiResp) error
		IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, out *IncrMerchantMoneyResp) error
		DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, out *DecrMerchantMoneyResp) error
		ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, out *ListMerchantMoneyDetailResp) error
		GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, out *GetMerchantCoinResp) error
		GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, out *GetMerchantCoinMultiResp) error
		IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, out *IncrMerchantCoinResp) error
		DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, out *DecrMerchantCoinResp) error
		ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, out *ListMerchantCoinDetailResp) error
	}
	type Asset struct {
		asset
	}
	h := &assetHandler{hdlr}
	return s.Handle(s.NewHandler(&Asset{h}, opts...))
}

type assetHandler struct {
	AssetHandler
}

func (h *assetHandler) GetUserMoney(ctx context.Context, in *GetUserMoneyReq, out *GetUserMoneyResp) error {
	return h.AssetHandler.GetUserMoney(ctx, in, out)
}

func (h *assetHandler) GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, out *GetUserMoneyMultiResp) error {
	return h.AssetHandler.GetUserMoneyMulti(ctx, in, out)
}

func (h *assetHandler) IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, out *IncrUserMoneyResp) error {
	return h.AssetHandler.IncrUserMoney(ctx, in, out)
}

func (h *assetHandler) DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, out *DecrUserMoneyResp) error {
	return h.AssetHandler.DecrUserMoney(ctx, in, out)
}

func (h *assetHandler) ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, out *ListUserMoneyDetailResp) error {
	return h.AssetHandler.ListUserMoneyDetail(ctx, in, out)
}

func (h *assetHandler) GetUserCoin(ctx context.Context, in *GetUserCoinReq, out *GetUserCoinResp) error {
	return h.AssetHandler.GetUserCoin(ctx, in, out)
}

func (h *assetHandler) GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, out *GetUserCoinMultiResp) error {
	return h.AssetHandler.GetUserCoinMulti(ctx, in, out)
}

func (h *assetHandler) IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, out *IncrUserCoinResp) error {
	return h.AssetHandler.IncrUserCoin(ctx, in, out)
}

func (h *assetHandler) DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, out *DecrUserCoinResp) error {
	return h.AssetHandler.DecrUserCoin(ctx, in, out)
}

func (h *assetHandler) ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, out *ListUserCoinDetailResp) error {
	return h.AssetHandler.ListUserCoinDetail(ctx, in, out)
}

func (h *assetHandler) GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, out *GetAnchorCoinResp) error {
	return h.AssetHandler.GetAnchorCoin(ctx, in, out)
}

func (h *assetHandler) GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, out *GetAnchorCoinMultiResp) error {
	return h.AssetHandler.GetAnchorCoinMulti(ctx, in, out)
}

func (h *assetHandler) IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, out *IncrAnchorCoinResp) error {
	return h.AssetHandler.IncrAnchorCoin(ctx, in, out)
}

func (h *assetHandler) DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, out *DecrAnchorCoinResp) error {
	return h.AssetHandler.DecrAnchorCoin(ctx, in, out)
}

func (h *assetHandler) ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, out *ListAnchorCoinDetailResp) error {
	return h.AssetHandler.ListAnchorCoinDetail(ctx, in, out)
}

func (h *assetHandler) GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, out *GetUnionCoinResp) error {
	return h.AssetHandler.GetUnionCoin(ctx, in, out)
}

func (h *assetHandler) GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, out *GetUnionCoinMultiResp) error {
	return h.AssetHandler.GetUnionCoinMulti(ctx, in, out)
}

func (h *assetHandler) IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, out *IncrUnionCoinResp) error {
	return h.AssetHandler.IncrUnionCoin(ctx, in, out)
}

func (h *assetHandler) DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, out *DecrUnionCoinResp) error {
	return h.AssetHandler.DecrUnionCoin(ctx, in, out)
}

func (h *assetHandler) ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, out *ListUnionCoinDetailResp) error {
	return h.AssetHandler.ListUnionCoinDetail(ctx, in, out)
}

func (h *assetHandler) GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, out *GetMerchantMoneyResp) error {
	return h.AssetHandler.GetMerchantMoney(ctx, in, out)
}

func (h *assetHandler) GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, out *GetMerchantMoneyMultiResp) error {
	return h.AssetHandler.GetMerchantMoneyMulti(ctx, in, out)
}

func (h *assetHandler) IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, out *IncrMerchantMoneyResp) error {
	return h.AssetHandler.IncrMerchantMoney(ctx, in, out)
}

func (h *assetHandler) DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, out *DecrMerchantMoneyResp) error {
	return h.AssetHandler.DecrMerchantMoney(ctx, in, out)
}

func (h *assetHandler) ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, out *ListMerchantMoneyDetailResp) error {
	return h.AssetHandler.ListMerchantMoneyDetail(ctx, in, out)
}

func (h *assetHandler) GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, out *GetMerchantCoinResp) error {
	return h.AssetHandler.GetMerchantCoin(ctx, in, out)
}

func (h *assetHandler) GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, out *GetMerchantCoinMultiResp) error {
	return h.AssetHandler.GetMerchantCoinMulti(ctx, in, out)
}

func (h *assetHandler) IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, out *IncrMerchantCoinResp) error {
	return h.AssetHandler.IncrMerchantCoin(ctx, in, out)
}

func (h *assetHandler) DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, out *DecrMerchantCoinResp) error {
	return h.AssetHandler.DecrMerchantCoin(ctx, in, out)
}

func (h *assetHandler) ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, out *ListMerchantCoinDetailResp) error {
	return h.AssetHandler.ListMerchantCoinDetail(ctx, in, out)
}
