// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: svc.biz.asset/asset.proto

package asset

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore int64 `protobuf:"varint,2,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter  int64 `protobuf:"varint,3,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
}

func (x *ValueChange) Reset() {
	*x = ValueChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueChange) ProtoMessage() {}

func (x *ValueChange) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueChange.ProtoReflect.Descriptor instead.
func (*ValueChange) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{0}
}

func (x *ValueChange) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueChange) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *ValueChange) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

// 余额 money-----------------
type GetUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid        string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetUserMoneyReq) Reset() {
	*x = GetUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyReq) ProtoMessage() {}

func (x *GetUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyReq.ProtoReflect.Descriptor instead.
func (*GetUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserMoneyReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GetUserMoneyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetUserMoneyResp) Reset() {
	*x = GetUserMoneyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyResp) ProtoMessage() {}

func (x *GetUserMoneyResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyResp.ProtoReflect.Descriptor instead.
func (*GetUserMoneyResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserMoneyResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetUserMoneyMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string   `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uids       []string `protobuf:"bytes,3,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *GetUserMoneyMultiReq) Reset() {
	*x = GetUserMoneyMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyMultiReq) ProtoMessage() {}

func (x *GetUserMoneyMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyMultiReq.ProtoReflect.Descriptor instead.
func (*GetUserMoneyMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserMoneyMultiReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetUserMoneyMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type GetUserMoneyMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string           `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ValueMap   map[string]int64 `protobuf:"bytes,3,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // uid->value
}

func (x *GetUserMoneyMultiResp) Reset() {
	*x = GetUserMoneyMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyMultiResp) ProtoMessage() {}

func (x *GetUserMoneyMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyMultiResp.ProtoReflect.Descriptor instead.
func (*GetUserMoneyMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserMoneyMultiResp) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetUserMoneyMultiResp) GetValueMap() map[string]int64 {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid        string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Value      int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType  int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId    string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *IncrUserMoneyReq) Reset() {
	*x = IncrUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserMoneyReq) ProtoMessage() {}

func (x *IncrUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserMoneyReq.ProtoReflect.Descriptor instead.
func (*IncrUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{5}
}

func (x *IncrUserMoneyReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *IncrUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserMoneyReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrUserMoneyReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUserMoneyReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserMoneyReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *IncrUserMoneyReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid        string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Value      int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType  int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId    string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *DecrUserMoneyReq) Reset() {
	*x = DecrUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserMoneyReq) ProtoMessage() {}

func (x *DecrUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserMoneyReq.ProtoReflect.Descriptor instead.
func (*DecrUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{6}
}

func (x *DecrUserMoneyReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DecrUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserMoneyReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUserMoneyReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUserMoneyReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserMoneyReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DecrUserMoneyReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ChangeUserMoneyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId   string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid          string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	NewValue     int64                  `protobuf:"varint,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,6,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *ChangeUserMoneyResp) Reset() {
	*x = ChangeUserMoneyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUserMoneyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserMoneyResp) ProtoMessage() {}

func (x *ChangeUserMoneyResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserMoneyResp.ProtoReflect.Descriptor instead.
func (*ChangeUserMoneyResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeUserMoneyResp) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeUserMoneyResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChangeUserMoneyResp) GetNewValue() int64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

func (x *ChangeUserMoneyResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChangeUserMoneyResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *ChangeUserMoneyResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ChangeUserMoneyResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUserMoneyDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId     string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid            string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	TransDirection int64                  `protobuf:"varint,4,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,5,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUserMoneyDetailReq) Reset() {
	*x = ListUserMoneyDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMoneyDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMoneyDetailReq) ProtoMessage() {}

func (x *ListUserMoneyDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMoneyDetailReq.ProtoReflect.Descriptor instead.
func (*ListUserMoneyDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserMoneyDetailReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListUserMoneyDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListUserMoneyDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUserMoneyDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserMoneyDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUserMoneyDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UserMoneyDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUserMoneyDetailResp) Reset() {
	*x = ListUserMoneyDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMoneyDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMoneyDetailResp) ProtoMessage() {}

func (x *ListUserMoneyDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMoneyDetailResp.ProtoReflect.Descriptor instead.
func (*ListUserMoneyDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{9}
}

func (x *ListUserMoneyDetailResp) GetItems() []*UserMoneyDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUserMoneyDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserMoneyDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserMoneyDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserMoneyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId     string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Uid            string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	DetailId       string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`                    // 明细id
	TradeId        string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                       // 业务方交易id
	SerialNumber   int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection int64                  `protobuf:"varint,7,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType      int64                  `protobuf:"varint,8,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	ValueChange    *ValueChange           `protobuf:"bytes,9,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`           // 交易类别
	TransTime      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`                // 业务时间
	Summary        string                 `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`                                     //摘要,json 实际会做格式和核心字段校验
}

func (x *UserMoneyDetail) Reset() {
	*x = UserMoneyDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMoneyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMoneyDetail) ProtoMessage() {}

func (x *UserMoneyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMoneyDetail.ProtoReflect.Descriptor instead.
func (*UserMoneyDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{10}
}

func (x *UserMoneyDetail) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *UserMoneyDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserMoneyDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UserMoneyDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UserMoneyDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UserMoneyDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UserMoneyDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UserMoneyDetail) GetValueChange() *ValueChange {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

func (x *UserMoneyDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UserMoneyDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type UserCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *UserCoinValue) Reset() {
	*x = UserCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinValue) ProtoMessage() {}

func (x *UserCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinValue.ProtoReflect.Descriptor instead.
func (*UserCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{11}
}

func (x *UserCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetUserCoinReq) Reset() {
	*x = GetUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinReq) ProtoMessage() {}

func (x *GetUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinReq.ProtoReflect.Descriptor instead.
func (*GetUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GetUserCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UserCoinValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // 余额
}

func (x *GetUserCoinResp) Reset() {
	*x = GetUserCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinResp) ProtoMessage() {}

func (x *GetUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinResp.ProtoReflect.Descriptor instead.
func (*GetUserCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserCoinResp) GetValue() *UserCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetUserCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []string `protobuf:"bytes,3,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *GetUserCoinMultiReq) Reset() {
	*x = GetUserCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinMultiReq) ProtoMessage() {}

func (x *GetUserCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetUserCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserCoinMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type GetUserCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*UserCoinValue `protobuf:"bytes,3,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uid->value
}

func (x *GetUserCoinMultiResp) Reset() {
	*x = GetUserCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinMultiResp) ProtoMessage() {}

func (x *GetUserCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetUserCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserCoinMultiResp) GetValueMap() map[string]*UserCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Value     *UserCoinValue         `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *IncrUserCoinReq) Reset() {
	*x = IncrUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserCoinReq) ProtoMessage() {}

func (x *IncrUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserCoinReq.ProtoReflect.Descriptor instead.
func (*IncrUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{16}
}

func (x *IncrUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserCoinReq) GetValue() *UserCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IncrUserCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUserCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *IncrUserCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Value     int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Rule      int64                  `protobuf:"varint,5,opt,name=rule,proto3" json:"rule,omitempty"`                            // 扣减规则: 0 仅普通余额 1 仅低权限余额 2 先扣普通后扣低权限 3 先扣低权限后扣普通
	TransType int64                  `protobuf:"varint,6,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *DecrUserCoinReq) Reset() {
	*x = DecrUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserCoinReq) ProtoMessage() {}

func (x *DecrUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserCoinReq.ProtoReflect.Descriptor instead.
func (*DecrUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{17}
}

func (x *DecrUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUserCoinReq) GetRule() int64 {
	if x != nil {
		return x.Rule
	}
	return 0
}

func (x *DecrUserCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUserCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DecrUserCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ChangeUserCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	NewValue     *UserCoinValue         `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,6,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *ChangeUserCoinResp) Reset() {
	*x = ChangeUserCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserCoinResp) ProtoMessage() {}

func (x *ChangeUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserCoinResp.ProtoReflect.Descriptor instead.
func (*ChangeUserCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{18}
}

func (x *ChangeUserCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChangeUserCoinResp) GetNewValue() *UserCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *ChangeUserCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChangeUserCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *ChangeUserCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ChangeUserCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUserCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	TransDirection int64                  `protobuf:"varint,4,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,5,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUserCoinDetailReq) Reset() {
	*x = ListUserCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCoinDetailReq) ProtoMessage() {}

func (x *ListUserCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListUserCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{19}
}

func (x *ListUserCoinDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListUserCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUserCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUserCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UserCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64             `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUserCoinDetailResp) Reset() {
	*x = ListUserCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCoinDetailResp) ProtoMessage() {}

func (x *ListUserCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListUserCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{20}
}

func (x *ListUserCoinDetailResp) GetItems() []*UserCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUserCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	DetailId           string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`                    // 明细id
	TradeId            string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                       // 业务方交易id
	SerialNumber       int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,7,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,8,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	ValueChange        *ValueChange           `protobuf:"bytes,9,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`
	LimitedValueChange *ValueChange           `protobuf:"bytes,10,opt,name=limited_value_change,json=limitedValueChange,proto3" json:"limited_value_change,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,12,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *UserCoinDetail) Reset() {
	*x = UserCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinDetail) ProtoMessage() {}

func (x *UserCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinDetail.ProtoReflect.Descriptor instead.
func (*UserCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{21}
}

func (x *UserCoinDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UserCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UserCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UserCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UserCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UserCoinDetail) GetValueChange() *ValueChange {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

func (x *UserCoinDetail) GetLimitedValueChange() *ValueChange {
	if x != nil {
		return x.LimitedValueChange
	}
	return nil
}

func (x *UserCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UserCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type StreamerCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *StreamerCoinValue) Reset() {
	*x = StreamerCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamerCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamerCoinValue) ProtoMessage() {}

func (x *StreamerCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamerCoinValue.ProtoReflect.Descriptor instead.
func (*StreamerCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{22}
}

func (x *StreamerCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StreamerCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetStreamerCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
}

func (x *GetStreamerCoinReq) Reset() {
	*x = GetStreamerCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamerCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamerCoinReq) ProtoMessage() {}

func (x *GetStreamerCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamerCoinReq.ProtoReflect.Descriptor instead.
func (*GetStreamerCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{23}
}

func (x *GetStreamerCoinReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type GetStreamerCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *StreamerCoinValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // 余额
}

func (x *GetStreamerCoinResp) Reset() {
	*x = GetStreamerCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamerCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamerCoinResp) ProtoMessage() {}

func (x *GetStreamerCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamerCoinResp.ProtoReflect.Descriptor instead.
func (*GetStreamerCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{24}
}

func (x *GetStreamerCoinResp) GetValue() *StreamerCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetStreamerCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerIds []string `protobuf:"bytes,3,rep,name=streamer_ids,json=streamerIds,proto3" json:"streamer_ids,omitempty"`
}

func (x *GetStreamerCoinMultiReq) Reset() {
	*x = GetStreamerCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamerCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamerCoinMultiReq) ProtoMessage() {}

func (x *GetStreamerCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamerCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetStreamerCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{25}
}

func (x *GetStreamerCoinMultiReq) GetStreamerIds() []string {
	if x != nil {
		return x.StreamerIds
	}
	return nil
}

type GetStreamerCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*StreamerCoinValue `protobuf:"bytes,3,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // streamer_id->value
}

func (x *GetStreamerCoinMultiResp) Reset() {
	*x = GetStreamerCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamerCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamerCoinMultiResp) ProtoMessage() {}

func (x *GetStreamerCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamerCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetStreamerCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{26}
}

func (x *GetStreamerCoinMultiResp) GetValueMap() map[string]*StreamerCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrStreamerCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	Value      *StreamerCoinValue     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType  int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId    string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *IncrStreamerCoinReq) Reset() {
	*x = IncrStreamerCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrStreamerCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrStreamerCoinReq) ProtoMessage() {}

func (x *IncrStreamerCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrStreamerCoinReq.ProtoReflect.Descriptor instead.
func (*IncrStreamerCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{27}
}

func (x *IncrStreamerCoinReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *IncrStreamerCoinReq) GetValue() *StreamerCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IncrStreamerCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrStreamerCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrStreamerCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *IncrStreamerCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrStreamerCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	Value      int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Rule       int64                  `protobuf:"varint,5,opt,name=rule,proto3" json:"rule,omitempty"`                            // 扣减规则: 0 仅普通余额 1 仅低权限余额
	TransType  int64                  `protobuf:"varint,6,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId    string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *DecrStreamerCoinReq) Reset() {
	*x = DecrStreamerCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrStreamerCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrStreamerCoinReq) ProtoMessage() {}

func (x *DecrStreamerCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrStreamerCoinReq.ProtoReflect.Descriptor instead.
func (*DecrStreamerCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{28}
}

func (x *DecrStreamerCoinReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *DecrStreamerCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrStreamerCoinReq) GetRule() int64 {
	if x != nil {
		return x.Rule
	}
	return 0
}

func (x *DecrStreamerCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrStreamerCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrStreamerCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DecrStreamerCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ChangeStreamerCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId   string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	NewValue     *StreamerCoinValue     `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,6,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *ChangeStreamerCoinResp) Reset() {
	*x = ChangeStreamerCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStreamerCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStreamerCoinResp) ProtoMessage() {}

func (x *ChangeStreamerCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStreamerCoinResp.ProtoReflect.Descriptor instead.
func (*ChangeStreamerCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{29}
}

func (x *ChangeStreamerCoinResp) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *ChangeStreamerCoinResp) GetNewValue() *StreamerCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *ChangeStreamerCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChangeStreamerCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *ChangeStreamerCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ChangeStreamerCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListStreamerCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId     string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,4,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,5,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListStreamerCoinDetailReq) Reset() {
	*x = ListStreamerCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamerCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamerCoinDetailReq) ProtoMessage() {}

func (x *ListStreamerCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamerCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListStreamerCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{30}
}

func (x *ListStreamerCoinDetailReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *ListStreamerCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListStreamerCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListStreamerCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListStreamerCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListStreamerCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListStreamerCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListStreamerCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*StreamerCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListStreamerCoinDetailResp) Reset() {
	*x = ListStreamerCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamerCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamerCoinDetailResp) ProtoMessage() {}

func (x *ListStreamerCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamerCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListStreamerCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{31}
}

func (x *ListStreamerCoinDetailResp) GetItems() []*StreamerCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListStreamerCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListStreamerCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStreamerCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StreamerCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId         string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`
	DetailId           string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`                    // 明细id
	TradeId            string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                       // 业务方交易id
	SerialNumber       int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,7,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,8,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	ValueChange        *ValueChange           `protobuf:"bytes,9,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`
	LimitedValueChange *ValueChange           `protobuf:"bytes,10,opt,name=limited_value_change,json=limitedValueChange,proto3" json:"limited_value_change,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,12,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *StreamerCoinDetail) Reset() {
	*x = StreamerCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamerCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamerCoinDetail) ProtoMessage() {}

func (x *StreamerCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamerCoinDetail.ProtoReflect.Descriptor instead.
func (*StreamerCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{32}
}

func (x *StreamerCoinDetail) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *StreamerCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *StreamerCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *StreamerCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *StreamerCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *StreamerCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *StreamerCoinDetail) GetValueChange() *ValueChange {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

func (x *StreamerCoinDetail) GetLimitedValueChange() *ValueChange {
	if x != nil {
		return x.LimitedValueChange
	}
	return nil
}

func (x *StreamerCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *StreamerCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type UnionCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *UnionCoinValue) Reset() {
	*x = UnionCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionCoinValue) ProtoMessage() {}

func (x *UnionCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionCoinValue.ProtoReflect.Descriptor instead.
func (*UnionCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{33}
}

func (x *UnionCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnionCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId string `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
}

func (x *GetUnionCoinReq) Reset() {
	*x = GetUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinReq) ProtoMessage() {}

func (x *GetUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinReq.ProtoReflect.Descriptor instead.
func (*GetUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{34}
}

func (x *GetUnionCoinReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type GetUnionCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UnionCoinValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // 余额
}

func (x *GetUnionCoinResp) Reset() {
	*x = GetUnionCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinResp) ProtoMessage() {}

func (x *GetUnionCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinResp.ProtoReflect.Descriptor instead.
func (*GetUnionCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{35}
}

func (x *GetUnionCoinResp) GetValue() *UnionCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetUnionCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionIds []string `protobuf:"bytes,3,rep,name=union_ids,json=unionIds,proto3" json:"union_ids,omitempty"`
}

func (x *GetUnionCoinMultiReq) Reset() {
	*x = GetUnionCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinMultiReq) ProtoMessage() {}

func (x *GetUnionCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetUnionCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{36}
}

func (x *GetUnionCoinMultiReq) GetUnionIds() []string {
	if x != nil {
		return x.UnionIds
	}
	return nil
}

type GetUnionCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*UnionCoinValue `protobuf:"bytes,3,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // union_id->value
}

func (x *GetUnionCoinMultiResp) Reset() {
	*x = GetUnionCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinMultiResp) ProtoMessage() {}

func (x *GetUnionCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetUnionCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{37}
}

func (x *GetUnionCoinMultiResp) GetValueMap() map[string]*UnionCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId   string                 `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	Value     *UnionCoinValue        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *IncrUnionCoinReq) Reset() {
	*x = IncrUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUnionCoinReq) ProtoMessage() {}

func (x *IncrUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUnionCoinReq.ProtoReflect.Descriptor instead.
func (*IncrUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{38}
}

func (x *IncrUnionCoinReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *IncrUnionCoinReq) GetValue() *UnionCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IncrUnionCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUnionCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUnionCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *IncrUnionCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId   string                 `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	Value     int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Rule      int64                  `protobuf:"varint,5,opt,name=rule,proto3" json:"rule,omitempty"`                            // 扣减规则: 0 仅普通余额 1 仅低权限余额
	TransType int64                  `protobuf:"varint,6,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *DecrUnionCoinReq) Reset() {
	*x = DecrUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUnionCoinReq) ProtoMessage() {}

func (x *DecrUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUnionCoinReq.ProtoReflect.Descriptor instead.
func (*DecrUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{39}
}

func (x *DecrUnionCoinReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *DecrUnionCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUnionCoinReq) GetRule() int64 {
	if x != nil {
		return x.Rule
	}
	return 0
}

func (x *DecrUnionCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUnionCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUnionCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DecrUnionCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ChangeUnionCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId      string                 `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	NewValue     *UnionCoinValue        `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,6,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *ChangeUnionCoinResp) Reset() {
	*x = ChangeUnionCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUnionCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUnionCoinResp) ProtoMessage() {}

func (x *ChangeUnionCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUnionCoinResp.ProtoReflect.Descriptor instead.
func (*ChangeUnionCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{40}
}

func (x *ChangeUnionCoinResp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *ChangeUnionCoinResp) GetNewValue() *UnionCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *ChangeUnionCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChangeUnionCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *ChangeUnionCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ChangeUnionCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUnionCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId        string                 `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,4,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,5,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUnionCoinDetailReq) Reset() {
	*x = ListUnionCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionCoinDetailReq) ProtoMessage() {}

func (x *ListUnionCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListUnionCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{41}
}

func (x *ListUnionCoinDetailReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *ListUnionCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUnionCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUnionCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUnionCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UnionCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUnionCoinDetailResp) Reset() {
	*x = ListUnionCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionCoinDetailResp) ProtoMessage() {}

func (x *ListUnionCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListUnionCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{42}
}

func (x *ListUnionCoinDetailResp) GetItems() []*UnionCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUnionCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUnionCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUnionCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UnionCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId            string                 `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	DetailId           string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`                    // 明细id
	TradeId            string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                       // 业务方交易id
	SerialNumber       int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,7,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,8,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	ValueChange        *ValueChange           `protobuf:"bytes,9,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`
	LimitedValueChange *ValueChange           `protobuf:"bytes,10,opt,name=limited_value_change,json=limitedValueChange,proto3" json:"limited_value_change,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,12,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *UnionCoinDetail) Reset() {
	*x = UnionCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionCoinDetail) ProtoMessage() {}

func (x *UnionCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionCoinDetail.ProtoReflect.Descriptor instead.
func (*UnionCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{43}
}

func (x *UnionCoinDetail) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *UnionCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UnionCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UnionCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UnionCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UnionCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UnionCoinDetail) GetValueChange() *ValueChange {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

func (x *UnionCoinDetail) GetLimitedValueChange() *ValueChange {
	if x != nil {
		return x.LimitedValueChange
	}
	return nil
}

func (x *UnionCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UnionCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type MerchantCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *MerchantCoinValue) Reset() {
	*x = MerchantCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCoinValue) ProtoMessage() {}

func (x *MerchantCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCoinValue.ProtoReflect.Descriptor instead.
func (*MerchantCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{44}
}

func (x *MerchantCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MerchantCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
}

func (x *GetMerchantCoinReq) Reset() {
	*x = GetMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinReq) ProtoMessage() {}

func (x *GetMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{45}
}

func (x *GetMerchantCoinReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type GetMerchantCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *MerchantCoinValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // 余额
}

func (x *GetMerchantCoinResp) Reset() {
	*x = GetMerchantCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinResp) ProtoMessage() {}

func (x *GetMerchantCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinResp.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{46}
}

func (x *GetMerchantCoinResp) GetValue() *MerchantCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetMerchantCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantIds []string `protobuf:"bytes,1,rep,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
}

func (x *GetMerchantCoinMultiReq) Reset() {
	*x = GetMerchantCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinMultiReq) ProtoMessage() {}

func (x *GetMerchantCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{47}
}

func (x *GetMerchantCoinMultiReq) GetMerchantIds() []string {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

type GetMerchantCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*MerchantCoinValue `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // merchant_id->value
}

func (x *GetMerchantCoinMultiResp) Reset() {
	*x = GetMerchantCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinMultiResp) ProtoMessage() {}

func (x *GetMerchantCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{48}
}

func (x *GetMerchantCoinMultiResp) GetValueMap() map[string]*MerchantCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Value      *MerchantCoinValue     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransType  int64                  `protobuf:"varint,5,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId    string                 `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *IncrMerchantCoinReq) Reset() {
	*x = IncrMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrMerchantCoinReq) ProtoMessage() {}

func (x *IncrMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*IncrMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{49}
}

func (x *IncrMerchantCoinReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetValue() *MerchantCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IncrMerchantCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrMerchantCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Value      int64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Rule       int64                  `protobuf:"varint,5,opt,name=rule,proto3" json:"rule,omitempty"`                            // 扣减规则: 0 仅普通余额 1 仅低权限余额
	TransType  int64                  `protobuf:"varint,6,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId    string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary    string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`  // 业务时间
}

func (x *DecrMerchantCoinReq) Reset() {
	*x = DecrMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrMerchantCoinReq) ProtoMessage() {}

func (x *DecrMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*DecrMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{50}
}

func (x *DecrMerchantCoinReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrMerchantCoinReq) GetRule() int64 {
	if x != nil {
		return x.Rule
	}
	return 0
}

func (x *DecrMerchantCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrMerchantCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ChangeMerchantCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId   string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	NewValue     *MerchantCoinValue     `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,6,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *ChangeMerchantCoinResp) Reset() {
	*x = ChangeMerchantCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantCoinResp) ProtoMessage() {}

func (x *ChangeMerchantCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantCoinResp.ProtoReflect.Descriptor instead.
func (*ChangeMerchantCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{51}
}

func (x *ChangeMerchantCoinResp) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeMerchantCoinResp) GetNewValue() *MerchantCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *ChangeMerchantCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChangeMerchantCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *ChangeMerchantCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ChangeMerchantCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListMerchantCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId     string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,4,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,5,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListMerchantCoinDetailReq) Reset() {
	*x = ListMerchantCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantCoinDetailReq) ProtoMessage() {}

func (x *ListMerchantCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListMerchantCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{52}
}

func (x *ListMerchantCoinDetailReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListMerchantCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListMerchantCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMerchantCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMerchantCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*MerchantCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListMerchantCoinDetailResp) Reset() {
	*x = ListMerchantCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantCoinDetailResp) ProtoMessage() {}

func (x *ListMerchantCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListMerchantCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{53}
}

func (x *ListMerchantCoinDetailResp) GetItems() []*MerchantCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMerchantCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMerchantCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMerchantCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MerchantCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId         string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	DetailId           string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`                    // 明细id
	TradeId            string                 `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                       // 业务方交易id
	SerialNumber       int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,7,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,8,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	ValueChange        *ValueChange           `protobuf:"bytes,9,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`
	LimitedValueChange *ValueChange           `protobuf:"bytes,10,opt,name=limited_value_change,json=limitedValueChange,proto3" json:"limited_value_change,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,12,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *MerchantCoinDetail) Reset() {
	*x = MerchantCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCoinDetail) ProtoMessage() {}

func (x *MerchantCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCoinDetail.ProtoReflect.Descriptor instead.
func (*MerchantCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{54}
}

func (x *MerchantCoinDetail) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *MerchantCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *MerchantCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *MerchantCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *MerchantCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *MerchantCoinDetail) GetValueChange() *ValueChange {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

func (x *MerchantCoinDetail) GetLimitedValueChange() *ValueChange {
	if x != nil {
		return x.LimitedValueChange
	}
	return nil
}

func (x *MerchantCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *MerchantCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

var File_svc_biz_asset_asset_proto protoreflect.FileDescriptor

var file_svc_biz_asset_asset_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x69, 0x64, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a,
	0x3b, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a,
	0x10, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xfd, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x4a, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6,
	0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xa9, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x4e, 0x0a, 0x11,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0xcd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x1a, 0x5d, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbc,
	0x03, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x4b, 0x0a,
	0x0e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4f, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x1a, 0x5a, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01,
	0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x03, 0x0a, 0x0f,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x4e, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xbc, 0x03, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x32, 0xd3, 0x12, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65, 0x63,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x22, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0c, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x26, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x12, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_asset_asset_proto_rawDescOnce sync.Once
	file_svc_biz_asset_asset_proto_rawDescData = file_svc_biz_asset_asset_proto_rawDesc
)

func file_svc_biz_asset_asset_proto_rawDescGZIP() []byte {
	file_svc_biz_asset_asset_proto_rawDescOnce.Do(func() {
		file_svc_biz_asset_asset_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_asset_asset_proto_rawDescData)
	})
	return file_svc_biz_asset_asset_proto_rawDescData
}

var file_svc_biz_asset_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_svc_biz_asset_asset_proto_goTypes = []interface{}{
	(*ValueChange)(nil),                // 0: svc.biz.asset.ValueChange
	(*GetUserMoneyReq)(nil),            // 1: svc.biz.asset.GetUserMoneyReq
	(*GetUserMoneyResp)(nil),           // 2: svc.biz.asset.GetUserMoneyResp
	(*GetUserMoneyMultiReq)(nil),       // 3: svc.biz.asset.GetUserMoneyMultiReq
	(*GetUserMoneyMultiResp)(nil),      // 4: svc.biz.asset.GetUserMoneyMultiResp
	(*IncrUserMoneyReq)(nil),           // 5: svc.biz.asset.IncrUserMoneyReq
	(*DecrUserMoneyReq)(nil),           // 6: svc.biz.asset.DecrUserMoneyReq
	(*ChangeUserMoneyResp)(nil),        // 7: svc.biz.asset.ChangeUserMoneyResp
	(*ListUserMoneyDetailReq)(nil),     // 8: svc.biz.asset.ListUserMoneyDetailReq
	(*ListUserMoneyDetailResp)(nil),    // 9: svc.biz.asset.ListUserMoneyDetailResp
	(*UserMoneyDetail)(nil),            // 10: svc.biz.asset.UserMoneyDetail
	(*UserCoinValue)(nil),              // 11: svc.biz.asset.UserCoinValue
	(*GetUserCoinReq)(nil),             // 12: svc.biz.asset.GetUserCoinReq
	(*GetUserCoinResp)(nil),            // 13: svc.biz.asset.GetUserCoinResp
	(*GetUserCoinMultiReq)(nil),        // 14: svc.biz.asset.GetUserCoinMultiReq
	(*GetUserCoinMultiResp)(nil),       // 15: svc.biz.asset.GetUserCoinMultiResp
	(*IncrUserCoinReq)(nil),            // 16: svc.biz.asset.IncrUserCoinReq
	(*DecrUserCoinReq)(nil),            // 17: svc.biz.asset.DecrUserCoinReq
	(*ChangeUserCoinResp)(nil),         // 18: svc.biz.asset.ChangeUserCoinResp
	(*ListUserCoinDetailReq)(nil),      // 19: svc.biz.asset.ListUserCoinDetailReq
	(*ListUserCoinDetailResp)(nil),     // 20: svc.biz.asset.ListUserCoinDetailResp
	(*UserCoinDetail)(nil),             // 21: svc.biz.asset.UserCoinDetail
	(*StreamerCoinValue)(nil),          // 22: svc.biz.asset.StreamerCoinValue
	(*GetStreamerCoinReq)(nil),         // 23: svc.biz.asset.GetStreamerCoinReq
	(*GetStreamerCoinResp)(nil),        // 24: svc.biz.asset.GetStreamerCoinResp
	(*GetStreamerCoinMultiReq)(nil),    // 25: svc.biz.asset.GetStreamerCoinMultiReq
	(*GetStreamerCoinMultiResp)(nil),   // 26: svc.biz.asset.GetStreamerCoinMultiResp
	(*IncrStreamerCoinReq)(nil),        // 27: svc.biz.asset.IncrStreamerCoinReq
	(*DecrStreamerCoinReq)(nil),        // 28: svc.biz.asset.DecrStreamerCoinReq
	(*ChangeStreamerCoinResp)(nil),     // 29: svc.biz.asset.ChangeStreamerCoinResp
	(*ListStreamerCoinDetailReq)(nil),  // 30: svc.biz.asset.ListStreamerCoinDetailReq
	(*ListStreamerCoinDetailResp)(nil), // 31: svc.biz.asset.ListStreamerCoinDetailResp
	(*StreamerCoinDetail)(nil),         // 32: svc.biz.asset.StreamerCoinDetail
	(*UnionCoinValue)(nil),             // 33: svc.biz.asset.UnionCoinValue
	(*GetUnionCoinReq)(nil),            // 34: svc.biz.asset.GetUnionCoinReq
	(*GetUnionCoinResp)(nil),           // 35: svc.biz.asset.GetUnionCoinResp
	(*GetUnionCoinMultiReq)(nil),       // 36: svc.biz.asset.GetUnionCoinMultiReq
	(*GetUnionCoinMultiResp)(nil),      // 37: svc.biz.asset.GetUnionCoinMultiResp
	(*IncrUnionCoinReq)(nil),           // 38: svc.biz.asset.IncrUnionCoinReq
	(*DecrUnionCoinReq)(nil),           // 39: svc.biz.asset.DecrUnionCoinReq
	(*ChangeUnionCoinResp)(nil),        // 40: svc.biz.asset.ChangeUnionCoinResp
	(*ListUnionCoinDetailReq)(nil),     // 41: svc.biz.asset.ListUnionCoinDetailReq
	(*ListUnionCoinDetailResp)(nil),    // 42: svc.biz.asset.ListUnionCoinDetailResp
	(*UnionCoinDetail)(nil),            // 43: svc.biz.asset.UnionCoinDetail
	(*MerchantCoinValue)(nil),          // 44: svc.biz.asset.MerchantCoinValue
	(*GetMerchantCoinReq)(nil),         // 45: svc.biz.asset.GetMerchantCoinReq
	(*GetMerchantCoinResp)(nil),        // 46: svc.biz.asset.GetMerchantCoinResp
	(*GetMerchantCoinMultiReq)(nil),    // 47: svc.biz.asset.GetMerchantCoinMultiReq
	(*GetMerchantCoinMultiResp)(nil),   // 48: svc.biz.asset.GetMerchantCoinMultiResp
	(*IncrMerchantCoinReq)(nil),        // 49: svc.biz.asset.IncrMerchantCoinReq
	(*DecrMerchantCoinReq)(nil),        // 50: svc.biz.asset.DecrMerchantCoinReq
	(*ChangeMerchantCoinResp)(nil),     // 51: svc.biz.asset.ChangeMerchantCoinResp
	(*ListMerchantCoinDetailReq)(nil),  // 52: svc.biz.asset.ListMerchantCoinDetailReq
	(*ListMerchantCoinDetailResp)(nil), // 53: svc.biz.asset.ListMerchantCoinDetailResp
	(*MerchantCoinDetail)(nil),         // 54: svc.biz.asset.MerchantCoinDetail
	nil,                                // 55: svc.biz.asset.GetUserMoneyMultiResp.ValueMapEntry
	nil,                                // 56: svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry
	nil,                                // 57: svc.biz.asset.GetStreamerCoinMultiResp.ValueMapEntry
	nil,                                // 58: svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry
	nil,                                // 59: svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry
	(*timestamppb.Timestamp)(nil),      // 60: google.protobuf.Timestamp
}
var file_svc_biz_asset_asset_proto_depIdxs = []int32{
	55, // 0: svc.biz.asset.GetUserMoneyMultiResp.value_map:type_name -> svc.biz.asset.GetUserMoneyMultiResp.ValueMapEntry
	60, // 1: svc.biz.asset.IncrUserMoneyReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 2: svc.biz.asset.DecrUserMoneyReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 3: svc.biz.asset.ChangeUserMoneyResp.trans_time:type_name -> google.protobuf.Timestamp
	60, // 4: svc.biz.asset.ListUserMoneyDetailReq.start_time:type_name -> google.protobuf.Timestamp
	60, // 5: svc.biz.asset.ListUserMoneyDetailReq.end_time:type_name -> google.protobuf.Timestamp
	10, // 6: svc.biz.asset.ListUserMoneyDetailResp.items:type_name -> svc.biz.asset.UserMoneyDetail
	0,  // 7: svc.biz.asset.UserMoneyDetail.value_change:type_name -> svc.biz.asset.ValueChange
	60, // 8: svc.biz.asset.UserMoneyDetail.trans_time:type_name -> google.protobuf.Timestamp
	11, // 9: svc.biz.asset.GetUserCoinResp.value:type_name -> svc.biz.asset.UserCoinValue
	56, // 10: svc.biz.asset.GetUserCoinMultiResp.value_map:type_name -> svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry
	11, // 11: svc.biz.asset.IncrUserCoinReq.value:type_name -> svc.biz.asset.UserCoinValue
	60, // 12: svc.biz.asset.IncrUserCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 13: svc.biz.asset.DecrUserCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	11, // 14: svc.biz.asset.ChangeUserCoinResp.new_value:type_name -> svc.biz.asset.UserCoinValue
	60, // 15: svc.biz.asset.ChangeUserCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	60, // 16: svc.biz.asset.ListUserCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	60, // 17: svc.biz.asset.ListUserCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	21, // 18: svc.biz.asset.ListUserCoinDetailResp.items:type_name -> svc.biz.asset.UserCoinDetail
	0,  // 19: svc.biz.asset.UserCoinDetail.value_change:type_name -> svc.biz.asset.ValueChange
	0,  // 20: svc.biz.asset.UserCoinDetail.limited_value_change:type_name -> svc.biz.asset.ValueChange
	60, // 21: svc.biz.asset.UserCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	22, // 22: svc.biz.asset.GetStreamerCoinResp.value:type_name -> svc.biz.asset.StreamerCoinValue
	57, // 23: svc.biz.asset.GetStreamerCoinMultiResp.value_map:type_name -> svc.biz.asset.GetStreamerCoinMultiResp.ValueMapEntry
	22, // 24: svc.biz.asset.IncrStreamerCoinReq.value:type_name -> svc.biz.asset.StreamerCoinValue
	60, // 25: svc.biz.asset.IncrStreamerCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 26: svc.biz.asset.DecrStreamerCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	22, // 27: svc.biz.asset.ChangeStreamerCoinResp.new_value:type_name -> svc.biz.asset.StreamerCoinValue
	60, // 28: svc.biz.asset.ChangeStreamerCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	60, // 29: svc.biz.asset.ListStreamerCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	60, // 30: svc.biz.asset.ListStreamerCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	32, // 31: svc.biz.asset.ListStreamerCoinDetailResp.items:type_name -> svc.biz.asset.StreamerCoinDetail
	0,  // 32: svc.biz.asset.StreamerCoinDetail.value_change:type_name -> svc.biz.asset.ValueChange
	0,  // 33: svc.biz.asset.StreamerCoinDetail.limited_value_change:type_name -> svc.biz.asset.ValueChange
	60, // 34: svc.biz.asset.StreamerCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	33, // 35: svc.biz.asset.GetUnionCoinResp.value:type_name -> svc.biz.asset.UnionCoinValue
	58, // 36: svc.biz.asset.GetUnionCoinMultiResp.value_map:type_name -> svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry
	33, // 37: svc.biz.asset.IncrUnionCoinReq.value:type_name -> svc.biz.asset.UnionCoinValue
	60, // 38: svc.biz.asset.IncrUnionCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 39: svc.biz.asset.DecrUnionCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	33, // 40: svc.biz.asset.ChangeUnionCoinResp.new_value:type_name -> svc.biz.asset.UnionCoinValue
	60, // 41: svc.biz.asset.ChangeUnionCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	60, // 42: svc.biz.asset.ListUnionCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	60, // 43: svc.biz.asset.ListUnionCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	43, // 44: svc.biz.asset.ListUnionCoinDetailResp.items:type_name -> svc.biz.asset.UnionCoinDetail
	0,  // 45: svc.biz.asset.UnionCoinDetail.value_change:type_name -> svc.biz.asset.ValueChange
	0,  // 46: svc.biz.asset.UnionCoinDetail.limited_value_change:type_name -> svc.biz.asset.ValueChange
	60, // 47: svc.biz.asset.UnionCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	44, // 48: svc.biz.asset.GetMerchantCoinResp.value:type_name -> svc.biz.asset.MerchantCoinValue
	59, // 49: svc.biz.asset.GetMerchantCoinMultiResp.value_map:type_name -> svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry
	44, // 50: svc.biz.asset.IncrMerchantCoinReq.value:type_name -> svc.biz.asset.MerchantCoinValue
	60, // 51: svc.biz.asset.IncrMerchantCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	60, // 52: svc.biz.asset.DecrMerchantCoinReq.trans_time:type_name -> google.protobuf.Timestamp
	44, // 53: svc.biz.asset.ChangeMerchantCoinResp.new_value:type_name -> svc.biz.asset.MerchantCoinValue
	60, // 54: svc.biz.asset.ChangeMerchantCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	60, // 55: svc.biz.asset.ListMerchantCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	60, // 56: svc.biz.asset.ListMerchantCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	54, // 57: svc.biz.asset.ListMerchantCoinDetailResp.items:type_name -> svc.biz.asset.MerchantCoinDetail
	0,  // 58: svc.biz.asset.MerchantCoinDetail.value_change:type_name -> svc.biz.asset.ValueChange
	0,  // 59: svc.biz.asset.MerchantCoinDetail.limited_value_change:type_name -> svc.biz.asset.ValueChange
	60, // 60: svc.biz.asset.MerchantCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	11, // 61: svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.UserCoinValue
	22, // 62: svc.biz.asset.GetStreamerCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.StreamerCoinValue
	33, // 63: svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.UnionCoinValue
	44, // 64: svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.MerchantCoinValue
	1,  // 65: svc.biz.asset.Asset.GetUserMoney:input_type -> svc.biz.asset.GetUserMoneyReq
	3,  // 66: svc.biz.asset.Asset.GetUserMoneyMulti:input_type -> svc.biz.asset.GetUserMoneyMultiReq
	5,  // 67: svc.biz.asset.Asset.IncrUserMoney:input_type -> svc.biz.asset.IncrUserMoneyReq
	6,  // 68: svc.biz.asset.Asset.DecrUserMoney:input_type -> svc.biz.asset.DecrUserMoneyReq
	8,  // 69: svc.biz.asset.Asset.ListUserMoneyDetail:input_type -> svc.biz.asset.ListUserMoneyDetailReq
	12, // 70: svc.biz.asset.Asset.GetUserCoin:input_type -> svc.biz.asset.GetUserCoinReq
	14, // 71: svc.biz.asset.Asset.GetUserCoinMulti:input_type -> svc.biz.asset.GetUserCoinMultiReq
	16, // 72: svc.biz.asset.Asset.IncrUserCoin:input_type -> svc.biz.asset.IncrUserCoinReq
	17, // 73: svc.biz.asset.Asset.DecrUserCoin:input_type -> svc.biz.asset.DecrUserCoinReq
	19, // 74: svc.biz.asset.Asset.ListUserCoinDetail:input_type -> svc.biz.asset.ListUserCoinDetailReq
	23, // 75: svc.biz.asset.Asset.GetStreamerCoin:input_type -> svc.biz.asset.GetStreamerCoinReq
	25, // 76: svc.biz.asset.Asset.GetStreamerCoinMulti:input_type -> svc.biz.asset.GetStreamerCoinMultiReq
	27, // 77: svc.biz.asset.Asset.IncrStreamerCoin:input_type -> svc.biz.asset.IncrStreamerCoinReq
	28, // 78: svc.biz.asset.Asset.DecrStreamerCoin:input_type -> svc.biz.asset.DecrStreamerCoinReq
	30, // 79: svc.biz.asset.Asset.ListStreamerCoinDetail:input_type -> svc.biz.asset.ListStreamerCoinDetailReq
	34, // 80: svc.biz.asset.Asset.GetUnionCoin:input_type -> svc.biz.asset.GetUnionCoinReq
	36, // 81: svc.biz.asset.Asset.GetUnionCoinMulti:input_type -> svc.biz.asset.GetUnionCoinMultiReq
	38, // 82: svc.biz.asset.Asset.IncrUnionCoin:input_type -> svc.biz.asset.IncrUnionCoinReq
	39, // 83: svc.biz.asset.Asset.DecrUnionCoin:input_type -> svc.biz.asset.DecrUnionCoinReq
	41, // 84: svc.biz.asset.Asset.ListUnionCoinDetail:input_type -> svc.biz.asset.ListUnionCoinDetailReq
	45, // 85: svc.biz.asset.Asset.GetMerchantCoin:input_type -> svc.biz.asset.GetMerchantCoinReq
	47, // 86: svc.biz.asset.Asset.GetMerchantCoinMulti:input_type -> svc.biz.asset.GetMerchantCoinMultiReq
	49, // 87: svc.biz.asset.Asset.IncrMerchantCoin:input_type -> svc.biz.asset.IncrMerchantCoinReq
	50, // 88: svc.biz.asset.Asset.DecrMerchantCoin:input_type -> svc.biz.asset.DecrMerchantCoinReq
	52, // 89: svc.biz.asset.Asset.ListMerchantCoinDetail:input_type -> svc.biz.asset.ListMerchantCoinDetailReq
	2,  // 90: svc.biz.asset.Asset.GetUserMoney:output_type -> svc.biz.asset.GetUserMoneyResp
	4,  // 91: svc.biz.asset.Asset.GetUserMoneyMulti:output_type -> svc.biz.asset.GetUserMoneyMultiResp
	7,  // 92: svc.biz.asset.Asset.IncrUserMoney:output_type -> svc.biz.asset.ChangeUserMoneyResp
	7,  // 93: svc.biz.asset.Asset.DecrUserMoney:output_type -> svc.biz.asset.ChangeUserMoneyResp
	9,  // 94: svc.biz.asset.Asset.ListUserMoneyDetail:output_type -> svc.biz.asset.ListUserMoneyDetailResp
	13, // 95: svc.biz.asset.Asset.GetUserCoin:output_type -> svc.biz.asset.GetUserCoinResp
	15, // 96: svc.biz.asset.Asset.GetUserCoinMulti:output_type -> svc.biz.asset.GetUserCoinMultiResp
	18, // 97: svc.biz.asset.Asset.IncrUserCoin:output_type -> svc.biz.asset.ChangeUserCoinResp
	18, // 98: svc.biz.asset.Asset.DecrUserCoin:output_type -> svc.biz.asset.ChangeUserCoinResp
	20, // 99: svc.biz.asset.Asset.ListUserCoinDetail:output_type -> svc.biz.asset.ListUserCoinDetailResp
	24, // 100: svc.biz.asset.Asset.GetStreamerCoin:output_type -> svc.biz.asset.GetStreamerCoinResp
	26, // 101: svc.biz.asset.Asset.GetStreamerCoinMulti:output_type -> svc.biz.asset.GetStreamerCoinMultiResp
	29, // 102: svc.biz.asset.Asset.IncrStreamerCoin:output_type -> svc.biz.asset.ChangeStreamerCoinResp
	29, // 103: svc.biz.asset.Asset.DecrStreamerCoin:output_type -> svc.biz.asset.ChangeStreamerCoinResp
	31, // 104: svc.biz.asset.Asset.ListStreamerCoinDetail:output_type -> svc.biz.asset.ListStreamerCoinDetailResp
	35, // 105: svc.biz.asset.Asset.GetUnionCoin:output_type -> svc.biz.asset.GetUnionCoinResp
	37, // 106: svc.biz.asset.Asset.GetUnionCoinMulti:output_type -> svc.biz.asset.GetUnionCoinMultiResp
	40, // 107: svc.biz.asset.Asset.IncrUnionCoin:output_type -> svc.biz.asset.ChangeUnionCoinResp
	40, // 108: svc.biz.asset.Asset.DecrUnionCoin:output_type -> svc.biz.asset.ChangeUnionCoinResp
	42, // 109: svc.biz.asset.Asset.ListUnionCoinDetail:output_type -> svc.biz.asset.ListUnionCoinDetailResp
	46, // 110: svc.biz.asset.Asset.GetMerchantCoin:output_type -> svc.biz.asset.GetMerchantCoinResp
	48, // 111: svc.biz.asset.Asset.GetMerchantCoinMulti:output_type -> svc.biz.asset.GetMerchantCoinMultiResp
	51, // 112: svc.biz.asset.Asset.IncrMerchantCoin:output_type -> svc.biz.asset.ChangeMerchantCoinResp
	51, // 113: svc.biz.asset.Asset.DecrMerchantCoin:output_type -> svc.biz.asset.ChangeMerchantCoinResp
	53, // 114: svc.biz.asset.Asset.ListMerchantCoinDetail:output_type -> svc.biz.asset.ListMerchantCoinDetailResp
	90, // [90:115] is the sub-list for method output_type
	65, // [65:90] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_svc_biz_asset_asset_proto_init() }
func file_svc_biz_asset_asset_proto_init() {
	if File_svc_biz_asset_asset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_asset_asset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUserMoneyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMoneyDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMoneyDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMoneyDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUserCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamerCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamerCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamerCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamerCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamerCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrStreamerCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrStreamerCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStreamerCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamerCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamerCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamerCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUnionCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_asset_asset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_asset_asset_proto_goTypes,
		DependencyIndexes: file_svc_biz_asset_asset_proto_depIdxs,
		MessageInfos:      file_svc_biz_asset_asset_proto_msgTypes,
	}.Build()
	File_svc_biz_asset_asset_proto = out.File
	file_svc_biz_asset_asset_proto_rawDesc = nil
	file_svc_biz_asset_asset_proto_goTypes = nil
	file_svc_biz_asset_asset_proto_depIdxs = nil
}
