// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: svc.biz.asset/asset.proto

package asset

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------User用户资产(含游客)---------------
// 余额 money-----------------
type GetUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetUserMoneyReq) Reset() {
	*x = GetUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyReq) ProtoMessage() {}

func (x *GetUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyReq.ProtoReflect.Descriptor instead.
func (*GetUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GetUserMoneyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetUserMoneyResp) Reset() {
	*x = GetUserMoneyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyResp) ProtoMessage() {}

func (x *GetUserMoneyResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyResp.ProtoReflect.Descriptor instead.
func (*GetUserMoneyResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserMoneyResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetUserMoneyMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *GetUserMoneyMultiReq) Reset() {
	*x = GetUserMoneyMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyMultiReq) ProtoMessage() {}

func (x *GetUserMoneyMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyMultiReq.ProtoReflect.Descriptor instead.
func (*GetUserMoneyMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserMoneyMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type GetUserMoneyMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]int64 `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // uid->value
}

func (x *GetUserMoneyMultiResp) Reset() {
	*x = GetUserMoneyMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMoneyMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMoneyMultiResp) ProtoMessage() {}

func (x *GetUserMoneyMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMoneyMultiResp.ProtoReflect.Descriptor instead.
func (*GetUserMoneyMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserMoneyMultiResp) GetValueMap() map[string]int64 {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type IncrUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Value     int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,3,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *IncrUserMoneyReq) Reset() {
	*x = IncrUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserMoneyReq) ProtoMessage() {}

func (x *IncrUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserMoneyReq.ProtoReflect.Descriptor instead.
func (*IncrUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{4}
}

func (x *IncrUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserMoneyReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrUserMoneyReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUserMoneyReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserMoneyReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IncrUserMoneyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	NewValue     int64                  `protobuf:"varint,2,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *IncrUserMoneyResp) Reset() {
	*x = IncrUserMoneyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserMoneyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserMoneyResp) ProtoMessage() {}

func (x *IncrUserMoneyResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserMoneyResp.ProtoReflect.Descriptor instead.
func (*IncrUserMoneyResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{5}
}

func (x *IncrUserMoneyResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserMoneyResp) GetNewValue() int64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

func (x *IncrUserMoneyResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserMoneyResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *IncrUserMoneyResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *IncrUserMoneyResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUserMoneyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Value     int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,3,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *DecrUserMoneyReq) Reset() {
	*x = DecrUserMoneyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserMoneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserMoneyReq) ProtoMessage() {}

func (x *DecrUserMoneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserMoneyReq.ProtoReflect.Descriptor instead.
func (*DecrUserMoneyReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{6}
}

func (x *DecrUserMoneyReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserMoneyReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUserMoneyReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUserMoneyReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserMoneyReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DecrUserMoneyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	NewValue     int64                  `protobuf:"varint,2,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,4,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *DecrUserMoneyResp) Reset() {
	*x = DecrUserMoneyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserMoneyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserMoneyResp) ProtoMessage() {}

func (x *DecrUserMoneyResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserMoneyResp.ProtoReflect.Descriptor instead.
func (*DecrUserMoneyResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{7}
}

func (x *DecrUserMoneyResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserMoneyResp) GetNewValue() int64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

func (x *DecrUserMoneyResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserMoneyResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *DecrUserMoneyResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DecrUserMoneyResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUserMoneyDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TransDirection int64                  `protobuf:"varint,2,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,3,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUserMoneyDetailReq) Reset() {
	*x = ListUserMoneyDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMoneyDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMoneyDetailReq) ProtoMessage() {}

func (x *ListUserMoneyDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMoneyDetailReq.ProtoReflect.Descriptor instead.
func (*ListUserMoneyDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserMoneyDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListUserMoneyDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUserMoneyDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUserMoneyDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserMoneyDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUserMoneyDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UserMoneyDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUserMoneyDetailResp) Reset() {
	*x = ListUserMoneyDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMoneyDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMoneyDetailResp) ProtoMessage() {}

func (x *ListUserMoneyDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMoneyDetailResp.ProtoReflect.Descriptor instead.
func (*ListUserMoneyDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{9}
}

func (x *ListUserMoneyDetailResp) GetItems() []*UserMoneyDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUserMoneyDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserMoneyDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserMoneyDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserMoneyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId       string                 `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 明细id
	TradeId        string                 `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    // 业务方交易id
	Uid            string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	SerialNumber   int64                  `protobuf:"varint,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection int64                  `protobuf:"varint,5,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType      int64                  `protobuf:"varint,6,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	Value          int64                  `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore    int64                  `protobuf:"varint,8,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter     int64                  `protobuf:"varint,9,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
	TransTime      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary        string                 `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *UserMoneyDetail) Reset() {
	*x = UserMoneyDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMoneyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMoneyDetail) ProtoMessage() {}

func (x *UserMoneyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMoneyDetail.ProtoReflect.Descriptor instead.
func (*UserMoneyDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{10}
}

func (x *UserMoneyDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UserMoneyDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UserMoneyDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserMoneyDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UserMoneyDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UserMoneyDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UserMoneyDetail) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserMoneyDetail) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *UserMoneyDetail) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

func (x *UserMoneyDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UserMoneyDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type GetUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetUserCoinReq) Reset() {
	*x = GetUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinReq) ProtoMessage() {}

func (x *GetUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinReq.ProtoReflect.Descriptor instead.
func (*GetUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetUserCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetUserCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *GetUserCoinResp) Reset() {
	*x = GetUserCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinResp) ProtoMessage() {}

func (x *GetUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinResp.ProtoReflect.Descriptor instead.
func (*GetUserCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserCoinResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetUserCoinResp) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetUserCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	AppId string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetUserCoinMultiReq) Reset() {
	*x = GetUserCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinMultiReq) ProtoMessage() {}

func (x *GetUserCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetUserCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserCoinMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *GetUserCoinMultiReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetUserCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*UserCoinValue `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uid->value
}

func (x *GetUserCoinMultiResp) Reset() {
	*x = GetUserCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinMultiResp) ProtoMessage() {}

func (x *GetUserCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetUserCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserCoinMultiResp) GetValueMap() map[string]*UserCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type UserCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *UserCoinValue) Reset() {
	*x = UserCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinValue) ProtoMessage() {}

func (x *UserCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinValue.ProtoReflect.Descriptor instead.
func (*UserCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{15}
}

func (x *UserCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type IncrUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *IncrUserCoinReq) Reset() {
	*x = IncrUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserCoinReq) ProtoMessage() {}

func (x *IncrUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserCoinReq.ProtoReflect.Descriptor instead.
func (*IncrUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{16}
}

func (x *IncrUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrUserCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrUserCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUserCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IncrUserCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *UserCoinValue         `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *IncrUserCoinResp) Reset() {
	*x = IncrUserCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUserCoinResp) ProtoMessage() {}

func (x *IncrUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUserCoinResp.ProtoReflect.Descriptor instead.
func (*IncrUserCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{17}
}

func (x *IncrUserCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUserCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrUserCoinResp) GetNewValue() *UserCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *IncrUserCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUserCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *IncrUserCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *IncrUserCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *DecrUserCoinReq) Reset() {
	*x = DecrUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserCoinReq) ProtoMessage() {}

func (x *DecrUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserCoinReq.ProtoReflect.Descriptor instead.
func (*DecrUserCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{18}
}

func (x *DecrUserCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrUserCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUserCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUserCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DecrUserCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *UserCoinValue         `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *DecrUserCoinResp) Reset() {
	*x = DecrUserCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUserCoinResp) ProtoMessage() {}

func (x *DecrUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUserCoinResp.ProtoReflect.Descriptor instead.
func (*DecrUserCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{19}
}

func (x *DecrUserCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUserCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrUserCoinResp) GetNewValue() *UserCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *DecrUserCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUserCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *DecrUserCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DecrUserCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUserCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId          string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,3,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,4,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUserCoinDetailReq) Reset() {
	*x = ListUserCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCoinDetailReq) ProtoMessage() {}

func (x *ListUserCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListUserCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{20}
}

func (x *ListUserCoinDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListUserCoinDetailReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ListUserCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUserCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUserCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUserCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UserCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64             `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUserCoinDetailResp) Reset() {
	*x = ListUserCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCoinDetailResp) ProtoMessage() {}

func (x *ListUserCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListUserCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{21}
}

func (x *ListUserCoinDetailResp) GetItems() []*UserCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUserCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId           string                 `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 明细id
	TradeId            string                 `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    // 业务方交易id
	Uid                string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId              string                 `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SerialNumber       int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,6,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,7,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	Value              int64                  `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore        int64                  `protobuf:"varint,9,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter         int64                  `protobuf:"varint,10,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
	LimitedValue       int64                  `protobuf:"varint,11,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"`
	LimitedValueBefore int64                  `protobuf:"varint,12,opt,name=limited_value_before,json=limitedValueBefore,proto3" json:"limited_value_before,omitempty"`
	LimitedValueAfter  int64                  `protobuf:"varint,13,opt,name=limited_value_after,json=limitedValueAfter,proto3" json:"limited_value_after,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *UserCoinDetail) Reset() {
	*x = UserCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinDetail) ProtoMessage() {}

func (x *UserCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinDetail.ProtoReflect.Descriptor instead.
func (*UserCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{22}
}

func (x *UserCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UserCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UserCoinDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserCoinDetail) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UserCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UserCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UserCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UserCoinDetail) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserCoinDetail) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *UserCoinDetail) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

func (x *UserCoinDetail) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

func (x *UserCoinDetail) GetLimitedValueBefore() int64 {
	if x != nil {
		return x.LimitedValueBefore
	}
	return 0
}

func (x *UserCoinDetail) GetLimitedValueAfter() int64 {
	if x != nil {
		return x.LimitedValueAfter
	}
	return 0
}

func (x *UserCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UserCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type GetAnchorCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetAnchorCoinReq) Reset() {
	*x = GetAnchorCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorCoinReq) ProtoMessage() {}

func (x *GetAnchorCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorCoinReq.ProtoReflect.Descriptor instead.
func (*GetAnchorCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{23}
}

func (x *GetAnchorCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetAnchorCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetAnchorCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *GetAnchorCoinResp) Reset() {
	*x = GetAnchorCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorCoinResp) ProtoMessage() {}

func (x *GetAnchorCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorCoinResp.ProtoReflect.Descriptor instead.
func (*GetAnchorCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{24}
}

func (x *GetAnchorCoinResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetAnchorCoinResp) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetAnchorCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	AppId string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetAnchorCoinMultiReq) Reset() {
	*x = GetAnchorCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorCoinMultiReq) ProtoMessage() {}

func (x *GetAnchorCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetAnchorCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{25}
}

func (x *GetAnchorCoinMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *GetAnchorCoinMultiReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetAnchorCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*AnchorCoinValue `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uid->value
}

func (x *GetAnchorCoinMultiResp) Reset() {
	*x = GetAnchorCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorCoinMultiResp) ProtoMessage() {}

func (x *GetAnchorCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetAnchorCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{26}
}

func (x *GetAnchorCoinMultiResp) GetValueMap() map[string]*AnchorCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type AnchorCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *AnchorCoinValue) Reset() {
	*x = AnchorCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorCoinValue) ProtoMessage() {}

func (x *AnchorCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorCoinValue.ProtoReflect.Descriptor instead.
func (*AnchorCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{27}
}

func (x *AnchorCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AnchorCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type IncrAnchorCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *IncrAnchorCoinReq) Reset() {
	*x = IncrAnchorCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrAnchorCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrAnchorCoinReq) ProtoMessage() {}

func (x *IncrAnchorCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrAnchorCoinReq.ProtoReflect.Descriptor instead.
func (*IncrAnchorCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{28}
}

func (x *IncrAnchorCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrAnchorCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrAnchorCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrAnchorCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrAnchorCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrAnchorCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IncrAnchorCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *AnchorCoinValue       `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *IncrAnchorCoinResp) Reset() {
	*x = IncrAnchorCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrAnchorCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrAnchorCoinResp) ProtoMessage() {}

func (x *IncrAnchorCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrAnchorCoinResp.ProtoReflect.Descriptor instead.
func (*IncrAnchorCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{29}
}

func (x *IncrAnchorCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrAnchorCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrAnchorCoinResp) GetNewValue() *AnchorCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *IncrAnchorCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrAnchorCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *IncrAnchorCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *IncrAnchorCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrAnchorCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *DecrAnchorCoinReq) Reset() {
	*x = DecrAnchorCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrAnchorCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrAnchorCoinReq) ProtoMessage() {}

func (x *DecrAnchorCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrAnchorCoinReq.ProtoReflect.Descriptor instead.
func (*DecrAnchorCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{30}
}

func (x *DecrAnchorCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrAnchorCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrAnchorCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrAnchorCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrAnchorCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrAnchorCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DecrAnchorCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *AnchorCoinValue       `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *DecrAnchorCoinResp) Reset() {
	*x = DecrAnchorCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrAnchorCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrAnchorCoinResp) ProtoMessage() {}

func (x *DecrAnchorCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrAnchorCoinResp.ProtoReflect.Descriptor instead.
func (*DecrAnchorCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{31}
}

func (x *DecrAnchorCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrAnchorCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrAnchorCoinResp) GetNewValue() *AnchorCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *DecrAnchorCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrAnchorCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *DecrAnchorCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DecrAnchorCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListAnchorCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId          string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,3,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,4,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListAnchorCoinDetailReq) Reset() {
	*x = ListAnchorCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnchorCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnchorCoinDetailReq) ProtoMessage() {}

func (x *ListAnchorCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnchorCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListAnchorCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{32}
}

func (x *ListAnchorCoinDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListAnchorCoinDetailReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ListAnchorCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListAnchorCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListAnchorCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListAnchorCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListAnchorCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnchorCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListAnchorCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*AnchorCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64               `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64               `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64               `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListAnchorCoinDetailResp) Reset() {
	*x = ListAnchorCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnchorCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnchorCoinDetailResp) ProtoMessage() {}

func (x *ListAnchorCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnchorCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListAnchorCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{33}
}

func (x *ListAnchorCoinDetailResp) GetItems() []*AnchorCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListAnchorCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnchorCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAnchorCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AnchorCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId           string                 `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 明细id
	TradeId            string                 `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    // 业务方交易id
	Uid                string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId              string                 `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SerialNumber       int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,6,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,7,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	Value              int64                  `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore        int64                  `protobuf:"varint,9,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter         int64                  `protobuf:"varint,10,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
	LimitedValue       int64                  `protobuf:"varint,11,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"`
	LimitedValueBefore int64                  `protobuf:"varint,12,opt,name=limited_value_before,json=limitedValueBefore,proto3" json:"limited_value_before,omitempty"`
	LimitedValueAfter  int64                  `protobuf:"varint,13,opt,name=limited_value_after,json=limitedValueAfter,proto3" json:"limited_value_after,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *AnchorCoinDetail) Reset() {
	*x = AnchorCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorCoinDetail) ProtoMessage() {}

func (x *AnchorCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorCoinDetail.ProtoReflect.Descriptor instead.
func (*AnchorCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{34}
}

func (x *AnchorCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *AnchorCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AnchorCoinDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AnchorCoinDetail) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AnchorCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *AnchorCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *AnchorCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *AnchorCoinDetail) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AnchorCoinDetail) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *AnchorCoinDetail) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

func (x *AnchorCoinDetail) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

func (x *AnchorCoinDetail) GetLimitedValueBefore() int64 {
	if x != nil {
		return x.LimitedValueBefore
	}
	return 0
}

func (x *AnchorCoinDetail) GetLimitedValueAfter() int64 {
	if x != nil {
		return x.LimitedValueAfter
	}
	return 0
}

func (x *AnchorCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *AnchorCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type GetUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetUnionCoinReq) Reset() {
	*x = GetUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinReq) ProtoMessage() {}

func (x *GetUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinReq.ProtoReflect.Descriptor instead.
func (*GetUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{35}
}

func (x *GetUnionCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetUnionCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetUnionCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *GetUnionCoinResp) Reset() {
	*x = GetUnionCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinResp) ProtoMessage() {}

func (x *GetUnionCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinResp.ProtoReflect.Descriptor instead.
func (*GetUnionCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{36}
}

func (x *GetUnionCoinResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetUnionCoinResp) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetUnionCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	AppId string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetUnionCoinMultiReq) Reset() {
	*x = GetUnionCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinMultiReq) ProtoMessage() {}

func (x *GetUnionCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetUnionCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{37}
}

func (x *GetUnionCoinMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *GetUnionCoinMultiReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetUnionCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*UnionCoinValue `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uid->value
}

func (x *GetUnionCoinMultiResp) Reset() {
	*x = GetUnionCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnionCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnionCoinMultiResp) ProtoMessage() {}

func (x *GetUnionCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnionCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetUnionCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{38}
}

func (x *GetUnionCoinMultiResp) GetValueMap() map[string]*UnionCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type UnionCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *UnionCoinValue) Reset() {
	*x = UnionCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionCoinValue) ProtoMessage() {}

func (x *UnionCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionCoinValue.ProtoReflect.Descriptor instead.
func (*UnionCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{39}
}

func (x *UnionCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnionCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type IncrUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *IncrUnionCoinReq) Reset() {
	*x = IncrUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUnionCoinReq) ProtoMessage() {}

func (x *IncrUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUnionCoinReq.ProtoReflect.Descriptor instead.
func (*IncrUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{40}
}

func (x *IncrUnionCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUnionCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrUnionCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrUnionCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrUnionCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUnionCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IncrUnionCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *UnionCoinValue        `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *IncrUnionCoinResp) Reset() {
	*x = IncrUnionCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrUnionCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrUnionCoinResp) ProtoMessage() {}

func (x *IncrUnionCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrUnionCoinResp.ProtoReflect.Descriptor instead.
func (*IncrUnionCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{41}
}

func (x *IncrUnionCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrUnionCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrUnionCoinResp) GetNewValue() *UnionCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *IncrUnionCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrUnionCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *IncrUnionCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *IncrUnionCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrUnionCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *DecrUnionCoinReq) Reset() {
	*x = DecrUnionCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUnionCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUnionCoinReq) ProtoMessage() {}

func (x *DecrUnionCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUnionCoinReq.ProtoReflect.Descriptor instead.
func (*DecrUnionCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{42}
}

func (x *DecrUnionCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUnionCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrUnionCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrUnionCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrUnionCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUnionCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DecrUnionCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *UnionCoinValue        `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *DecrUnionCoinResp) Reset() {
	*x = DecrUnionCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrUnionCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrUnionCoinResp) ProtoMessage() {}

func (x *DecrUnionCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrUnionCoinResp.ProtoReflect.Descriptor instead.
func (*DecrUnionCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{43}
}

func (x *DecrUnionCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrUnionCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrUnionCoinResp) GetNewValue() *UnionCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *DecrUnionCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrUnionCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *DecrUnionCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DecrUnionCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListUnionCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId          string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,3,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,4,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListUnionCoinDetailReq) Reset() {
	*x = ListUnionCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionCoinDetailReq) ProtoMessage() {}

func (x *ListUnionCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListUnionCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{44}
}

func (x *ListUnionCoinDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListUnionCoinDetailReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ListUnionCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListUnionCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUnionCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUnionCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUnionCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*UnionCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListUnionCoinDetailResp) Reset() {
	*x = ListUnionCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionCoinDetailResp) ProtoMessage() {}

func (x *ListUnionCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListUnionCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{45}
}

func (x *ListUnionCoinDetailResp) GetItems() []*UnionCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUnionCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUnionCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUnionCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UnionCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId           string                 `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 明细id
	TradeId            string                 `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    // 业务方交易id
	Uid                string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId              string                 `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SerialNumber       int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,6,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,7,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	Value              int64                  `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore        int64                  `protobuf:"varint,9,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter         int64                  `protobuf:"varint,10,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
	LimitedValue       int64                  `protobuf:"varint,11,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"`
	LimitedValueBefore int64                  `protobuf:"varint,12,opt,name=limited_value_before,json=limitedValueBefore,proto3" json:"limited_value_before,omitempty"`
	LimitedValueAfter  int64                  `protobuf:"varint,13,opt,name=limited_value_after,json=limitedValueAfter,proto3" json:"limited_value_after,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *UnionCoinDetail) Reset() {
	*x = UnionCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionCoinDetail) ProtoMessage() {}

func (x *UnionCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionCoinDetail.ProtoReflect.Descriptor instead.
func (*UnionCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{46}
}

func (x *UnionCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *UnionCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UnionCoinDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UnionCoinDetail) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UnionCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *UnionCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *UnionCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *UnionCoinDetail) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnionCoinDetail) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *UnionCoinDetail) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

func (x *UnionCoinDetail) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

func (x *UnionCoinDetail) GetLimitedValueBefore() int64 {
	if x != nil {
		return x.LimitedValueBefore
	}
	return 0
}

func (x *UnionCoinDetail) GetLimitedValueAfter() int64 {
	if x != nil {
		return x.LimitedValueAfter
	}
	return 0
}

func (x *UnionCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *UnionCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// 虚拟币 coin-----------------
type GetMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetMerchantCoinReq) Reset() {
	*x = GetMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinReq) ProtoMessage() {}

func (x *GetMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{47}
}

func (x *GetMerchantCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetMerchantCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetMerchantCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *GetMerchantCoinResp) Reset() {
	*x = GetMerchantCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinResp) ProtoMessage() {}

func (x *GetMerchantCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinResp.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{48}
}

func (x *GetMerchantCoinResp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetMerchantCoinResp) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type GetMerchantCoinMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids,omitempty"`
	AppId string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *GetMerchantCoinMultiReq) Reset() {
	*x = GetMerchantCoinMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinMultiReq) ProtoMessage() {}

func (x *GetMerchantCoinMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinMultiReq.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinMultiReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{49}
}

func (x *GetMerchantCoinMultiReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *GetMerchantCoinMultiReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetMerchantCoinMultiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap map[string]*MerchantCoinValue `protobuf:"bytes,1,rep,name=value_map,json=valueMap,proto3" json:"value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uid->value
}

func (x *GetMerchantCoinMultiResp) Reset() {
	*x = GetMerchantCoinMultiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantCoinMultiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantCoinMultiResp) ProtoMessage() {}

func (x *GetMerchantCoinMultiResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantCoinMultiResp.ProtoReflect.Descriptor instead.
func (*GetMerchantCoinMultiResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{50}
}

func (x *GetMerchantCoinMultiResp) GetValueMap() map[string]*MerchantCoinValue {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

type MerchantCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *MerchantCoinValue) Reset() {
	*x = MerchantCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCoinValue) ProtoMessage() {}

func (x *MerchantCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCoinValue.ProtoReflect.Descriptor instead.
func (*MerchantCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{51}
}

func (x *MerchantCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MerchantCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type IncrMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别,增加普通余额或低权限余额按此字段自动判断
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *IncrMerchantCoinReq) Reset() {
	*x = IncrMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrMerchantCoinReq) ProtoMessage() {}

func (x *IncrMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*IncrMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{52}
}

func (x *IncrMerchantCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IncrMerchantCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IncrMerchantCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrMerchantCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IncrMerchantCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *MerchantCoinValue     `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *IncrMerchantCoinResp) Reset() {
	*x = IncrMerchantCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrMerchantCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrMerchantCoinResp) ProtoMessage() {}

func (x *IncrMerchantCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrMerchantCoinResp.ProtoReflect.Descriptor instead.
func (*IncrMerchantCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{53}
}

func (x *IncrMerchantCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IncrMerchantCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *IncrMerchantCoinResp) GetNewValue() *MerchantCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *IncrMerchantCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *IncrMerchantCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *IncrMerchantCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *IncrMerchantCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type DecrMerchantCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	TransType int64  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // 交易类别
	TradeId   string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`        // 业务方交易id,业务方保证唯一,支持幂等
	Summary   string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                       //摘要,json 实际会做格式和核心字段校验
}

func (x *DecrMerchantCoinReq) Reset() {
	*x = DecrMerchantCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrMerchantCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrMerchantCoinReq) ProtoMessage() {}

func (x *DecrMerchantCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrMerchantCoinReq.ProtoReflect.Descriptor instead.
func (*DecrMerchantCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{54}
}

func (x *DecrMerchantCoinReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecrMerchantCoinReq) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *DecrMerchantCoinReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrMerchantCoinReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DecrMerchantCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId        string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	NewValue     *MerchantCoinValue     `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	TradeId      string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                 // 业务方交易id
	DetailId     string                 `protobuf:"bytes,5,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`              // 明细id
	SerialNumber int64                  `protobuf:"varint,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // 流水号,单账户连续自增
	TransTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`           // 业务时间
}

func (x *DecrMerchantCoinResp) Reset() {
	*x = DecrMerchantCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrMerchantCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrMerchantCoinResp) ProtoMessage() {}

func (x *DecrMerchantCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrMerchantCoinResp.ProtoReflect.Descriptor instead.
func (*DecrMerchantCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{55}
}

func (x *DecrMerchantCoinResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DecrMerchantCoinResp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DecrMerchantCoinResp) GetNewValue() *MerchantCoinValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *DecrMerchantCoinResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DecrMerchantCoinResp) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *DecrMerchantCoinResp) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DecrMerchantCoinResp) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type ListMerchantCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId          string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TransDirection int64                  `protobuf:"varint,3,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 0 不限 1 增加 2 减少
	TransType      []int64                `protobuf:"varint,4,rep,packed,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`         // 交易类别: 空表示不限
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 // 开始时间(含)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       // 结束时间(不含)
	Page           int64                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize       int64                  `protobuf:"varint,51,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 单页条数
}

func (x *ListMerchantCoinDetailReq) Reset() {
	*x = ListMerchantCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantCoinDetailReq) ProtoMessage() {}

func (x *ListMerchantCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantCoinDetailReq.ProtoReflect.Descriptor instead.
func (*ListMerchantCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{56}
}

func (x *ListMerchantCoinDetailReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListMerchantCoinDetailReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ListMerchantCoinDetailReq) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *ListMerchantCoinDetailReq) GetTransType() []int64 {
	if x != nil {
		return x.TransType
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListMerchantCoinDetailReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMerchantCoinDetailReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMerchantCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*MerchantCoinDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page     int64                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 单页条数
	Total    int64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 符合筛选的总条数
}

func (x *ListMerchantCoinDetailResp) Reset() {
	*x = ListMerchantCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantCoinDetailResp) ProtoMessage() {}

func (x *ListMerchantCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantCoinDetailResp.ProtoReflect.Descriptor instead.
func (*ListMerchantCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{57}
}

func (x *ListMerchantCoinDetailResp) GetItems() []*MerchantCoinDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMerchantCoinDetailResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMerchantCoinDetailResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMerchantCoinDetailResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MerchantCoinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId           string                 `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 明细id
	TradeId            string                 `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    // 业务方交易id
	Uid                string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId              string                 `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SerialNumber       int64                  `protobuf:"varint,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 流水号,单账户连续自增
	TransDirection     int64                  `protobuf:"varint,6,opt,name=trans_direction,json=transDirection,proto3" json:"trans_direction,omitempty"` // 交易方向 1 增加 2 减少
	TransType          int64                  `protobuf:"varint,7,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`                // 交易类别
	Value              int64                  `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	ValueBefore        int64                  `protobuf:"varint,9,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter         int64                  `protobuf:"varint,10,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
	LimitedValue       int64                  `protobuf:"varint,11,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"`
	LimitedValueBefore int64                  `protobuf:"varint,12,opt,name=limited_value_before,json=limitedValueBefore,proto3" json:"limited_value_before,omitempty"`
	LimitedValueAfter  int64                  `protobuf:"varint,13,opt,name=limited_value_after,json=limitedValueAfter,proto3" json:"limited_value_after,omitempty"`
	TransTime          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"` // 业务时间
	Summary            string                 `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`                      //摘要,json 实际会做格式和核心字段校验
}

func (x *MerchantCoinDetail) Reset() {
	*x = MerchantCoinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_asset_asset_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCoinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCoinDetail) ProtoMessage() {}

func (x *MerchantCoinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_asset_asset_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCoinDetail.ProtoReflect.Descriptor instead.
func (*MerchantCoinDetail) Descriptor() ([]byte, []int) {
	return file_svc_biz_asset_asset_proto_rawDescGZIP(), []int{58}
}

func (x *MerchantCoinDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *MerchantCoinDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *MerchantCoinDetail) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MerchantCoinDetail) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MerchantCoinDetail) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *MerchantCoinDetail) GetTransDirection() int64 {
	if x != nil {
		return x.TransDirection
	}
	return 0
}

func (x *MerchantCoinDetail) GetTransType() int64 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *MerchantCoinDetail) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MerchantCoinDetail) GetValueBefore() int64 {
	if x != nil {
		return x.ValueBefore
	}
	return 0
}

func (x *MerchantCoinDetail) GetValueAfter() int64 {
	if x != nil {
		return x.ValueAfter
	}
	return 0
}

func (x *MerchantCoinDetail) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

func (x *MerchantCoinDetail) GetLimitedValueBefore() int64 {
	if x != nil {
		return x.LimitedValueBefore
	}
	return 0
}

func (x *MerchantCoinDetail) GetLimitedValueAfter() int64 {
	if x != nil {
		return x.LimitedValueAfter
	}
	return 0
}

func (x *MerchantCoinDetail) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *MerchantCoinDetail) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

var File_svc_biz_asset_asset_proto protoreflect.FileDescriptor

var file_svc_biz_asset_asset_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4f, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8e, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0xda, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x02, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xf7, 0x02,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x0d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x49, 0x6e,
	0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x94, 0x04, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3b,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0xc7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a, 0x0d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0f, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x72,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x92, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x72, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x92,
	0x02, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96,
	0x04, 0x0a, 0x10, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x41, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4f, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x1a, 0x5a, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x49, 0x6e,
	0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x90, 0x02, 0x0a,
	0x11, 0x44, 0x65, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xac, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x95, 0x04, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x50,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x44, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x72, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf,
	0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x98, 0x04, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0xa1, 0x12, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x49, 0x6e, 0x63,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c,
	0x49, 0x6e, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x44,
	0x65, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65,
	0x63, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x26, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x17,
	0x5a, 0x15, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x3b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_asset_asset_proto_rawDescOnce sync.Once
	file_svc_biz_asset_asset_proto_rawDescData = file_svc_biz_asset_asset_proto_rawDesc
)

func file_svc_biz_asset_asset_proto_rawDescGZIP() []byte {
	file_svc_biz_asset_asset_proto_rawDescOnce.Do(func() {
		file_svc_biz_asset_asset_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_asset_asset_proto_rawDescData)
	})
	return file_svc_biz_asset_asset_proto_rawDescData
}

var file_svc_biz_asset_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_svc_biz_asset_asset_proto_goTypes = []interface{}{
	(*GetUserMoneyReq)(nil),            // 0: svc.biz.asset.GetUserMoneyReq
	(*GetUserMoneyResp)(nil),           // 1: svc.biz.asset.GetUserMoneyResp
	(*GetUserMoneyMultiReq)(nil),       // 2: svc.biz.asset.GetUserMoneyMultiReq
	(*GetUserMoneyMultiResp)(nil),      // 3: svc.biz.asset.GetUserMoneyMultiResp
	(*IncrUserMoneyReq)(nil),           // 4: svc.biz.asset.IncrUserMoneyReq
	(*IncrUserMoneyResp)(nil),          // 5: svc.biz.asset.IncrUserMoneyResp
	(*DecrUserMoneyReq)(nil),           // 6: svc.biz.asset.DecrUserMoneyReq
	(*DecrUserMoneyResp)(nil),          // 7: svc.biz.asset.DecrUserMoneyResp
	(*ListUserMoneyDetailReq)(nil),     // 8: svc.biz.asset.ListUserMoneyDetailReq
	(*ListUserMoneyDetailResp)(nil),    // 9: svc.biz.asset.ListUserMoneyDetailResp
	(*UserMoneyDetail)(nil),            // 10: svc.biz.asset.UserMoneyDetail
	(*GetUserCoinReq)(nil),             // 11: svc.biz.asset.GetUserCoinReq
	(*GetUserCoinResp)(nil),            // 12: svc.biz.asset.GetUserCoinResp
	(*GetUserCoinMultiReq)(nil),        // 13: svc.biz.asset.GetUserCoinMultiReq
	(*GetUserCoinMultiResp)(nil),       // 14: svc.biz.asset.GetUserCoinMultiResp
	(*UserCoinValue)(nil),              // 15: svc.biz.asset.UserCoinValue
	(*IncrUserCoinReq)(nil),            // 16: svc.biz.asset.IncrUserCoinReq
	(*IncrUserCoinResp)(nil),           // 17: svc.biz.asset.IncrUserCoinResp
	(*DecrUserCoinReq)(nil),            // 18: svc.biz.asset.DecrUserCoinReq
	(*DecrUserCoinResp)(nil),           // 19: svc.biz.asset.DecrUserCoinResp
	(*ListUserCoinDetailReq)(nil),      // 20: svc.biz.asset.ListUserCoinDetailReq
	(*ListUserCoinDetailResp)(nil),     // 21: svc.biz.asset.ListUserCoinDetailResp
	(*UserCoinDetail)(nil),             // 22: svc.biz.asset.UserCoinDetail
	(*GetAnchorCoinReq)(nil),           // 23: svc.biz.asset.GetAnchorCoinReq
	(*GetAnchorCoinResp)(nil),          // 24: svc.biz.asset.GetAnchorCoinResp
	(*GetAnchorCoinMultiReq)(nil),      // 25: svc.biz.asset.GetAnchorCoinMultiReq
	(*GetAnchorCoinMultiResp)(nil),     // 26: svc.biz.asset.GetAnchorCoinMultiResp
	(*AnchorCoinValue)(nil),            // 27: svc.biz.asset.AnchorCoinValue
	(*IncrAnchorCoinReq)(nil),          // 28: svc.biz.asset.IncrAnchorCoinReq
	(*IncrAnchorCoinResp)(nil),         // 29: svc.biz.asset.IncrAnchorCoinResp
	(*DecrAnchorCoinReq)(nil),          // 30: svc.biz.asset.DecrAnchorCoinReq
	(*DecrAnchorCoinResp)(nil),         // 31: svc.biz.asset.DecrAnchorCoinResp
	(*ListAnchorCoinDetailReq)(nil),    // 32: svc.biz.asset.ListAnchorCoinDetailReq
	(*ListAnchorCoinDetailResp)(nil),   // 33: svc.biz.asset.ListAnchorCoinDetailResp
	(*AnchorCoinDetail)(nil),           // 34: svc.biz.asset.AnchorCoinDetail
	(*GetUnionCoinReq)(nil),            // 35: svc.biz.asset.GetUnionCoinReq
	(*GetUnionCoinResp)(nil),           // 36: svc.biz.asset.GetUnionCoinResp
	(*GetUnionCoinMultiReq)(nil),       // 37: svc.biz.asset.GetUnionCoinMultiReq
	(*GetUnionCoinMultiResp)(nil),      // 38: svc.biz.asset.GetUnionCoinMultiResp
	(*UnionCoinValue)(nil),             // 39: svc.biz.asset.UnionCoinValue
	(*IncrUnionCoinReq)(nil),           // 40: svc.biz.asset.IncrUnionCoinReq
	(*IncrUnionCoinResp)(nil),          // 41: svc.biz.asset.IncrUnionCoinResp
	(*DecrUnionCoinReq)(nil),           // 42: svc.biz.asset.DecrUnionCoinReq
	(*DecrUnionCoinResp)(nil),          // 43: svc.biz.asset.DecrUnionCoinResp
	(*ListUnionCoinDetailReq)(nil),     // 44: svc.biz.asset.ListUnionCoinDetailReq
	(*ListUnionCoinDetailResp)(nil),    // 45: svc.biz.asset.ListUnionCoinDetailResp
	(*UnionCoinDetail)(nil),            // 46: svc.biz.asset.UnionCoinDetail
	(*GetMerchantCoinReq)(nil),         // 47: svc.biz.asset.GetMerchantCoinReq
	(*GetMerchantCoinResp)(nil),        // 48: svc.biz.asset.GetMerchantCoinResp
	(*GetMerchantCoinMultiReq)(nil),    // 49: svc.biz.asset.GetMerchantCoinMultiReq
	(*GetMerchantCoinMultiResp)(nil),   // 50: svc.biz.asset.GetMerchantCoinMultiResp
	(*MerchantCoinValue)(nil),          // 51: svc.biz.asset.MerchantCoinValue
	(*IncrMerchantCoinReq)(nil),        // 52: svc.biz.asset.IncrMerchantCoinReq
	(*IncrMerchantCoinResp)(nil),       // 53: svc.biz.asset.IncrMerchantCoinResp
	(*DecrMerchantCoinReq)(nil),        // 54: svc.biz.asset.DecrMerchantCoinReq
	(*DecrMerchantCoinResp)(nil),       // 55: svc.biz.asset.DecrMerchantCoinResp
	(*ListMerchantCoinDetailReq)(nil),  // 56: svc.biz.asset.ListMerchantCoinDetailReq
	(*ListMerchantCoinDetailResp)(nil), // 57: svc.biz.asset.ListMerchantCoinDetailResp
	(*MerchantCoinDetail)(nil),         // 58: svc.biz.asset.MerchantCoinDetail
	nil,                                // 59: svc.biz.asset.GetUserMoneyMultiResp.ValueMapEntry
	nil,                                // 60: svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry
	nil,                                // 61: svc.biz.asset.GetAnchorCoinMultiResp.ValueMapEntry
	nil,                                // 62: svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry
	nil,                                // 63: svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry
	(*timestamppb.Timestamp)(nil),      // 64: google.protobuf.Timestamp
}
var file_svc_biz_asset_asset_proto_depIdxs = []int32{
	59, // 0: svc.biz.asset.GetUserMoneyMultiResp.value_map:type_name -> svc.biz.asset.GetUserMoneyMultiResp.ValueMapEntry
	64, // 1: svc.biz.asset.IncrUserMoneyResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 2: svc.biz.asset.DecrUserMoneyResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 3: svc.biz.asset.ListUserMoneyDetailReq.start_time:type_name -> google.protobuf.Timestamp
	64, // 4: svc.biz.asset.ListUserMoneyDetailReq.end_time:type_name -> google.protobuf.Timestamp
	10, // 5: svc.biz.asset.ListUserMoneyDetailResp.items:type_name -> svc.biz.asset.UserMoneyDetail
	64, // 6: svc.biz.asset.UserMoneyDetail.trans_time:type_name -> google.protobuf.Timestamp
	60, // 7: svc.biz.asset.GetUserCoinMultiResp.value_map:type_name -> svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry
	15, // 8: svc.biz.asset.IncrUserCoinResp.new_value:type_name -> svc.biz.asset.UserCoinValue
	64, // 9: svc.biz.asset.IncrUserCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	15, // 10: svc.biz.asset.DecrUserCoinResp.new_value:type_name -> svc.biz.asset.UserCoinValue
	64, // 11: svc.biz.asset.DecrUserCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 12: svc.biz.asset.ListUserCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	64, // 13: svc.biz.asset.ListUserCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	22, // 14: svc.biz.asset.ListUserCoinDetailResp.items:type_name -> svc.biz.asset.UserCoinDetail
	64, // 15: svc.biz.asset.UserCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	61, // 16: svc.biz.asset.GetAnchorCoinMultiResp.value_map:type_name -> svc.biz.asset.GetAnchorCoinMultiResp.ValueMapEntry
	27, // 17: svc.biz.asset.IncrAnchorCoinResp.new_value:type_name -> svc.biz.asset.AnchorCoinValue
	64, // 18: svc.biz.asset.IncrAnchorCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	27, // 19: svc.biz.asset.DecrAnchorCoinResp.new_value:type_name -> svc.biz.asset.AnchorCoinValue
	64, // 20: svc.biz.asset.DecrAnchorCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 21: svc.biz.asset.ListAnchorCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	64, // 22: svc.biz.asset.ListAnchorCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	34, // 23: svc.biz.asset.ListAnchorCoinDetailResp.items:type_name -> svc.biz.asset.AnchorCoinDetail
	64, // 24: svc.biz.asset.AnchorCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	62, // 25: svc.biz.asset.GetUnionCoinMultiResp.value_map:type_name -> svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry
	39, // 26: svc.biz.asset.IncrUnionCoinResp.new_value:type_name -> svc.biz.asset.UnionCoinValue
	64, // 27: svc.biz.asset.IncrUnionCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	39, // 28: svc.biz.asset.DecrUnionCoinResp.new_value:type_name -> svc.biz.asset.UnionCoinValue
	64, // 29: svc.biz.asset.DecrUnionCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 30: svc.biz.asset.ListUnionCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	64, // 31: svc.biz.asset.ListUnionCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	46, // 32: svc.biz.asset.ListUnionCoinDetailResp.items:type_name -> svc.biz.asset.UnionCoinDetail
	64, // 33: svc.biz.asset.UnionCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	63, // 34: svc.biz.asset.GetMerchantCoinMultiResp.value_map:type_name -> svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry
	51, // 35: svc.biz.asset.IncrMerchantCoinResp.new_value:type_name -> svc.biz.asset.MerchantCoinValue
	64, // 36: svc.biz.asset.IncrMerchantCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	51, // 37: svc.biz.asset.DecrMerchantCoinResp.new_value:type_name -> svc.biz.asset.MerchantCoinValue
	64, // 38: svc.biz.asset.DecrMerchantCoinResp.trans_time:type_name -> google.protobuf.Timestamp
	64, // 39: svc.biz.asset.ListMerchantCoinDetailReq.start_time:type_name -> google.protobuf.Timestamp
	64, // 40: svc.biz.asset.ListMerchantCoinDetailReq.end_time:type_name -> google.protobuf.Timestamp
	58, // 41: svc.biz.asset.ListMerchantCoinDetailResp.items:type_name -> svc.biz.asset.MerchantCoinDetail
	64, // 42: svc.biz.asset.MerchantCoinDetail.trans_time:type_name -> google.protobuf.Timestamp
	15, // 43: svc.biz.asset.GetUserCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.UserCoinValue
	27, // 44: svc.biz.asset.GetAnchorCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.AnchorCoinValue
	39, // 45: svc.biz.asset.GetUnionCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.UnionCoinValue
	51, // 46: svc.biz.asset.GetMerchantCoinMultiResp.ValueMapEntry.value:type_name -> svc.biz.asset.MerchantCoinValue
	0,  // 47: svc.biz.asset.Asset.GetUserMoney:input_type -> svc.biz.asset.GetUserMoneyReq
	2,  // 48: svc.biz.asset.Asset.GetUserMoneyMulti:input_type -> svc.biz.asset.GetUserMoneyMultiReq
	4,  // 49: svc.biz.asset.Asset.IncrUserMoney:input_type -> svc.biz.asset.IncrUserMoneyReq
	6,  // 50: svc.biz.asset.Asset.DecrUserMoney:input_type -> svc.biz.asset.DecrUserMoneyReq
	8,  // 51: svc.biz.asset.Asset.ListUserMoneyDetail:input_type -> svc.biz.asset.ListUserMoneyDetailReq
	11, // 52: svc.biz.asset.Asset.GetUserCoin:input_type -> svc.biz.asset.GetUserCoinReq
	13, // 53: svc.biz.asset.Asset.GetUserCoinMulti:input_type -> svc.biz.asset.GetUserCoinMultiReq
	16, // 54: svc.biz.asset.Asset.IncrUserCoin:input_type -> svc.biz.asset.IncrUserCoinReq
	18, // 55: svc.biz.asset.Asset.DecrUserCoin:input_type -> svc.biz.asset.DecrUserCoinReq
	20, // 56: svc.biz.asset.Asset.ListUserCoinDetail:input_type -> svc.biz.asset.ListUserCoinDetailReq
	23, // 57: svc.biz.asset.Asset.GetAnchorCoin:input_type -> svc.biz.asset.GetAnchorCoinReq
	25, // 58: svc.biz.asset.Asset.GetAnchorCoinMulti:input_type -> svc.biz.asset.GetAnchorCoinMultiReq
	28, // 59: svc.biz.asset.Asset.IncrAnchorCoin:input_type -> svc.biz.asset.IncrAnchorCoinReq
	30, // 60: svc.biz.asset.Asset.DecrAnchorCoin:input_type -> svc.biz.asset.DecrAnchorCoinReq
	32, // 61: svc.biz.asset.Asset.ListAnchorCoinDetail:input_type -> svc.biz.asset.ListAnchorCoinDetailReq
	35, // 62: svc.biz.asset.Asset.GetUnionCoin:input_type -> svc.biz.asset.GetUnionCoinReq
	37, // 63: svc.biz.asset.Asset.GetUnionCoinMulti:input_type -> svc.biz.asset.GetUnionCoinMultiReq
	40, // 64: svc.biz.asset.Asset.IncrUnionCoin:input_type -> svc.biz.asset.IncrUnionCoinReq
	42, // 65: svc.biz.asset.Asset.DecrUnionCoin:input_type -> svc.biz.asset.DecrUnionCoinReq
	44, // 66: svc.biz.asset.Asset.ListUnionCoinDetail:input_type -> svc.biz.asset.ListUnionCoinDetailReq
	47, // 67: svc.biz.asset.Asset.GetMerchantCoin:input_type -> svc.biz.asset.GetMerchantCoinReq
	49, // 68: svc.biz.asset.Asset.GetMerchantCoinMulti:input_type -> svc.biz.asset.GetMerchantCoinMultiReq
	52, // 69: svc.biz.asset.Asset.IncrMerchantCoin:input_type -> svc.biz.asset.IncrMerchantCoinReq
	54, // 70: svc.biz.asset.Asset.DecrMerchantCoin:input_type -> svc.biz.asset.DecrMerchantCoinReq
	56, // 71: svc.biz.asset.Asset.ListMerchantCoinDetail:input_type -> svc.biz.asset.ListMerchantCoinDetailReq
	1,  // 72: svc.biz.asset.Asset.GetUserMoney:output_type -> svc.biz.asset.GetUserMoneyResp
	3,  // 73: svc.biz.asset.Asset.GetUserMoneyMulti:output_type -> svc.biz.asset.GetUserMoneyMultiResp
	5,  // 74: svc.biz.asset.Asset.IncrUserMoney:output_type -> svc.biz.asset.IncrUserMoneyResp
	7,  // 75: svc.biz.asset.Asset.DecrUserMoney:output_type -> svc.biz.asset.DecrUserMoneyResp
	9,  // 76: svc.biz.asset.Asset.ListUserMoneyDetail:output_type -> svc.biz.asset.ListUserMoneyDetailResp
	12, // 77: svc.biz.asset.Asset.GetUserCoin:output_type -> svc.biz.asset.GetUserCoinResp
	14, // 78: svc.biz.asset.Asset.GetUserCoinMulti:output_type -> svc.biz.asset.GetUserCoinMultiResp
	17, // 79: svc.biz.asset.Asset.IncrUserCoin:output_type -> svc.biz.asset.IncrUserCoinResp
	19, // 80: svc.biz.asset.Asset.DecrUserCoin:output_type -> svc.biz.asset.DecrUserCoinResp
	21, // 81: svc.biz.asset.Asset.ListUserCoinDetail:output_type -> svc.biz.asset.ListUserCoinDetailResp
	24, // 82: svc.biz.asset.Asset.GetAnchorCoin:output_type -> svc.biz.asset.GetAnchorCoinResp
	26, // 83: svc.biz.asset.Asset.GetAnchorCoinMulti:output_type -> svc.biz.asset.GetAnchorCoinMultiResp
	29, // 84: svc.biz.asset.Asset.IncrAnchorCoin:output_type -> svc.biz.asset.IncrAnchorCoinResp
	31, // 85: svc.biz.asset.Asset.DecrAnchorCoin:output_type -> svc.biz.asset.DecrAnchorCoinResp
	33, // 86: svc.biz.asset.Asset.ListAnchorCoinDetail:output_type -> svc.biz.asset.ListAnchorCoinDetailResp
	36, // 87: svc.biz.asset.Asset.GetUnionCoin:output_type -> svc.biz.asset.GetUnionCoinResp
	38, // 88: svc.biz.asset.Asset.GetUnionCoinMulti:output_type -> svc.biz.asset.GetUnionCoinMultiResp
	41, // 89: svc.biz.asset.Asset.IncrUnionCoin:output_type -> svc.biz.asset.IncrUnionCoinResp
	43, // 90: svc.biz.asset.Asset.DecrUnionCoin:output_type -> svc.biz.asset.DecrUnionCoinResp
	45, // 91: svc.biz.asset.Asset.ListUnionCoinDetail:output_type -> svc.biz.asset.ListUnionCoinDetailResp
	48, // 92: svc.biz.asset.Asset.GetMerchantCoin:output_type -> svc.biz.asset.GetMerchantCoinResp
	50, // 93: svc.biz.asset.Asset.GetMerchantCoinMulti:output_type -> svc.biz.asset.GetMerchantCoinMultiResp
	53, // 94: svc.biz.asset.Asset.IncrMerchantCoin:output_type -> svc.biz.asset.IncrMerchantCoinResp
	55, // 95: svc.biz.asset.Asset.DecrMerchantCoin:output_type -> svc.biz.asset.DecrMerchantCoinResp
	57, // 96: svc.biz.asset.Asset.ListMerchantCoinDetail:output_type -> svc.biz.asset.ListMerchantCoinDetailResp
	72, // [72:97] is the sub-list for method output_type
	47, // [47:72] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_svc_biz_asset_asset_proto_init() }
func file_svc_biz_asset_asset_proto_init() {
	if File_svc_biz_asset_asset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_asset_asset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMoneyMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserMoneyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserMoneyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserMoneyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMoneyDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMoneyDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMoneyDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUserCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUserCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrAnchorCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrAnchorCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrAnchorCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrAnchorCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnchorCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnchorCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnionCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrUnionCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUnionCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrUnionCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantCoinMultiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrMerchantCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrMerchantCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrMerchantCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_asset_asset_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCoinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_asset_asset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_asset_asset_proto_goTypes,
		DependencyIndexes: file_svc_biz_asset_asset_proto_depIdxs,
		MessageInfos:      file_svc_biz_asset_asset_proto_msgTypes,
	}.Build()
	File_svc_biz_asset_asset_proto = out.File
	file_svc_biz_asset_asset_proto_rawDesc = nil
	file_svc_biz_asset_asset_proto_goTypes = nil
	file_svc_biz_asset_asset_proto_depIdxs = nil
}
