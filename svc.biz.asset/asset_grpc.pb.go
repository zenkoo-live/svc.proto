// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: svc.biz.asset/asset.proto

package asset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Asset_GetUserMoney_FullMethodName            = "/svc.biz.asset.Asset/GetUserMoney"
	Asset_GetUserMoneyMulti_FullMethodName       = "/svc.biz.asset.Asset/GetUserMoneyMulti"
	Asset_IncrUserMoney_FullMethodName           = "/svc.biz.asset.Asset/IncrUserMoney"
	Asset_DecrUserMoney_FullMethodName           = "/svc.biz.asset.Asset/DecrUserMoney"
	Asset_ListUserMoneyDetail_FullMethodName     = "/svc.biz.asset.Asset/ListUserMoneyDetail"
	Asset_GetUserCoin_FullMethodName             = "/svc.biz.asset.Asset/GetUserCoin"
	Asset_GetUserCoinMulti_FullMethodName        = "/svc.biz.asset.Asset/GetUserCoinMulti"
	Asset_IncrUserCoin_FullMethodName            = "/svc.biz.asset.Asset/IncrUserCoin"
	Asset_DecrUserCoin_FullMethodName            = "/svc.biz.asset.Asset/DecrUserCoin"
	Asset_ListUserCoinDetail_FullMethodName      = "/svc.biz.asset.Asset/ListUserCoinDetail"
	Asset_GetStreamerMoney_FullMethodName        = "/svc.biz.asset.Asset/GetStreamerMoney"
	Asset_GetStreamerMoneyMulti_FullMethodName   = "/svc.biz.asset.Asset/GetStreamerMoneyMulti"
	Asset_IncrStreamerMoney_FullMethodName       = "/svc.biz.asset.Asset/IncrStreamerMoney"
	Asset_DecrStreamerMoney_FullMethodName       = "/svc.biz.asset.Asset/DecrStreamerMoney"
	Asset_ListStreamerMoneyDetail_FullMethodName = "/svc.biz.asset.Asset/ListStreamerMoneyDetail"
	Asset_GetStreamerCoin_FullMethodName         = "/svc.biz.asset.Asset/GetStreamerCoin"
	Asset_GetStreamerCoinMulti_FullMethodName    = "/svc.biz.asset.Asset/GetStreamerCoinMulti"
	Asset_IncrStreamerCoin_FullMethodName        = "/svc.biz.asset.Asset/IncrStreamerCoin"
	Asset_DecrStreamerCoin_FullMethodName        = "/svc.biz.asset.Asset/DecrStreamerCoin"
	Asset_ListStreamerCoinDetail_FullMethodName  = "/svc.biz.asset.Asset/ListStreamerCoinDetail"
	Asset_GetUnionMoney_FullMethodName           = "/svc.biz.asset.Asset/GetUnionMoney"
	Asset_GetUnionMoneyMulti_FullMethodName      = "/svc.biz.asset.Asset/GetUnionMoneyMulti"
	Asset_IncrUnionMoney_FullMethodName          = "/svc.biz.asset.Asset/IncrUnionMoney"
	Asset_DecrUnionMoney_FullMethodName          = "/svc.biz.asset.Asset/DecrUnionMoney"
	Asset_ListUnionMoneyDetail_FullMethodName    = "/svc.biz.asset.Asset/ListUnionMoneyDetail"
	Asset_GetUnionCoin_FullMethodName            = "/svc.biz.asset.Asset/GetUnionCoin"
	Asset_GetUnionCoinMulti_FullMethodName       = "/svc.biz.asset.Asset/GetUnionCoinMulti"
	Asset_IncrUnionCoin_FullMethodName           = "/svc.biz.asset.Asset/IncrUnionCoin"
	Asset_DecrUnionCoin_FullMethodName           = "/svc.biz.asset.Asset/DecrUnionCoin"
	Asset_ListUnionCoinDetail_FullMethodName     = "/svc.biz.asset.Asset/ListUnionCoinDetail"
	Asset_GetMerchantCoin_FullMethodName         = "/svc.biz.asset.Asset/GetMerchantCoin"
	Asset_GetMerchantCoinMulti_FullMethodName    = "/svc.biz.asset.Asset/GetMerchantCoinMulti"
	Asset_IncrMerchantCoin_FullMethodName        = "/svc.biz.asset.Asset/IncrMerchantCoin"
	Asset_DecrMerchantCoin_FullMethodName        = "/svc.biz.asset.Asset/DecrMerchantCoin"
	Asset_ListMerchantCoinDetail_FullMethodName  = "/svc.biz.asset.Asset/ListMerchantCoinDetail"
)

// AssetClient is the client API for Asset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetClient interface {
	// 余额 money
	GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error)
	GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...grpc.CallOption) (*GetUserMoneyMultiResp, error)
	IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error)
	DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error)
	ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...grpc.CallOption) (*ListUserMoneyDetailResp, error)
	// 虚拟币coin
	GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error)
	GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...grpc.CallOption) (*GetUserCoinMultiResp, error)
	IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error)
	DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error)
	ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...grpc.CallOption) (*ListUserCoinDetailResp, error)
	// ---------------Streamer主播资产---------------
	// 余额 money
	GetStreamerMoney(ctx context.Context, in *GetStreamerMoneyReq, opts ...grpc.CallOption) (*GetStreamerMoneyResp, error)
	GetStreamerMoneyMulti(ctx context.Context, in *GetStreamerMoneyMultiReq, opts ...grpc.CallOption) (*GetStreamerMoneyMultiResp, error)
	IncrStreamerMoney(ctx context.Context, in *IncrStreamerMoneyReq, opts ...grpc.CallOption) (*ChangeStreamerMoneyResp, error)
	DecrStreamerMoney(ctx context.Context, in *DecrStreamerMoneyReq, opts ...grpc.CallOption) (*ChangeStreamerMoneyResp, error)
	ListStreamerMoneyDetail(ctx context.Context, in *ListStreamerMoneyDetailReq, opts ...grpc.CallOption) (*ListStreamerMoneyDetailResp, error)
	// 虚拟币coin
	GetStreamerCoin(ctx context.Context, in *GetStreamerCoinReq, opts ...grpc.CallOption) (*GetStreamerCoinResp, error)
	GetStreamerCoinMulti(ctx context.Context, in *GetStreamerCoinMultiReq, opts ...grpc.CallOption) (*GetStreamerCoinMultiResp, error)
	IncrStreamerCoin(ctx context.Context, in *IncrStreamerCoinReq, opts ...grpc.CallOption) (*ChangeStreamerCoinResp, error)
	DecrStreamerCoin(ctx context.Context, in *DecrStreamerCoinReq, opts ...grpc.CallOption) (*ChangeStreamerCoinResp, error)
	ListStreamerCoinDetail(ctx context.Context, in *ListStreamerCoinDetailReq, opts ...grpc.CallOption) (*ListStreamerCoinDetailResp, error)
	// ---------------Union工会资产---------------
	// 余额 money --
	GetUnionMoney(ctx context.Context, in *GetUnionMoneyReq, opts ...grpc.CallOption) (*GetUnionMoneyResp, error)
	GetUnionMoneyMulti(ctx context.Context, in *GetUnionMoneyMultiReq, opts ...grpc.CallOption) (*GetUnionMoneyMultiResp, error)
	IncrUnionMoney(ctx context.Context, in *IncrUnionMoneyReq, opts ...grpc.CallOption) (*ChangeUnionMoneyResp, error)
	DecrUnionMoney(ctx context.Context, in *DecrUnionMoneyReq, opts ...grpc.CallOption) (*ChangeUnionMoneyResp, error)
	ListUnionMoneyDetail(ctx context.Context, in *ListUnionMoneyDetailReq, opts ...grpc.CallOption) (*ListUnionMoneyDetailResp, error)
	// 虚拟币coin
	GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...grpc.CallOption) (*GetUnionCoinResp, error)
	GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...grpc.CallOption) (*GetUnionCoinMultiResp, error)
	IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error)
	DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error)
	ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...grpc.CallOption) (*ListUnionCoinDetailResp, error)
	// 虚拟币coin
	GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...grpc.CallOption) (*GetMerchantCoinResp, error)
	GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...grpc.CallOption) (*GetMerchantCoinMultiResp, error)
	IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error)
	DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error)
	ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...grpc.CallOption) (*ListMerchantCoinDetailResp, error)
}

type assetClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetClient(cc grpc.ClientConnInterface) AssetClient {
	return &assetClient{cc}
}

func (c *assetClient) GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error) {
	out := new(GetUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_GetUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...grpc.CallOption) (*GetUserMoneyMultiResp, error) {
	out := new(GetUserMoneyMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUserMoneyMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error) {
	out := new(ChangeUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_IncrUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error) {
	out := new(ChangeUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_DecrUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...grpc.CallOption) (*ListUserMoneyDetailResp, error) {
	out := new(ListUserMoneyDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUserMoneyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error) {
	out := new(GetUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...grpc.CallOption) (*GetUserCoinMultiResp, error) {
	out := new(GetUserCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUserCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error) {
	out := new(ChangeUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error) {
	out := new(ChangeUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...grpc.CallOption) (*ListUserCoinDetailResp, error) {
	out := new(ListUserCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUserCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetStreamerMoney(ctx context.Context, in *GetStreamerMoneyReq, opts ...grpc.CallOption) (*GetStreamerMoneyResp, error) {
	out := new(GetStreamerMoneyResp)
	err := c.cc.Invoke(ctx, Asset_GetStreamerMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetStreamerMoneyMulti(ctx context.Context, in *GetStreamerMoneyMultiReq, opts ...grpc.CallOption) (*GetStreamerMoneyMultiResp, error) {
	out := new(GetStreamerMoneyMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetStreamerMoneyMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrStreamerMoney(ctx context.Context, in *IncrStreamerMoneyReq, opts ...grpc.CallOption) (*ChangeStreamerMoneyResp, error) {
	out := new(ChangeStreamerMoneyResp)
	err := c.cc.Invoke(ctx, Asset_IncrStreamerMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrStreamerMoney(ctx context.Context, in *DecrStreamerMoneyReq, opts ...grpc.CallOption) (*ChangeStreamerMoneyResp, error) {
	out := new(ChangeStreamerMoneyResp)
	err := c.cc.Invoke(ctx, Asset_DecrStreamerMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListStreamerMoneyDetail(ctx context.Context, in *ListStreamerMoneyDetailReq, opts ...grpc.CallOption) (*ListStreamerMoneyDetailResp, error) {
	out := new(ListStreamerMoneyDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListStreamerMoneyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetStreamerCoin(ctx context.Context, in *GetStreamerCoinReq, opts ...grpc.CallOption) (*GetStreamerCoinResp, error) {
	out := new(GetStreamerCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetStreamerCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetStreamerCoinMulti(ctx context.Context, in *GetStreamerCoinMultiReq, opts ...grpc.CallOption) (*GetStreamerCoinMultiResp, error) {
	out := new(GetStreamerCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetStreamerCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrStreamerCoin(ctx context.Context, in *IncrStreamerCoinReq, opts ...grpc.CallOption) (*ChangeStreamerCoinResp, error) {
	out := new(ChangeStreamerCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrStreamerCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrStreamerCoin(ctx context.Context, in *DecrStreamerCoinReq, opts ...grpc.CallOption) (*ChangeStreamerCoinResp, error) {
	out := new(ChangeStreamerCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrStreamerCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListStreamerCoinDetail(ctx context.Context, in *ListStreamerCoinDetailReq, opts ...grpc.CallOption) (*ListStreamerCoinDetailResp, error) {
	out := new(ListStreamerCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListStreamerCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionMoney(ctx context.Context, in *GetUnionMoneyReq, opts ...grpc.CallOption) (*GetUnionMoneyResp, error) {
	out := new(GetUnionMoneyResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionMoneyMulti(ctx context.Context, in *GetUnionMoneyMultiReq, opts ...grpc.CallOption) (*GetUnionMoneyMultiResp, error) {
	out := new(GetUnionMoneyMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionMoneyMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUnionMoney(ctx context.Context, in *IncrUnionMoneyReq, opts ...grpc.CallOption) (*ChangeUnionMoneyResp, error) {
	out := new(ChangeUnionMoneyResp)
	err := c.cc.Invoke(ctx, Asset_IncrUnionMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUnionMoney(ctx context.Context, in *DecrUnionMoneyReq, opts ...grpc.CallOption) (*ChangeUnionMoneyResp, error) {
	out := new(ChangeUnionMoneyResp)
	err := c.cc.Invoke(ctx, Asset_DecrUnionMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUnionMoneyDetail(ctx context.Context, in *ListUnionMoneyDetailReq, opts ...grpc.CallOption) (*ListUnionMoneyDetailResp, error) {
	out := new(ListUnionMoneyDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUnionMoneyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...grpc.CallOption) (*GetUnionCoinResp, error) {
	out := new(GetUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...grpc.CallOption) (*GetUnionCoinMultiResp, error) {
	out := new(GetUnionCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error) {
	out := new(ChangeUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error) {
	out := new(ChangeUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...grpc.CallOption) (*ListUnionCoinDetailResp, error) {
	out := new(ListUnionCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUnionCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...grpc.CallOption) (*GetMerchantCoinResp, error) {
	out := new(GetMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...grpc.CallOption) (*GetMerchantCoinMultiResp, error) {
	out := new(GetMerchantCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error) {
	out := new(ChangeMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error) {
	out := new(ChangeMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...grpc.CallOption) (*ListMerchantCoinDetailResp, error) {
	out := new(ListMerchantCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListMerchantCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServer is the server API for Asset service.
// All implementations must embed UnimplementedAssetServer
// for forward compatibility
type AssetServer interface {
	// 余额 money
	GetUserMoney(context.Context, *GetUserMoneyReq) (*GetUserMoneyResp, error)
	GetUserMoneyMulti(context.Context, *GetUserMoneyMultiReq) (*GetUserMoneyMultiResp, error)
	IncrUserMoney(context.Context, *IncrUserMoneyReq) (*ChangeUserMoneyResp, error)
	DecrUserMoney(context.Context, *DecrUserMoneyReq) (*ChangeUserMoneyResp, error)
	ListUserMoneyDetail(context.Context, *ListUserMoneyDetailReq) (*ListUserMoneyDetailResp, error)
	// 虚拟币coin
	GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error)
	GetUserCoinMulti(context.Context, *GetUserCoinMultiReq) (*GetUserCoinMultiResp, error)
	IncrUserCoin(context.Context, *IncrUserCoinReq) (*ChangeUserCoinResp, error)
	DecrUserCoin(context.Context, *DecrUserCoinReq) (*ChangeUserCoinResp, error)
	ListUserCoinDetail(context.Context, *ListUserCoinDetailReq) (*ListUserCoinDetailResp, error)
	// ---------------Streamer主播资产---------------
	// 余额 money
	GetStreamerMoney(context.Context, *GetStreamerMoneyReq) (*GetStreamerMoneyResp, error)
	GetStreamerMoneyMulti(context.Context, *GetStreamerMoneyMultiReq) (*GetStreamerMoneyMultiResp, error)
	IncrStreamerMoney(context.Context, *IncrStreamerMoneyReq) (*ChangeStreamerMoneyResp, error)
	DecrStreamerMoney(context.Context, *DecrStreamerMoneyReq) (*ChangeStreamerMoneyResp, error)
	ListStreamerMoneyDetail(context.Context, *ListStreamerMoneyDetailReq) (*ListStreamerMoneyDetailResp, error)
	// 虚拟币coin
	GetStreamerCoin(context.Context, *GetStreamerCoinReq) (*GetStreamerCoinResp, error)
	GetStreamerCoinMulti(context.Context, *GetStreamerCoinMultiReq) (*GetStreamerCoinMultiResp, error)
	IncrStreamerCoin(context.Context, *IncrStreamerCoinReq) (*ChangeStreamerCoinResp, error)
	DecrStreamerCoin(context.Context, *DecrStreamerCoinReq) (*ChangeStreamerCoinResp, error)
	ListStreamerCoinDetail(context.Context, *ListStreamerCoinDetailReq) (*ListStreamerCoinDetailResp, error)
	// ---------------Union工会资产---------------
	// 余额 money --
	GetUnionMoney(context.Context, *GetUnionMoneyReq) (*GetUnionMoneyResp, error)
	GetUnionMoneyMulti(context.Context, *GetUnionMoneyMultiReq) (*GetUnionMoneyMultiResp, error)
	IncrUnionMoney(context.Context, *IncrUnionMoneyReq) (*ChangeUnionMoneyResp, error)
	DecrUnionMoney(context.Context, *DecrUnionMoneyReq) (*ChangeUnionMoneyResp, error)
	ListUnionMoneyDetail(context.Context, *ListUnionMoneyDetailReq) (*ListUnionMoneyDetailResp, error)
	// 虚拟币coin
	GetUnionCoin(context.Context, *GetUnionCoinReq) (*GetUnionCoinResp, error)
	GetUnionCoinMulti(context.Context, *GetUnionCoinMultiReq) (*GetUnionCoinMultiResp, error)
	IncrUnionCoin(context.Context, *IncrUnionCoinReq) (*ChangeUnionCoinResp, error)
	DecrUnionCoin(context.Context, *DecrUnionCoinReq) (*ChangeUnionCoinResp, error)
	ListUnionCoinDetail(context.Context, *ListUnionCoinDetailReq) (*ListUnionCoinDetailResp, error)
	// 虚拟币coin
	GetMerchantCoin(context.Context, *GetMerchantCoinReq) (*GetMerchantCoinResp, error)
	GetMerchantCoinMulti(context.Context, *GetMerchantCoinMultiReq) (*GetMerchantCoinMultiResp, error)
	IncrMerchantCoin(context.Context, *IncrMerchantCoinReq) (*ChangeMerchantCoinResp, error)
	DecrMerchantCoin(context.Context, *DecrMerchantCoinReq) (*ChangeMerchantCoinResp, error)
	ListMerchantCoinDetail(context.Context, *ListMerchantCoinDetailReq) (*ListMerchantCoinDetailResp, error)
	mustEmbedUnimplementedAssetServer()
}

// UnimplementedAssetServer must be embedded to have forward compatible implementations.
type UnimplementedAssetServer struct {
}

func (UnimplementedAssetServer) GetUserMoney(context.Context, *GetUserMoneyReq) (*GetUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoney not implemented")
}
func (UnimplementedAssetServer) GetUserMoneyMulti(context.Context, *GetUserMoneyMultiReq) (*GetUserMoneyMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoneyMulti not implemented")
}
func (UnimplementedAssetServer) IncrUserMoney(context.Context, *IncrUserMoneyReq) (*ChangeUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUserMoney not implemented")
}
func (UnimplementedAssetServer) DecrUserMoney(context.Context, *DecrUserMoneyReq) (*ChangeUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUserMoney not implemented")
}
func (UnimplementedAssetServer) ListUserMoneyDetail(context.Context, *ListUserMoneyDetailReq) (*ListUserMoneyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMoneyDetail not implemented")
}
func (UnimplementedAssetServer) GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoin not implemented")
}
func (UnimplementedAssetServer) GetUserCoinMulti(context.Context, *GetUserCoinMultiReq) (*GetUserCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrUserCoin(context.Context, *IncrUserCoinReq) (*ChangeUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUserCoin not implemented")
}
func (UnimplementedAssetServer) DecrUserCoin(context.Context, *DecrUserCoinReq) (*ChangeUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUserCoin not implemented")
}
func (UnimplementedAssetServer) ListUserCoinDetail(context.Context, *ListUserCoinDetailReq) (*ListUserCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetStreamerMoney(context.Context, *GetStreamerMoneyReq) (*GetStreamerMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerMoney not implemented")
}
func (UnimplementedAssetServer) GetStreamerMoneyMulti(context.Context, *GetStreamerMoneyMultiReq) (*GetStreamerMoneyMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerMoneyMulti not implemented")
}
func (UnimplementedAssetServer) IncrStreamerMoney(context.Context, *IncrStreamerMoneyReq) (*ChangeStreamerMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrStreamerMoney not implemented")
}
func (UnimplementedAssetServer) DecrStreamerMoney(context.Context, *DecrStreamerMoneyReq) (*ChangeStreamerMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrStreamerMoney not implemented")
}
func (UnimplementedAssetServer) ListStreamerMoneyDetail(context.Context, *ListStreamerMoneyDetailReq) (*ListStreamerMoneyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamerMoneyDetail not implemented")
}
func (UnimplementedAssetServer) GetStreamerCoin(context.Context, *GetStreamerCoinReq) (*GetStreamerCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerCoin not implemented")
}
func (UnimplementedAssetServer) GetStreamerCoinMulti(context.Context, *GetStreamerCoinMultiReq) (*GetStreamerCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrStreamerCoin(context.Context, *IncrStreamerCoinReq) (*ChangeStreamerCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrStreamerCoin not implemented")
}
func (UnimplementedAssetServer) DecrStreamerCoin(context.Context, *DecrStreamerCoinReq) (*ChangeStreamerCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrStreamerCoin not implemented")
}
func (UnimplementedAssetServer) ListStreamerCoinDetail(context.Context, *ListStreamerCoinDetailReq) (*ListStreamerCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamerCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetUnionMoney(context.Context, *GetUnionMoneyReq) (*GetUnionMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionMoney not implemented")
}
func (UnimplementedAssetServer) GetUnionMoneyMulti(context.Context, *GetUnionMoneyMultiReq) (*GetUnionMoneyMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionMoneyMulti not implemented")
}
func (UnimplementedAssetServer) IncrUnionMoney(context.Context, *IncrUnionMoneyReq) (*ChangeUnionMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUnionMoney not implemented")
}
func (UnimplementedAssetServer) DecrUnionMoney(context.Context, *DecrUnionMoneyReq) (*ChangeUnionMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUnionMoney not implemented")
}
func (UnimplementedAssetServer) ListUnionMoneyDetail(context.Context, *ListUnionMoneyDetailReq) (*ListUnionMoneyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnionMoneyDetail not implemented")
}
func (UnimplementedAssetServer) GetUnionCoin(context.Context, *GetUnionCoinReq) (*GetUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionCoin not implemented")
}
func (UnimplementedAssetServer) GetUnionCoinMulti(context.Context, *GetUnionCoinMultiReq) (*GetUnionCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrUnionCoin(context.Context, *IncrUnionCoinReq) (*ChangeUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUnionCoin not implemented")
}
func (UnimplementedAssetServer) DecrUnionCoin(context.Context, *DecrUnionCoinReq) (*ChangeUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUnionCoin not implemented")
}
func (UnimplementedAssetServer) ListUnionCoinDetail(context.Context, *ListUnionCoinDetailReq) (*ListUnionCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnionCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetMerchantCoin(context.Context, *GetMerchantCoinReq) (*GetMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCoin not implemented")
}
func (UnimplementedAssetServer) GetMerchantCoinMulti(context.Context, *GetMerchantCoinMultiReq) (*GetMerchantCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrMerchantCoin(context.Context, *IncrMerchantCoinReq) (*ChangeMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrMerchantCoin not implemented")
}
func (UnimplementedAssetServer) DecrMerchantCoin(context.Context, *DecrMerchantCoinReq) (*ChangeMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrMerchantCoin not implemented")
}
func (UnimplementedAssetServer) ListMerchantCoinDetail(context.Context, *ListMerchantCoinDetailReq) (*ListMerchantCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchantCoinDetail not implemented")
}
func (UnimplementedAssetServer) mustEmbedUnimplementedAssetServer() {}

// UnsafeAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServer will
// result in compilation errors.
type UnsafeAssetServer interface {
	mustEmbedUnimplementedAssetServer()
}

func RegisterAssetServer(s grpc.ServiceRegistrar, srv AssetServer) {
	s.RegisterService(&Asset_ServiceDesc, srv)
}

func _Asset_GetUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserMoney(ctx, req.(*GetUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserMoneyMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserMoneyMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserMoneyMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserMoneyMulti(ctx, req.(*GetUserMoneyMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUserMoney(ctx, req.(*IncrUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUserMoney(ctx, req.(*DecrUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUserMoneyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMoneyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUserMoneyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUserMoneyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUserMoneyDetail(ctx, req.(*ListUserMoneyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserCoin(ctx, req.(*GetUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserCoinMulti(ctx, req.(*GetUserCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUserCoin(ctx, req.(*IncrUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUserCoin(ctx, req.(*DecrUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUserCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUserCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUserCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUserCoinDetail(ctx, req.(*ListUserCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetStreamerMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetStreamerMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetStreamerMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetStreamerMoney(ctx, req.(*GetStreamerMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetStreamerMoneyMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerMoneyMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetStreamerMoneyMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetStreamerMoneyMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetStreamerMoneyMulti(ctx, req.(*GetStreamerMoneyMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrStreamerMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrStreamerMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrStreamerMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrStreamerMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrStreamerMoney(ctx, req.(*IncrStreamerMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrStreamerMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrStreamerMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrStreamerMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrStreamerMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrStreamerMoney(ctx, req.(*DecrStreamerMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListStreamerMoneyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamerMoneyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListStreamerMoneyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListStreamerMoneyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListStreamerMoneyDetail(ctx, req.(*ListStreamerMoneyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetStreamerCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetStreamerCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetStreamerCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetStreamerCoin(ctx, req.(*GetStreamerCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetStreamerCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamerCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetStreamerCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetStreamerCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetStreamerCoinMulti(ctx, req.(*GetStreamerCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrStreamerCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrStreamerCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrStreamerCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrStreamerCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrStreamerCoin(ctx, req.(*IncrStreamerCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrStreamerCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrStreamerCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrStreamerCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrStreamerCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrStreamerCoin(ctx, req.(*DecrStreamerCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListStreamerCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamerCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListStreamerCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListStreamerCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListStreamerCoinDetail(ctx, req.(*ListStreamerCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionMoney(ctx, req.(*GetUnionMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionMoneyMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionMoneyMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionMoneyMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionMoneyMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionMoneyMulti(ctx, req.(*GetUnionMoneyMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUnionMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUnionMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUnionMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUnionMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUnionMoney(ctx, req.(*IncrUnionMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUnionMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUnionMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUnionMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUnionMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUnionMoney(ctx, req.(*DecrUnionMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUnionMoneyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnionMoneyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUnionMoneyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUnionMoneyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUnionMoneyDetail(ctx, req.(*ListUnionMoneyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionCoin(ctx, req.(*GetUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionCoinMulti(ctx, req.(*GetUnionCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUnionCoin(ctx, req.(*IncrUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUnionCoin(ctx, req.(*DecrUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUnionCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnionCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUnionCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUnionCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUnionCoinDetail(ctx, req.(*ListUnionCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantCoin(ctx, req.(*GetMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantCoinMulti(ctx, req.(*GetMerchantCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrMerchantCoin(ctx, req.(*IncrMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrMerchantCoin(ctx, req.(*DecrMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListMerchantCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListMerchantCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListMerchantCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListMerchantCoinDetail(ctx, req.(*ListMerchantCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Asset_ServiceDesc is the grpc.ServiceDesc for Asset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.asset.Asset",
	HandlerType: (*AssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserMoney",
			Handler:    _Asset_GetUserMoney_Handler,
		},
		{
			MethodName: "GetUserMoneyMulti",
			Handler:    _Asset_GetUserMoneyMulti_Handler,
		},
		{
			MethodName: "IncrUserMoney",
			Handler:    _Asset_IncrUserMoney_Handler,
		},
		{
			MethodName: "DecrUserMoney",
			Handler:    _Asset_DecrUserMoney_Handler,
		},
		{
			MethodName: "ListUserMoneyDetail",
			Handler:    _Asset_ListUserMoneyDetail_Handler,
		},
		{
			MethodName: "GetUserCoin",
			Handler:    _Asset_GetUserCoin_Handler,
		},
		{
			MethodName: "GetUserCoinMulti",
			Handler:    _Asset_GetUserCoinMulti_Handler,
		},
		{
			MethodName: "IncrUserCoin",
			Handler:    _Asset_IncrUserCoin_Handler,
		},
		{
			MethodName: "DecrUserCoin",
			Handler:    _Asset_DecrUserCoin_Handler,
		},
		{
			MethodName: "ListUserCoinDetail",
			Handler:    _Asset_ListUserCoinDetail_Handler,
		},
		{
			MethodName: "GetStreamerMoney",
			Handler:    _Asset_GetStreamerMoney_Handler,
		},
		{
			MethodName: "GetStreamerMoneyMulti",
			Handler:    _Asset_GetStreamerMoneyMulti_Handler,
		},
		{
			MethodName: "IncrStreamerMoney",
			Handler:    _Asset_IncrStreamerMoney_Handler,
		},
		{
			MethodName: "DecrStreamerMoney",
			Handler:    _Asset_DecrStreamerMoney_Handler,
		},
		{
			MethodName: "ListStreamerMoneyDetail",
			Handler:    _Asset_ListStreamerMoneyDetail_Handler,
		},
		{
			MethodName: "GetStreamerCoin",
			Handler:    _Asset_GetStreamerCoin_Handler,
		},
		{
			MethodName: "GetStreamerCoinMulti",
			Handler:    _Asset_GetStreamerCoinMulti_Handler,
		},
		{
			MethodName: "IncrStreamerCoin",
			Handler:    _Asset_IncrStreamerCoin_Handler,
		},
		{
			MethodName: "DecrStreamerCoin",
			Handler:    _Asset_DecrStreamerCoin_Handler,
		},
		{
			MethodName: "ListStreamerCoinDetail",
			Handler:    _Asset_ListStreamerCoinDetail_Handler,
		},
		{
			MethodName: "GetUnionMoney",
			Handler:    _Asset_GetUnionMoney_Handler,
		},
		{
			MethodName: "GetUnionMoneyMulti",
			Handler:    _Asset_GetUnionMoneyMulti_Handler,
		},
		{
			MethodName: "IncrUnionMoney",
			Handler:    _Asset_IncrUnionMoney_Handler,
		},
		{
			MethodName: "DecrUnionMoney",
			Handler:    _Asset_DecrUnionMoney_Handler,
		},
		{
			MethodName: "ListUnionMoneyDetail",
			Handler:    _Asset_ListUnionMoneyDetail_Handler,
		},
		{
			MethodName: "GetUnionCoin",
			Handler:    _Asset_GetUnionCoin_Handler,
		},
		{
			MethodName: "GetUnionCoinMulti",
			Handler:    _Asset_GetUnionCoinMulti_Handler,
		},
		{
			MethodName: "IncrUnionCoin",
			Handler:    _Asset_IncrUnionCoin_Handler,
		},
		{
			MethodName: "DecrUnionCoin",
			Handler:    _Asset_DecrUnionCoin_Handler,
		},
		{
			MethodName: "ListUnionCoinDetail",
			Handler:    _Asset_ListUnionCoinDetail_Handler,
		},
		{
			MethodName: "GetMerchantCoin",
			Handler:    _Asset_GetMerchantCoin_Handler,
		},
		{
			MethodName: "GetMerchantCoinMulti",
			Handler:    _Asset_GetMerchantCoinMulti_Handler,
		},
		{
			MethodName: "IncrMerchantCoin",
			Handler:    _Asset_IncrMerchantCoin_Handler,
		},
		{
			MethodName: "DecrMerchantCoin",
			Handler:    _Asset_DecrMerchantCoin_Handler,
		},
		{
			MethodName: "ListMerchantCoinDetail",
			Handler:    _Asset_ListMerchantCoinDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.asset/asset.proto",
}
