// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: svc.biz.asset/asset.proto

package asset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Asset_GetUserMoney_FullMethodName            = "/svc.biz.asset.Asset/GetUserMoney"
	Asset_GetUserMoneyMulti_FullMethodName       = "/svc.biz.asset.Asset/GetUserMoneyMulti"
	Asset_IncrUserMoney_FullMethodName           = "/svc.biz.asset.Asset/IncrUserMoney"
	Asset_DecrUserMoney_FullMethodName           = "/svc.biz.asset.Asset/DecrUserMoney"
	Asset_ListUserMoneyDetail_FullMethodName     = "/svc.biz.asset.Asset/ListUserMoneyDetail"
	Asset_GetUserCoin_FullMethodName             = "/svc.biz.asset.Asset/GetUserCoin"
	Asset_GetUserCoinMulti_FullMethodName        = "/svc.biz.asset.Asset/GetUserCoinMulti"
	Asset_IncrUserCoin_FullMethodName            = "/svc.biz.asset.Asset/IncrUserCoin"
	Asset_DecrUserCoin_FullMethodName            = "/svc.biz.asset.Asset/DecrUserCoin"
	Asset_ListUserCoinDetail_FullMethodName      = "/svc.biz.asset.Asset/ListUserCoinDetail"
	Asset_GetAnchorCoin_FullMethodName           = "/svc.biz.asset.Asset/GetAnchorCoin"
	Asset_GetAnchorCoinMulti_FullMethodName      = "/svc.biz.asset.Asset/GetAnchorCoinMulti"
	Asset_IncrAnchorCoin_FullMethodName          = "/svc.biz.asset.Asset/IncrAnchorCoin"
	Asset_DecrAnchorCoin_FullMethodName          = "/svc.biz.asset.Asset/DecrAnchorCoin"
	Asset_ListAnchorCoinDetail_FullMethodName    = "/svc.biz.asset.Asset/ListAnchorCoinDetail"
	Asset_GetUnionCoin_FullMethodName            = "/svc.biz.asset.Asset/GetUnionCoin"
	Asset_GetUnionCoinMulti_FullMethodName       = "/svc.biz.asset.Asset/GetUnionCoinMulti"
	Asset_IncrUnionCoin_FullMethodName           = "/svc.biz.asset.Asset/IncrUnionCoin"
	Asset_DecrUnionCoin_FullMethodName           = "/svc.biz.asset.Asset/DecrUnionCoin"
	Asset_ListUnionCoinDetail_FullMethodName     = "/svc.biz.asset.Asset/ListUnionCoinDetail"
	Asset_GetMerchantMoney_FullMethodName        = "/svc.biz.asset.Asset/GetMerchantMoney"
	Asset_GetMerchantMoneyMulti_FullMethodName   = "/svc.biz.asset.Asset/GetMerchantMoneyMulti"
	Asset_IncrMerchantMoney_FullMethodName       = "/svc.biz.asset.Asset/IncrMerchantMoney"
	Asset_DecrMerchantMoney_FullMethodName       = "/svc.biz.asset.Asset/DecrMerchantMoney"
	Asset_ListMerchantMoneyDetail_FullMethodName = "/svc.biz.asset.Asset/ListMerchantMoneyDetail"
	Asset_GetMerchantCoin_FullMethodName         = "/svc.biz.asset.Asset/GetMerchantCoin"
	Asset_GetMerchantCoinMulti_FullMethodName    = "/svc.biz.asset.Asset/GetMerchantCoinMulti"
	Asset_IncrMerchantCoin_FullMethodName        = "/svc.biz.asset.Asset/IncrMerchantCoin"
	Asset_DecrMerchantCoin_FullMethodName        = "/svc.biz.asset.Asset/DecrMerchantCoin"
	Asset_ListMerchantCoinDetail_FullMethodName  = "/svc.biz.asset.Asset/ListMerchantCoinDetail"
)

// AssetClient is the client API for Asset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetClient interface {
	// 余额 money
	GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error)
	GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...grpc.CallOption) (*GetUserMoneyMultiResp, error)
	IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error)
	DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error)
	ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...grpc.CallOption) (*ListUserMoneyDetailResp, error)
	// 虚拟币coin
	GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error)
	GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...grpc.CallOption) (*GetUserCoinMultiResp, error)
	IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error)
	DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error)
	ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...grpc.CallOption) (*ListUserCoinDetailResp, error)
	// 虚拟币coin
	GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, opts ...grpc.CallOption) (*GetAnchorCoinResp, error)
	GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, opts ...grpc.CallOption) (*GetAnchorCoinMultiResp, error)
	IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, opts ...grpc.CallOption) (*ChangeAnchorCoinResp, error)
	DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, opts ...grpc.CallOption) (*ChangeAnchorCoinResp, error)
	ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, opts ...grpc.CallOption) (*ListAnchorCoinDetailResp, error)
	// 虚拟币coin
	GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...grpc.CallOption) (*GetUnionCoinResp, error)
	GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...grpc.CallOption) (*GetUnionCoinMultiResp, error)
	IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error)
	DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error)
	ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...grpc.CallOption) (*ListUnionCoinDetailResp, error)
	// 余额 money
	GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, opts ...grpc.CallOption) (*GetMerchantMoneyResp, error)
	GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, opts ...grpc.CallOption) (*GetMerchantMoneyMultiResp, error)
	IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, opts ...grpc.CallOption) (*ChangeMerchantMoneyResp, error)
	DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, opts ...grpc.CallOption) (*ChangeMerchantMoneyResp, error)
	ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, opts ...grpc.CallOption) (*ListMerchantMoneyDetailResp, error)
	// 虚拟币coin
	GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...grpc.CallOption) (*GetMerchantCoinResp, error)
	GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...grpc.CallOption) (*GetMerchantCoinMultiResp, error)
	IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error)
	DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error)
	ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...grpc.CallOption) (*ListMerchantCoinDetailResp, error)
}

type assetClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetClient(cc grpc.ClientConnInterface) AssetClient {
	return &assetClient{cc}
}

func (c *assetClient) GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error) {
	out := new(GetUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_GetUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserMoneyMulti(ctx context.Context, in *GetUserMoneyMultiReq, opts ...grpc.CallOption) (*GetUserMoneyMultiResp, error) {
	out := new(GetUserMoneyMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUserMoneyMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUserMoney(ctx context.Context, in *IncrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error) {
	out := new(ChangeUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_IncrUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUserMoney(ctx context.Context, in *DecrUserMoneyReq, opts ...grpc.CallOption) (*ChangeUserMoneyResp, error) {
	out := new(ChangeUserMoneyResp)
	err := c.cc.Invoke(ctx, Asset_DecrUserMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUserMoneyDetail(ctx context.Context, in *ListUserMoneyDetailReq, opts ...grpc.CallOption) (*ListUserMoneyDetailResp, error) {
	out := new(ListUserMoneyDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUserMoneyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error) {
	out := new(GetUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUserCoinMulti(ctx context.Context, in *GetUserCoinMultiReq, opts ...grpc.CallOption) (*GetUserCoinMultiResp, error) {
	out := new(GetUserCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUserCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUserCoin(ctx context.Context, in *IncrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error) {
	out := new(ChangeUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUserCoin(ctx context.Context, in *DecrUserCoinReq, opts ...grpc.CallOption) (*ChangeUserCoinResp, error) {
	out := new(ChangeUserCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUserCoinDetail(ctx context.Context, in *ListUserCoinDetailReq, opts ...grpc.CallOption) (*ListUserCoinDetailResp, error) {
	out := new(ListUserCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUserCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetAnchorCoin(ctx context.Context, in *GetAnchorCoinReq, opts ...grpc.CallOption) (*GetAnchorCoinResp, error) {
	out := new(GetAnchorCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetAnchorCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetAnchorCoinMulti(ctx context.Context, in *GetAnchorCoinMultiReq, opts ...grpc.CallOption) (*GetAnchorCoinMultiResp, error) {
	out := new(GetAnchorCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetAnchorCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrAnchorCoin(ctx context.Context, in *IncrAnchorCoinReq, opts ...grpc.CallOption) (*ChangeAnchorCoinResp, error) {
	out := new(ChangeAnchorCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrAnchorCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrAnchorCoin(ctx context.Context, in *DecrAnchorCoinReq, opts ...grpc.CallOption) (*ChangeAnchorCoinResp, error) {
	out := new(ChangeAnchorCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrAnchorCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListAnchorCoinDetail(ctx context.Context, in *ListAnchorCoinDetailReq, opts ...grpc.CallOption) (*ListAnchorCoinDetailResp, error) {
	out := new(ListAnchorCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListAnchorCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionCoin(ctx context.Context, in *GetUnionCoinReq, opts ...grpc.CallOption) (*GetUnionCoinResp, error) {
	out := new(GetUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetUnionCoinMulti(ctx context.Context, in *GetUnionCoinMultiReq, opts ...grpc.CallOption) (*GetUnionCoinMultiResp, error) {
	out := new(GetUnionCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetUnionCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrUnionCoin(ctx context.Context, in *IncrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error) {
	out := new(ChangeUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrUnionCoin(ctx context.Context, in *DecrUnionCoinReq, opts ...grpc.CallOption) (*ChangeUnionCoinResp, error) {
	out := new(ChangeUnionCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrUnionCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListUnionCoinDetail(ctx context.Context, in *ListUnionCoinDetailReq, opts ...grpc.CallOption) (*ListUnionCoinDetailResp, error) {
	out := new(ListUnionCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListUnionCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantMoney(ctx context.Context, in *GetMerchantMoneyReq, opts ...grpc.CallOption) (*GetMerchantMoneyResp, error) {
	out := new(GetMerchantMoneyResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantMoneyMulti(ctx context.Context, in *GetMerchantMoneyMultiReq, opts ...grpc.CallOption) (*GetMerchantMoneyMultiResp, error) {
	out := new(GetMerchantMoneyMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantMoneyMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrMerchantMoney(ctx context.Context, in *IncrMerchantMoneyReq, opts ...grpc.CallOption) (*ChangeMerchantMoneyResp, error) {
	out := new(ChangeMerchantMoneyResp)
	err := c.cc.Invoke(ctx, Asset_IncrMerchantMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrMerchantMoney(ctx context.Context, in *DecrMerchantMoneyReq, opts ...grpc.CallOption) (*ChangeMerchantMoneyResp, error) {
	out := new(ChangeMerchantMoneyResp)
	err := c.cc.Invoke(ctx, Asset_DecrMerchantMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListMerchantMoneyDetail(ctx context.Context, in *ListMerchantMoneyDetailReq, opts ...grpc.CallOption) (*ListMerchantMoneyDetailResp, error) {
	out := new(ListMerchantMoneyDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListMerchantMoneyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantCoin(ctx context.Context, in *GetMerchantCoinReq, opts ...grpc.CallOption) (*GetMerchantCoinResp, error) {
	out := new(GetMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) GetMerchantCoinMulti(ctx context.Context, in *GetMerchantCoinMultiReq, opts ...grpc.CallOption) (*GetMerchantCoinMultiResp, error) {
	out := new(GetMerchantCoinMultiResp)
	err := c.cc.Invoke(ctx, Asset_GetMerchantCoinMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) IncrMerchantCoin(ctx context.Context, in *IncrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error) {
	out := new(ChangeMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_IncrMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) DecrMerchantCoin(ctx context.Context, in *DecrMerchantCoinReq, opts ...grpc.CallOption) (*ChangeMerchantCoinResp, error) {
	out := new(ChangeMerchantCoinResp)
	err := c.cc.Invoke(ctx, Asset_DecrMerchantCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) ListMerchantCoinDetail(ctx context.Context, in *ListMerchantCoinDetailReq, opts ...grpc.CallOption) (*ListMerchantCoinDetailResp, error) {
	out := new(ListMerchantCoinDetailResp)
	err := c.cc.Invoke(ctx, Asset_ListMerchantCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServer is the server API for Asset service.
// All implementations must embed UnimplementedAssetServer
// for forward compatibility
type AssetServer interface {
	// 余额 money
	GetUserMoney(context.Context, *GetUserMoneyReq) (*GetUserMoneyResp, error)
	GetUserMoneyMulti(context.Context, *GetUserMoneyMultiReq) (*GetUserMoneyMultiResp, error)
	IncrUserMoney(context.Context, *IncrUserMoneyReq) (*ChangeUserMoneyResp, error)
	DecrUserMoney(context.Context, *DecrUserMoneyReq) (*ChangeUserMoneyResp, error)
	ListUserMoneyDetail(context.Context, *ListUserMoneyDetailReq) (*ListUserMoneyDetailResp, error)
	// 虚拟币coin
	GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error)
	GetUserCoinMulti(context.Context, *GetUserCoinMultiReq) (*GetUserCoinMultiResp, error)
	IncrUserCoin(context.Context, *IncrUserCoinReq) (*ChangeUserCoinResp, error)
	DecrUserCoin(context.Context, *DecrUserCoinReq) (*ChangeUserCoinResp, error)
	ListUserCoinDetail(context.Context, *ListUserCoinDetailReq) (*ListUserCoinDetailResp, error)
	// 虚拟币coin
	GetAnchorCoin(context.Context, *GetAnchorCoinReq) (*GetAnchorCoinResp, error)
	GetAnchorCoinMulti(context.Context, *GetAnchorCoinMultiReq) (*GetAnchorCoinMultiResp, error)
	IncrAnchorCoin(context.Context, *IncrAnchorCoinReq) (*ChangeAnchorCoinResp, error)
	DecrAnchorCoin(context.Context, *DecrAnchorCoinReq) (*ChangeAnchorCoinResp, error)
	ListAnchorCoinDetail(context.Context, *ListAnchorCoinDetailReq) (*ListAnchorCoinDetailResp, error)
	// 虚拟币coin
	GetUnionCoin(context.Context, *GetUnionCoinReq) (*GetUnionCoinResp, error)
	GetUnionCoinMulti(context.Context, *GetUnionCoinMultiReq) (*GetUnionCoinMultiResp, error)
	IncrUnionCoin(context.Context, *IncrUnionCoinReq) (*ChangeUnionCoinResp, error)
	DecrUnionCoin(context.Context, *DecrUnionCoinReq) (*ChangeUnionCoinResp, error)
	ListUnionCoinDetail(context.Context, *ListUnionCoinDetailReq) (*ListUnionCoinDetailResp, error)
	// 余额 money
	GetMerchantMoney(context.Context, *GetMerchantMoneyReq) (*GetMerchantMoneyResp, error)
	GetMerchantMoneyMulti(context.Context, *GetMerchantMoneyMultiReq) (*GetMerchantMoneyMultiResp, error)
	IncrMerchantMoney(context.Context, *IncrMerchantMoneyReq) (*ChangeMerchantMoneyResp, error)
	DecrMerchantMoney(context.Context, *DecrMerchantMoneyReq) (*ChangeMerchantMoneyResp, error)
	ListMerchantMoneyDetail(context.Context, *ListMerchantMoneyDetailReq) (*ListMerchantMoneyDetailResp, error)
	// 虚拟币coin
	GetMerchantCoin(context.Context, *GetMerchantCoinReq) (*GetMerchantCoinResp, error)
	GetMerchantCoinMulti(context.Context, *GetMerchantCoinMultiReq) (*GetMerchantCoinMultiResp, error)
	IncrMerchantCoin(context.Context, *IncrMerchantCoinReq) (*ChangeMerchantCoinResp, error)
	DecrMerchantCoin(context.Context, *DecrMerchantCoinReq) (*ChangeMerchantCoinResp, error)
	ListMerchantCoinDetail(context.Context, *ListMerchantCoinDetailReq) (*ListMerchantCoinDetailResp, error)
	mustEmbedUnimplementedAssetServer()
}

// UnimplementedAssetServer must be embedded to have forward compatible implementations.
type UnimplementedAssetServer struct {
}

func (UnimplementedAssetServer) GetUserMoney(context.Context, *GetUserMoneyReq) (*GetUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoney not implemented")
}
func (UnimplementedAssetServer) GetUserMoneyMulti(context.Context, *GetUserMoneyMultiReq) (*GetUserMoneyMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoneyMulti not implemented")
}
func (UnimplementedAssetServer) IncrUserMoney(context.Context, *IncrUserMoneyReq) (*ChangeUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUserMoney not implemented")
}
func (UnimplementedAssetServer) DecrUserMoney(context.Context, *DecrUserMoneyReq) (*ChangeUserMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUserMoney not implemented")
}
func (UnimplementedAssetServer) ListUserMoneyDetail(context.Context, *ListUserMoneyDetailReq) (*ListUserMoneyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMoneyDetail not implemented")
}
func (UnimplementedAssetServer) GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoin not implemented")
}
func (UnimplementedAssetServer) GetUserCoinMulti(context.Context, *GetUserCoinMultiReq) (*GetUserCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrUserCoin(context.Context, *IncrUserCoinReq) (*ChangeUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUserCoin not implemented")
}
func (UnimplementedAssetServer) DecrUserCoin(context.Context, *DecrUserCoinReq) (*ChangeUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUserCoin not implemented")
}
func (UnimplementedAssetServer) ListUserCoinDetail(context.Context, *ListUserCoinDetailReq) (*ListUserCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetAnchorCoin(context.Context, *GetAnchorCoinReq) (*GetAnchorCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnchorCoin not implemented")
}
func (UnimplementedAssetServer) GetAnchorCoinMulti(context.Context, *GetAnchorCoinMultiReq) (*GetAnchorCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnchorCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrAnchorCoin(context.Context, *IncrAnchorCoinReq) (*ChangeAnchorCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrAnchorCoin not implemented")
}
func (UnimplementedAssetServer) DecrAnchorCoin(context.Context, *DecrAnchorCoinReq) (*ChangeAnchorCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrAnchorCoin not implemented")
}
func (UnimplementedAssetServer) ListAnchorCoinDetail(context.Context, *ListAnchorCoinDetailReq) (*ListAnchorCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnchorCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetUnionCoin(context.Context, *GetUnionCoinReq) (*GetUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionCoin not implemented")
}
func (UnimplementedAssetServer) GetUnionCoinMulti(context.Context, *GetUnionCoinMultiReq) (*GetUnionCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnionCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrUnionCoin(context.Context, *IncrUnionCoinReq) (*ChangeUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrUnionCoin not implemented")
}
func (UnimplementedAssetServer) DecrUnionCoin(context.Context, *DecrUnionCoinReq) (*ChangeUnionCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrUnionCoin not implemented")
}
func (UnimplementedAssetServer) ListUnionCoinDetail(context.Context, *ListUnionCoinDetailReq) (*ListUnionCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnionCoinDetail not implemented")
}
func (UnimplementedAssetServer) GetMerchantMoney(context.Context, *GetMerchantMoneyReq) (*GetMerchantMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantMoney not implemented")
}
func (UnimplementedAssetServer) GetMerchantMoneyMulti(context.Context, *GetMerchantMoneyMultiReq) (*GetMerchantMoneyMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantMoneyMulti not implemented")
}
func (UnimplementedAssetServer) IncrMerchantMoney(context.Context, *IncrMerchantMoneyReq) (*ChangeMerchantMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrMerchantMoney not implemented")
}
func (UnimplementedAssetServer) DecrMerchantMoney(context.Context, *DecrMerchantMoneyReq) (*ChangeMerchantMoneyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrMerchantMoney not implemented")
}
func (UnimplementedAssetServer) ListMerchantMoneyDetail(context.Context, *ListMerchantMoneyDetailReq) (*ListMerchantMoneyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchantMoneyDetail not implemented")
}
func (UnimplementedAssetServer) GetMerchantCoin(context.Context, *GetMerchantCoinReq) (*GetMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCoin not implemented")
}
func (UnimplementedAssetServer) GetMerchantCoinMulti(context.Context, *GetMerchantCoinMultiReq) (*GetMerchantCoinMultiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCoinMulti not implemented")
}
func (UnimplementedAssetServer) IncrMerchantCoin(context.Context, *IncrMerchantCoinReq) (*ChangeMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrMerchantCoin not implemented")
}
func (UnimplementedAssetServer) DecrMerchantCoin(context.Context, *DecrMerchantCoinReq) (*ChangeMerchantCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrMerchantCoin not implemented")
}
func (UnimplementedAssetServer) ListMerchantCoinDetail(context.Context, *ListMerchantCoinDetailReq) (*ListMerchantCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchantCoinDetail not implemented")
}
func (UnimplementedAssetServer) mustEmbedUnimplementedAssetServer() {}

// UnsafeAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServer will
// result in compilation errors.
type UnsafeAssetServer interface {
	mustEmbedUnimplementedAssetServer()
}

func RegisterAssetServer(s grpc.ServiceRegistrar, srv AssetServer) {
	s.RegisterService(&Asset_ServiceDesc, srv)
}

func _Asset_GetUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserMoney(ctx, req.(*GetUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserMoneyMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserMoneyMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserMoneyMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserMoneyMulti(ctx, req.(*GetUserMoneyMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUserMoney(ctx, req.(*IncrUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUserMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUserMoney(ctx, req.(*DecrUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUserMoneyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMoneyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUserMoneyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUserMoneyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUserMoneyDetail(ctx, req.(*ListUserMoneyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserCoin(ctx, req.(*GetUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUserCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUserCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUserCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUserCoinMulti(ctx, req.(*GetUserCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUserCoin(ctx, req.(*IncrUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUserCoin(ctx, req.(*DecrUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUserCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUserCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUserCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUserCoinDetail(ctx, req.(*ListUserCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetAnchorCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnchorCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetAnchorCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetAnchorCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetAnchorCoin(ctx, req.(*GetAnchorCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetAnchorCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnchorCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetAnchorCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetAnchorCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetAnchorCoinMulti(ctx, req.(*GetAnchorCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrAnchorCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrAnchorCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrAnchorCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrAnchorCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrAnchorCoin(ctx, req.(*IncrAnchorCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrAnchorCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrAnchorCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrAnchorCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrAnchorCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrAnchorCoin(ctx, req.(*DecrAnchorCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListAnchorCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnchorCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListAnchorCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListAnchorCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListAnchorCoinDetail(ctx, req.(*ListAnchorCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionCoin(ctx, req.(*GetUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetUnionCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnionCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetUnionCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetUnionCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetUnionCoinMulti(ctx, req.(*GetUnionCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrUnionCoin(ctx, req.(*IncrUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrUnionCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrUnionCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrUnionCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrUnionCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrUnionCoin(ctx, req.(*DecrUnionCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListUnionCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnionCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListUnionCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListUnionCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListUnionCoinDetail(ctx, req.(*ListUnionCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantMoney(ctx, req.(*GetMerchantMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantMoneyMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantMoneyMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantMoneyMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantMoneyMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantMoneyMulti(ctx, req.(*GetMerchantMoneyMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrMerchantMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrMerchantMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrMerchantMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrMerchantMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrMerchantMoney(ctx, req.(*IncrMerchantMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrMerchantMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrMerchantMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrMerchantMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrMerchantMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrMerchantMoney(ctx, req.(*DecrMerchantMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListMerchantMoneyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantMoneyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListMerchantMoneyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListMerchantMoneyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListMerchantMoneyDetail(ctx, req.(*ListMerchantMoneyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantCoin(ctx, req.(*GetMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_GetMerchantCoinMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCoinMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).GetMerchantCoinMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_GetMerchantCoinMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).GetMerchantCoinMulti(ctx, req.(*GetMerchantCoinMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_IncrMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).IncrMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_IncrMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).IncrMerchantCoin(ctx, req.(*IncrMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_DecrMerchantCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrMerchantCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).DecrMerchantCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_DecrMerchantCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).DecrMerchantCoin(ctx, req.(*DecrMerchantCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_ListMerchantCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).ListMerchantCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_ListMerchantCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).ListMerchantCoinDetail(ctx, req.(*ListMerchantCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Asset_ServiceDesc is the grpc.ServiceDesc for Asset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.asset.Asset",
	HandlerType: (*AssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserMoney",
			Handler:    _Asset_GetUserMoney_Handler,
		},
		{
			MethodName: "GetUserMoneyMulti",
			Handler:    _Asset_GetUserMoneyMulti_Handler,
		},
		{
			MethodName: "IncrUserMoney",
			Handler:    _Asset_IncrUserMoney_Handler,
		},
		{
			MethodName: "DecrUserMoney",
			Handler:    _Asset_DecrUserMoney_Handler,
		},
		{
			MethodName: "ListUserMoneyDetail",
			Handler:    _Asset_ListUserMoneyDetail_Handler,
		},
		{
			MethodName: "GetUserCoin",
			Handler:    _Asset_GetUserCoin_Handler,
		},
		{
			MethodName: "GetUserCoinMulti",
			Handler:    _Asset_GetUserCoinMulti_Handler,
		},
		{
			MethodName: "IncrUserCoin",
			Handler:    _Asset_IncrUserCoin_Handler,
		},
		{
			MethodName: "DecrUserCoin",
			Handler:    _Asset_DecrUserCoin_Handler,
		},
		{
			MethodName: "ListUserCoinDetail",
			Handler:    _Asset_ListUserCoinDetail_Handler,
		},
		{
			MethodName: "GetAnchorCoin",
			Handler:    _Asset_GetAnchorCoin_Handler,
		},
		{
			MethodName: "GetAnchorCoinMulti",
			Handler:    _Asset_GetAnchorCoinMulti_Handler,
		},
		{
			MethodName: "IncrAnchorCoin",
			Handler:    _Asset_IncrAnchorCoin_Handler,
		},
		{
			MethodName: "DecrAnchorCoin",
			Handler:    _Asset_DecrAnchorCoin_Handler,
		},
		{
			MethodName: "ListAnchorCoinDetail",
			Handler:    _Asset_ListAnchorCoinDetail_Handler,
		},
		{
			MethodName: "GetUnionCoin",
			Handler:    _Asset_GetUnionCoin_Handler,
		},
		{
			MethodName: "GetUnionCoinMulti",
			Handler:    _Asset_GetUnionCoinMulti_Handler,
		},
		{
			MethodName: "IncrUnionCoin",
			Handler:    _Asset_IncrUnionCoin_Handler,
		},
		{
			MethodName: "DecrUnionCoin",
			Handler:    _Asset_DecrUnionCoin_Handler,
		},
		{
			MethodName: "ListUnionCoinDetail",
			Handler:    _Asset_ListUnionCoinDetail_Handler,
		},
		{
			MethodName: "GetMerchantMoney",
			Handler:    _Asset_GetMerchantMoney_Handler,
		},
		{
			MethodName: "GetMerchantMoneyMulti",
			Handler:    _Asset_GetMerchantMoneyMulti_Handler,
		},
		{
			MethodName: "IncrMerchantMoney",
			Handler:    _Asset_IncrMerchantMoney_Handler,
		},
		{
			MethodName: "DecrMerchantMoney",
			Handler:    _Asset_DecrMerchantMoney_Handler,
		},
		{
			MethodName: "ListMerchantMoneyDetail",
			Handler:    _Asset_ListMerchantMoneyDetail_Handler,
		},
		{
			MethodName: "GetMerchantCoin",
			Handler:    _Asset_GetMerchantCoin_Handler,
		},
		{
			MethodName: "GetMerchantCoinMulti",
			Handler:    _Asset_GetMerchantCoinMulti_Handler,
		},
		{
			MethodName: "IncrMerchantCoin",
			Handler:    _Asset_IncrMerchantCoin_Handler,
		},
		{
			MethodName: "DecrMerchantCoin",
			Handler:    _Asset_DecrMerchantCoin_Handler,
		},
		{
			MethodName: "ListMerchantCoinDetail",
			Handler:    _Asset_ListMerchantCoinDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.asset/asset.proto",
}
