// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.gift/gift.proto

package gift

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Gift service

type GiftService interface {
	// Add 添加礼物
	Add(ctx context.Context, in *GiftAddReq, opts ...client.CallOption) (*GiftAddResp, error)
	// Get 查询礼物
	Get(ctx context.Context, in *GiftGetReq, opts ...client.CallOption) (*GiftGetResp, error)
	// Update 更新礼物
	Update(ctx context.Context, in *GiftUpdateReq, opts ...client.CallOption) (*GiftUpdateResp, error)
	// ListAdmin 后台查询礼物列表接口
	ListAdmin(ctx context.Context, in *ListAdminReq, opts ...client.CallOption) (*ListAdminResp, error)
	// ListOnlineByType 前台房间礼物查询接口
	ListOnlineByType(ctx context.Context, in *ListOnlineByTypeReq, opts ...client.CallOption) (*ListOnlineResp, error)
	// ListOnlineAll 所有礼物的缓存接口
	ListOnlineAll(ctx context.Context, in *ListOnlineAllReq, opts ...client.CallOption) (*ListOnlineResp, error)
	// Send 送礼物接口
	Send(ctx context.Context, in *GiftSendReq, opts ...client.CallOption) (*GiftSendResp, error)
}

type giftService struct {
	c    client.Client
	name string
}

func NewGiftService(name string, c client.Client) GiftService {
	return &giftService{
		c:    c,
		name: name,
	}
}

func (c *giftService) Add(ctx context.Context, in *GiftAddReq, opts ...client.CallOption) (*GiftAddResp, error) {
	req := c.c.NewRequest(c.name, "Gift.Add", in)
	out := new(GiftAddResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) Get(ctx context.Context, in *GiftGetReq, opts ...client.CallOption) (*GiftGetResp, error) {
	req := c.c.NewRequest(c.name, "Gift.Get", in)
	out := new(GiftGetResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) Update(ctx context.Context, in *GiftUpdateReq, opts ...client.CallOption) (*GiftUpdateResp, error) {
	req := c.c.NewRequest(c.name, "Gift.Update", in)
	out := new(GiftUpdateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...client.CallOption) (*ListAdminResp, error) {
	req := c.c.NewRequest(c.name, "Gift.ListAdmin", in)
	out := new(ListAdminResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) ListOnlineByType(ctx context.Context, in *ListOnlineByTypeReq, opts ...client.CallOption) (*ListOnlineResp, error) {
	req := c.c.NewRequest(c.name, "Gift.ListOnlineByType", in)
	out := new(ListOnlineResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) ListOnlineAll(ctx context.Context, in *ListOnlineAllReq, opts ...client.CallOption) (*ListOnlineResp, error) {
	req := c.c.NewRequest(c.name, "Gift.ListOnlineAll", in)
	out := new(ListOnlineResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftService) Send(ctx context.Context, in *GiftSendReq, opts ...client.CallOption) (*GiftSendResp, error) {
	req := c.c.NewRequest(c.name, "Gift.Send", in)
	out := new(GiftSendResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gift service

type GiftHandler interface {
	// Add 添加礼物
	Add(context.Context, *GiftAddReq, *GiftAddResp) error
	// Get 查询礼物
	Get(context.Context, *GiftGetReq, *GiftGetResp) error
	// Update 更新礼物
	Update(context.Context, *GiftUpdateReq, *GiftUpdateResp) error
	// ListAdmin 后台查询礼物列表接口
	ListAdmin(context.Context, *ListAdminReq, *ListAdminResp) error
	// ListOnlineByType 前台房间礼物查询接口
	ListOnlineByType(context.Context, *ListOnlineByTypeReq, *ListOnlineResp) error
	// ListOnlineAll 所有礼物的缓存接口
	ListOnlineAll(context.Context, *ListOnlineAllReq, *ListOnlineResp) error
	// Send 送礼物接口
	Send(context.Context, *GiftSendReq, *GiftSendResp) error
}

func RegisterGiftHandler(s server.Server, hdlr GiftHandler, opts ...server.HandlerOption) error {
	type gift interface {
		Add(ctx context.Context, in *GiftAddReq, out *GiftAddResp) error
		Get(ctx context.Context, in *GiftGetReq, out *GiftGetResp) error
		Update(ctx context.Context, in *GiftUpdateReq, out *GiftUpdateResp) error
		ListAdmin(ctx context.Context, in *ListAdminReq, out *ListAdminResp) error
		ListOnlineByType(ctx context.Context, in *ListOnlineByTypeReq, out *ListOnlineResp) error
		ListOnlineAll(ctx context.Context, in *ListOnlineAllReq, out *ListOnlineResp) error
		Send(ctx context.Context, in *GiftSendReq, out *GiftSendResp) error
	}
	type Gift struct {
		gift
	}
	h := &giftHandler{hdlr}
	return s.Handle(s.NewHandler(&Gift{h}, opts...))
}

type giftHandler struct {
	GiftHandler
}

func (h *giftHandler) Add(ctx context.Context, in *GiftAddReq, out *GiftAddResp) error {
	return h.GiftHandler.Add(ctx, in, out)
}

func (h *giftHandler) Get(ctx context.Context, in *GiftGetReq, out *GiftGetResp) error {
	return h.GiftHandler.Get(ctx, in, out)
}

func (h *giftHandler) Update(ctx context.Context, in *GiftUpdateReq, out *GiftUpdateResp) error {
	return h.GiftHandler.Update(ctx, in, out)
}

func (h *giftHandler) ListAdmin(ctx context.Context, in *ListAdminReq, out *ListAdminResp) error {
	return h.GiftHandler.ListAdmin(ctx, in, out)
}

func (h *giftHandler) ListOnlineByType(ctx context.Context, in *ListOnlineByTypeReq, out *ListOnlineResp) error {
	return h.GiftHandler.ListOnlineByType(ctx, in, out)
}

func (h *giftHandler) ListOnlineAll(ctx context.Context, in *ListOnlineAllReq, out *ListOnlineResp) error {
	return h.GiftHandler.ListOnlineAll(ctx, in, out)
}

func (h *giftHandler) Send(ctx context.Context, in *GiftSendReq, out *GiftSendResp) error {
	return h.GiftHandler.Send(ctx, in, out)
}
