// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.gift/gift_record.proto

package gift

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GiftRecord service

func NewGiftRecordEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GiftRecord service

type GiftRecordService interface {
	// GetSendGiftRecord 送礼记录
	GetSendGiftRecord(ctx context.Context, in *GetSendGiftRecordReq, opts ...client.CallOption) (*GetSendGiftRecordResp, error)
	// GetGetGiftRecord 收礼记录
	GetGetGiftRecord(ctx context.Context, in *GetGetGiftRecordReq, opts ...client.CallOption) (*GetGetGiftRecordResp, error)
	// GetLiveStat 直播统计
	GetLiveStat(ctx context.Context, in *GetLiveStatReq, opts ...client.CallOption) (*GetLiveStatResp, error)
}

type giftRecordService struct {
	c    client.Client
	name string
}

func NewGiftRecordService(name string, c client.Client) GiftRecordService {
	return &giftRecordService{
		c:    c,
		name: name,
	}
}

func (c *giftRecordService) GetSendGiftRecord(ctx context.Context, in *GetSendGiftRecordReq, opts ...client.CallOption) (*GetSendGiftRecordResp, error) {
	req := c.c.NewRequest(c.name, "GiftRecord.GetSendGiftRecord", in)
	out := new(GetSendGiftRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftRecordService) GetGetGiftRecord(ctx context.Context, in *GetGetGiftRecordReq, opts ...client.CallOption) (*GetGetGiftRecordResp, error) {
	req := c.c.NewRequest(c.name, "GiftRecord.GetGetGiftRecord", in)
	out := new(GetGetGiftRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftRecordService) GetLiveStat(ctx context.Context, in *GetLiveStatReq, opts ...client.CallOption) (*GetLiveStatResp, error) {
	req := c.c.NewRequest(c.name, "GiftRecord.GetLiveStat", in)
	out := new(GetLiveStatResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GiftRecord service

type GiftRecordHandler interface {
	// GetSendGiftRecord 送礼记录
	GetSendGiftRecord(context.Context, *GetSendGiftRecordReq, *GetSendGiftRecordResp) error
	// GetGetGiftRecord 收礼记录
	GetGetGiftRecord(context.Context, *GetGetGiftRecordReq, *GetGetGiftRecordResp) error
	// GetLiveStat 直播统计
	GetLiveStat(context.Context, *GetLiveStatReq, *GetLiveStatResp) error
}

func RegisterGiftRecordHandler(s server.Server, hdlr GiftRecordHandler, opts ...server.HandlerOption) error {
	type giftRecord interface {
		GetSendGiftRecord(ctx context.Context, in *GetSendGiftRecordReq, out *GetSendGiftRecordResp) error
		GetGetGiftRecord(ctx context.Context, in *GetGetGiftRecordReq, out *GetGetGiftRecordResp) error
		GetLiveStat(ctx context.Context, in *GetLiveStatReq, out *GetLiveStatResp) error
	}
	type GiftRecord struct {
		giftRecord
	}
	h := &giftRecordHandler{hdlr}
	return s.Handle(s.NewHandler(&GiftRecord{h}, opts...))
}

type giftRecordHandler struct {
	GiftRecordHandler
}

func (h *giftRecordHandler) GetSendGiftRecord(ctx context.Context, in *GetSendGiftRecordReq, out *GetSendGiftRecordResp) error {
	return h.GiftRecordHandler.GetSendGiftRecord(ctx, in, out)
}

func (h *giftRecordHandler) GetGetGiftRecord(ctx context.Context, in *GetGetGiftRecordReq, out *GetGetGiftRecordResp) error {
	return h.GiftRecordHandler.GetGetGiftRecord(ctx, in, out)
}

func (h *giftRecordHandler) GetLiveStat(ctx context.Context, in *GetLiveStatReq, out *GetLiveStatResp) error {
	return h.GiftRecordHandler.GetLiveStat(ctx, in, out)
}
