// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.gift/wishlist.proto

package gift

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LiveWishlist service

func NewLiveWishlistEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LiveWishlist service

type LiveWishlistService interface {
	// 设置心愿单
	SetWishlist(ctx context.Context, in *SetWishlistReq, opts ...client.CallOption) (*SetWishlistResp, error)
	// 查询指定房间的心愿单信息
	GetByRoomId(ctx context.Context, in *GetWishlistByRoomIdReq, opts ...client.CallOption) (*WishlistInfoResp, error)
	// 修改心愿单礼物
	UpdateWishGifts(ctx context.Context, in *UpdateGiftsReq, opts ...client.CallOption) (*WishlistInfoResp, error)
	// 设置心愿单开启状态
	SetActiveStatus(ctx context.Context, in *EnabledStatusInfo, opts ...client.CallOption) (*EnabledStatusInfo, error)
	// 设置自动模式(每天自动刷新心愿单)开启状态
	SetAutomodeStatus(ctx context.Context, in *EnabledStatusInfo, opts ...client.CallOption) (*EnabledStatusInfo, error)
	// 执行自动模式逻辑(定时任务调用)
	ExecAutoModeTask(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type liveWishlistService struct {
	c    client.Client
	name string
}

func NewLiveWishlistService(name string, c client.Client) LiveWishlistService {
	return &liveWishlistService{
		c:    c,
		name: name,
	}
}

func (c *liveWishlistService) SetWishlist(ctx context.Context, in *SetWishlistReq, opts ...client.CallOption) (*SetWishlistResp, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.SetWishlist", in)
	out := new(SetWishlistResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveWishlistService) GetByRoomId(ctx context.Context, in *GetWishlistByRoomIdReq, opts ...client.CallOption) (*WishlistInfoResp, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.GetByRoomId", in)
	out := new(WishlistInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveWishlistService) UpdateWishGifts(ctx context.Context, in *UpdateGiftsReq, opts ...client.CallOption) (*WishlistInfoResp, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.UpdateWishGifts", in)
	out := new(WishlistInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveWishlistService) SetActiveStatus(ctx context.Context, in *EnabledStatusInfo, opts ...client.CallOption) (*EnabledStatusInfo, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.SetActiveStatus", in)
	out := new(EnabledStatusInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveWishlistService) SetAutomodeStatus(ctx context.Context, in *EnabledStatusInfo, opts ...client.CallOption) (*EnabledStatusInfo, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.SetAutomodeStatus", in)
	out := new(EnabledStatusInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveWishlistService) ExecAutoModeTask(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "LiveWishlist.ExecAutoModeTask", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LiveWishlist service

type LiveWishlistHandler interface {
	// 设置心愿单
	SetWishlist(context.Context, *SetWishlistReq, *SetWishlistResp) error
	// 查询指定房间的心愿单信息
	GetByRoomId(context.Context, *GetWishlistByRoomIdReq, *WishlistInfoResp) error
	// 修改心愿单礼物
	UpdateWishGifts(context.Context, *UpdateGiftsReq, *WishlistInfoResp) error
	// 设置心愿单开启状态
	SetActiveStatus(context.Context, *EnabledStatusInfo, *EnabledStatusInfo) error
	// 设置自动模式(每天自动刷新心愿单)开启状态
	SetAutomodeStatus(context.Context, *EnabledStatusInfo, *EnabledStatusInfo) error
	// 执行自动模式逻辑(定时任务调用)
	ExecAutoModeTask(context.Context, *EmptyRequest, *EmptyResponse) error
}

func RegisterLiveWishlistHandler(s server.Server, hdlr LiveWishlistHandler, opts ...server.HandlerOption) error {
	type liveWishlist interface {
		SetWishlist(ctx context.Context, in *SetWishlistReq, out *SetWishlistResp) error
		GetByRoomId(ctx context.Context, in *GetWishlistByRoomIdReq, out *WishlistInfoResp) error
		UpdateWishGifts(ctx context.Context, in *UpdateGiftsReq, out *WishlistInfoResp) error
		SetActiveStatus(ctx context.Context, in *EnabledStatusInfo, out *EnabledStatusInfo) error
		SetAutomodeStatus(ctx context.Context, in *EnabledStatusInfo, out *EnabledStatusInfo) error
		ExecAutoModeTask(ctx context.Context, in *EmptyRequest, out *EmptyResponse) error
	}
	type LiveWishlist struct {
		liveWishlist
	}
	h := &liveWishlistHandler{hdlr}
	return s.Handle(s.NewHandler(&LiveWishlist{h}, opts...))
}

type liveWishlistHandler struct {
	LiveWishlistHandler
}

func (h *liveWishlistHandler) SetWishlist(ctx context.Context, in *SetWishlistReq, out *SetWishlistResp) error {
	return h.LiveWishlistHandler.SetWishlist(ctx, in, out)
}

func (h *liveWishlistHandler) GetByRoomId(ctx context.Context, in *GetWishlistByRoomIdReq, out *WishlistInfoResp) error {
	return h.LiveWishlistHandler.GetByRoomId(ctx, in, out)
}

func (h *liveWishlistHandler) UpdateWishGifts(ctx context.Context, in *UpdateGiftsReq, out *WishlistInfoResp) error {
	return h.LiveWishlistHandler.UpdateWishGifts(ctx, in, out)
}

func (h *liveWishlistHandler) SetActiveStatus(ctx context.Context, in *EnabledStatusInfo, out *EnabledStatusInfo) error {
	return h.LiveWishlistHandler.SetActiveStatus(ctx, in, out)
}

func (h *liveWishlistHandler) SetAutomodeStatus(ctx context.Context, in *EnabledStatusInfo, out *EnabledStatusInfo) error {
	return h.LiveWishlistHandler.SetAutomodeStatus(ctx, in, out)
}

func (h *liveWishlistHandler) ExecAutoModeTask(ctx context.Context, in *EmptyRequest, out *EmptyResponse) error {
	return h.LiveWishlistHandler.ExecAutoModeTask(ctx, in, out)
}
