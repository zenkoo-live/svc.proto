// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: svc.infra.pay/pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayService_ArtificialRecharge_FullMethodName         = "/svc.infra.pay.PayService/ArtificialRecharge"
	PayService_Recharge_FullMethodName                   = "/svc.infra.pay.PayService/Recharge"
	PayService_PayRecords_FullMethodName                 = "/svc.infra.pay.PayService/PayRecords"
	PayService_OrderQuery_FullMethodName                 = "/svc.infra.pay.PayService/OrderQuery"
	PayService_Notify_FullMethodName                     = "/svc.infra.pay.PayService/Notify"
	PayService_GetChannelSupportedList_FullMethodName    = "/svc.infra.pay.PayService/GetChannelSupportedList"
	PayService_CreatedChannel_FullMethodName             = "/svc.infra.pay.PayService/CreatedChannel"
	PayService_DeletedChannel_FullMethodName             = "/svc.infra.pay.PayService/DeletedChannel"
	PayService_UpdatedChannel_FullMethodName             = "/svc.infra.pay.PayService/UpdatedChannel"
	PayService_GetChannelsList_FullMethodName            = "/svc.infra.pay.PayService/GetChannelsList"
	PayService_CreatedChannelType_FullMethodName         = "/svc.infra.pay.PayService/CreatedChannelType"
	PayService_UpdatedChannelType_FullMethodName         = "/svc.infra.pay.PayService/UpdatedChannelType"
	PayService_DeletedChannelType_FullMethodName         = "/svc.infra.pay.PayService/DeletedChannelType"
	PayService_GetChannelTypeList_FullMethodName         = "/svc.infra.pay.PayService/GetChannelTypeList"
	PayService_CreatedChannelTypeMerchant_FullMethodName = "/svc.infra.pay.PayService/CreatedChannelTypeMerchant"
	PayService_UpdatedChannelTypeMerchant_FullMethodName = "/svc.infra.pay.PayService/UpdatedChannelTypeMerchant"
	PayService_DeletedChannelTypeMerchant_FullMethodName = "/svc.infra.pay.PayService/DeletedChannelTypeMerchant"
	PayService_GetChannelTypeMerchantList_FullMethodName = "/svc.infra.pay.PayService/GetChannelTypeMerchantList"
	PayService_GetChargeChannelTypeList_FullMethodName   = "/svc.infra.pay.PayService/GetChargeChannelTypeList"
)

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////////////////////////////////////////////// 《《《 《 RPC Service of stat //////////////////////////////////////////////////////////////
type PayServiceClient interface {
	// 人工充值 for dashboard
	ArtificialRecharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error)
	// 充值 for client
	Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error)
	// 充值记录
	PayRecords(ctx context.Context, in *PayRecordRequest, opts ...grpc.CallOption) (*PayRecordResponse, error)
	// 订单查询
	OrderQuery(ctx context.Context, in *OrderQueryRequest, opts ...grpc.CallOption) (*OrderQueryResponse, error)
	// 回调通知
	Notify(ctx context.Context, in *OrderNotifyRequest, opts ...grpc.CallOption) (*OrderNotifyResponse, error)
	// ChannelSupportedList api for dashbaord
	GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, opts ...grpc.CallOption) (*ChannelSupportedListResponse, error)
	// Channel
	CreatedChannel(ctx context.Context, in *CreatedChannelRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// DeletedChannel delete useless channel rows
	DeletedChannel(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// UpdatedChannel update channel basic information
	UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// GetChannelsList fetch channel list api for dashboard
	GetChannelsList(ctx context.Context, in *ChannelsListRequest, opts ...grpc.CallOption) (*ChannelsListResponse, error)
	// CreatedChannelType created channel types api for dashboard
	CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// UpdatedChannelType updated channel types api for dashboard
	UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// DeletedChannelType deleted channel types api for dashboard
	DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// GetChannelTypeList fetch channel types api for dashboard
	GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, opts ...grpc.CallOption) (*ChannelTypeListResponse, error)
	// CreatedChannelTypeMerchant merchant channel type created api for dashboard
	CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// UpdatedChannelTypeMerchant merchant channel type updated api for dashboard
	UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// DeletedChannelTypeMerchant merchant channel type deleted api for dashboard
	DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// GetChannelTypeMerchantList merchant channel type list api for dashboard
	GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, opts ...grpc.CallOption) (*ChannelTypeMerchantListResponse, error)
	// GetChargeChannelTypeList fetch charge channel list api for viewer layer
	GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, opts ...grpc.CallOption) (*ChargeChannelTypeResponse, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) ArtificialRecharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeResponse)
	err := c.cc.Invoke(ctx, PayService_ArtificialRecharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeResponse)
	err := c.cc.Invoke(ctx, PayService_Recharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) PayRecords(ctx context.Context, in *PayRecordRequest, opts ...grpc.CallOption) (*PayRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRecordResponse)
	err := c.cc.Invoke(ctx, PayService_PayRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) OrderQuery(ctx context.Context, in *OrderQueryRequest, opts ...grpc.CallOption) (*OrderQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderQueryResponse)
	err := c.cc.Invoke(ctx, PayService_OrderQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Notify(ctx context.Context, in *OrderNotifyRequest, opts ...grpc.CallOption) (*OrderNotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderNotifyResponse)
	err := c.cc.Invoke(ctx, PayService_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, opts ...grpc.CallOption) (*ChannelSupportedListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelSupportedListResponse)
	err := c.cc.Invoke(ctx, PayService_GetChannelSupportedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreatedChannel(ctx context.Context, in *CreatedChannelRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_CreatedChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) DeletedChannel(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_DeletedChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_UpdatedChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetChannelsList(ctx context.Context, in *ChannelsListRequest, opts ...grpc.CallOption) (*ChannelsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelsListResponse)
	err := c.cc.Invoke(ctx, PayService_GetChannelsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_CreatedChannelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_UpdatedChannelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_DeletedChannelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, opts ...grpc.CallOption) (*ChannelTypeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelTypeListResponse)
	err := c.cc.Invoke(ctx, PayService_GetChannelTypeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_CreatedChannelTypeMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_UpdatedChannelTypeMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, PayService_DeletedChannelTypeMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, opts ...grpc.CallOption) (*ChannelTypeMerchantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelTypeMerchantListResponse)
	err := c.cc.Invoke(ctx, PayService_GetChannelTypeMerchantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, opts ...grpc.CallOption) (*ChargeChannelTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChargeChannelTypeResponse)
	err := c.cc.Invoke(ctx, PayService_GetChargeChannelTypeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
// All implementations must embed UnimplementedPayServiceServer
// for forward compatibility
//
// ////////////////////////////////////////////////////// 《《《 《 RPC Service of stat //////////////////////////////////////////////////////////////
type PayServiceServer interface {
	// 人工充值 for dashboard
	ArtificialRecharge(context.Context, *RechargeRequest) (*RechargeResponse, error)
	// 充值 for client
	Recharge(context.Context, *RechargeRequest) (*RechargeResponse, error)
	// 充值记录
	PayRecords(context.Context, *PayRecordRequest) (*PayRecordResponse, error)
	// 订单查询
	OrderQuery(context.Context, *OrderQueryRequest) (*OrderQueryResponse, error)
	// 回调通知
	Notify(context.Context, *OrderNotifyRequest) (*OrderNotifyResponse, error)
	// ChannelSupportedList api for dashbaord
	GetChannelSupportedList(context.Context, *ChannelSupportedListRequest) (*ChannelSupportedListResponse, error)
	// Channel
	CreatedChannel(context.Context, *CreatedChannelRequest) (*CommonResponse, error)
	// DeletedChannel delete useless channel rows
	DeletedChannel(context.Context, *CommonDeletedRequest) (*CommonResponse, error)
	// UpdatedChannel update channel basic information
	UpdatedChannel(context.Context, *UpdatedChannelRequest) (*CommonResponse, error)
	// GetChannelsList fetch channel list api for dashboard
	GetChannelsList(context.Context, *ChannelsListRequest) (*ChannelsListResponse, error)
	// CreatedChannelType created channel types api for dashboard
	CreatedChannelType(context.Context, *CreatedChannelTypeRequest) (*CommonResponse, error)
	// UpdatedChannelType updated channel types api for dashboard
	UpdatedChannelType(context.Context, *UpdatedChannelTypeRequest) (*CommonResponse, error)
	// DeletedChannelType deleted channel types api for dashboard
	DeletedChannelType(context.Context, *CommonDeletedRequest) (*CommonResponse, error)
	// GetChannelTypeList fetch channel types api for dashboard
	GetChannelTypeList(context.Context, *ChannelTypeListRequest) (*ChannelTypeListResponse, error)
	// CreatedChannelTypeMerchant merchant channel type created api for dashboard
	CreatedChannelTypeMerchant(context.Context, *CreatedChannelTypeMerchantRequest) (*CommonResponse, error)
	// UpdatedChannelTypeMerchant merchant channel type updated api for dashboard
	UpdatedChannelTypeMerchant(context.Context, *UpdatedChannelTypeMerchantRequest) (*CommonResponse, error)
	// DeletedChannelTypeMerchant merchant channel type deleted api for dashboard
	DeletedChannelTypeMerchant(context.Context, *CommonDeletedRequest) (*CommonResponse, error)
	// GetChannelTypeMerchantList merchant channel type list api for dashboard
	GetChannelTypeMerchantList(context.Context, *ChannelTypeMerchantListRequest) (*ChannelTypeMerchantListResponse, error)
	// GetChargeChannelTypeList fetch charge channel list api for viewer layer
	GetChargeChannelTypeList(context.Context, *ChargeChannelTypeRequest) (*ChargeChannelTypeResponse, error)
	mustEmbedUnimplementedPayServiceServer()
}

// UnimplementedPayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayServiceServer struct {
}

func (UnimplementedPayServiceServer) ArtificialRecharge(context.Context, *RechargeRequest) (*RechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArtificialRecharge not implemented")
}
func (UnimplementedPayServiceServer) Recharge(context.Context, *RechargeRequest) (*RechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (UnimplementedPayServiceServer) PayRecords(context.Context, *PayRecordRequest) (*PayRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRecords not implemented")
}
func (UnimplementedPayServiceServer) OrderQuery(context.Context, *OrderQueryRequest) (*OrderQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderQuery not implemented")
}
func (UnimplementedPayServiceServer) Notify(context.Context, *OrderNotifyRequest) (*OrderNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedPayServiceServer) GetChannelSupportedList(context.Context, *ChannelSupportedListRequest) (*ChannelSupportedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelSupportedList not implemented")
}
func (UnimplementedPayServiceServer) CreatedChannel(context.Context, *CreatedChannelRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedChannel not implemented")
}
func (UnimplementedPayServiceServer) DeletedChannel(context.Context, *CommonDeletedRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedChannel not implemented")
}
func (UnimplementedPayServiceServer) UpdatedChannel(context.Context, *UpdatedChannelRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatedChannel not implemented")
}
func (UnimplementedPayServiceServer) GetChannelsList(context.Context, *ChannelsListRequest) (*ChannelsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsList not implemented")
}
func (UnimplementedPayServiceServer) CreatedChannelType(context.Context, *CreatedChannelTypeRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedChannelType not implemented")
}
func (UnimplementedPayServiceServer) UpdatedChannelType(context.Context, *UpdatedChannelTypeRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatedChannelType not implemented")
}
func (UnimplementedPayServiceServer) DeletedChannelType(context.Context, *CommonDeletedRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedChannelType not implemented")
}
func (UnimplementedPayServiceServer) GetChannelTypeList(context.Context, *ChannelTypeListRequest) (*ChannelTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTypeList not implemented")
}
func (UnimplementedPayServiceServer) CreatedChannelTypeMerchant(context.Context, *CreatedChannelTypeMerchantRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedChannelTypeMerchant not implemented")
}
func (UnimplementedPayServiceServer) UpdatedChannelTypeMerchant(context.Context, *UpdatedChannelTypeMerchantRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatedChannelTypeMerchant not implemented")
}
func (UnimplementedPayServiceServer) DeletedChannelTypeMerchant(context.Context, *CommonDeletedRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedChannelTypeMerchant not implemented")
}
func (UnimplementedPayServiceServer) GetChannelTypeMerchantList(context.Context, *ChannelTypeMerchantListRequest) (*ChannelTypeMerchantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTypeMerchantList not implemented")
}
func (UnimplementedPayServiceServer) GetChargeChannelTypeList(context.Context, *ChargeChannelTypeRequest) (*ChargeChannelTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargeChannelTypeList not implemented")
}
func (UnimplementedPayServiceServer) mustEmbedUnimplementedPayServiceServer() {}

// UnsafePayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServiceServer will
// result in compilation errors.
type UnsafePayServiceServer interface {
	mustEmbedUnimplementedPayServiceServer()
}

func RegisterPayServiceServer(s grpc.ServiceRegistrar, srv PayServiceServer) {
	s.RegisterService(&PayService_ServiceDesc, srv)
}

func _PayService_ArtificialRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).ArtificialRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_ArtificialRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).ArtificialRecharge(ctx, req.(*RechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_Recharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Recharge(ctx, req.(*RechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_PayRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).PayRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_PayRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).PayRecords(ctx, req.(*PayRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_OrderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).OrderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_OrderQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).OrderQuery(ctx, req.(*OrderQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Notify(ctx, req.(*OrderNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetChannelSupportedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSupportedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetChannelSupportedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetChannelSupportedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetChannelSupportedList(ctx, req.(*ChannelSupportedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreatedChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreatedChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreatedChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreatedChannel(ctx, req.(*CreatedChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_DeletedChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).DeletedChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_DeletedChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).DeletedChannel(ctx, req.(*CommonDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_UpdatedChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).UpdatedChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_UpdatedChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).UpdatedChannel(ctx, req.(*UpdatedChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetChannelsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetChannelsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetChannelsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetChannelsList(ctx, req.(*ChannelsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreatedChannelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedChannelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreatedChannelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreatedChannelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreatedChannelType(ctx, req.(*CreatedChannelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_UpdatedChannelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedChannelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).UpdatedChannelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_UpdatedChannelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).UpdatedChannelType(ctx, req.(*UpdatedChannelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_DeletedChannelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).DeletedChannelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_DeletedChannelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).DeletedChannelType(ctx, req.(*CommonDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetChannelTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetChannelTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetChannelTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetChannelTypeList(ctx, req.(*ChannelTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreatedChannelTypeMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedChannelTypeMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreatedChannelTypeMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreatedChannelTypeMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreatedChannelTypeMerchant(ctx, req.(*CreatedChannelTypeMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_UpdatedChannelTypeMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedChannelTypeMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).UpdatedChannelTypeMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_UpdatedChannelTypeMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).UpdatedChannelTypeMerchant(ctx, req.(*UpdatedChannelTypeMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_DeletedChannelTypeMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).DeletedChannelTypeMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_DeletedChannelTypeMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).DeletedChannelTypeMerchant(ctx, req.(*CommonDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetChannelTypeMerchantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTypeMerchantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetChannelTypeMerchantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetChannelTypeMerchantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetChannelTypeMerchantList(ctx, req.(*ChannelTypeMerchantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetChargeChannelTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeChannelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetChargeChannelTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetChargeChannelTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetChargeChannelTypeList(ctx, req.(*ChargeChannelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayService_ServiceDesc is the grpc.ServiceDesc for PayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.infra.pay.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArtificialRecharge",
			Handler:    _PayService_ArtificialRecharge_Handler,
		},
		{
			MethodName: "Recharge",
			Handler:    _PayService_Recharge_Handler,
		},
		{
			MethodName: "PayRecords",
			Handler:    _PayService_PayRecords_Handler,
		},
		{
			MethodName: "OrderQuery",
			Handler:    _PayService_OrderQuery_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _PayService_Notify_Handler,
		},
		{
			MethodName: "GetChannelSupportedList",
			Handler:    _PayService_GetChannelSupportedList_Handler,
		},
		{
			MethodName: "CreatedChannel",
			Handler:    _PayService_CreatedChannel_Handler,
		},
		{
			MethodName: "DeletedChannel",
			Handler:    _PayService_DeletedChannel_Handler,
		},
		{
			MethodName: "UpdatedChannel",
			Handler:    _PayService_UpdatedChannel_Handler,
		},
		{
			MethodName: "GetChannelsList",
			Handler:    _PayService_GetChannelsList_Handler,
		},
		{
			MethodName: "CreatedChannelType",
			Handler:    _PayService_CreatedChannelType_Handler,
		},
		{
			MethodName: "UpdatedChannelType",
			Handler:    _PayService_UpdatedChannelType_Handler,
		},
		{
			MethodName: "DeletedChannelType",
			Handler:    _PayService_DeletedChannelType_Handler,
		},
		{
			MethodName: "GetChannelTypeList",
			Handler:    _PayService_GetChannelTypeList_Handler,
		},
		{
			MethodName: "CreatedChannelTypeMerchant",
			Handler:    _PayService_CreatedChannelTypeMerchant_Handler,
		},
		{
			MethodName: "UpdatedChannelTypeMerchant",
			Handler:    _PayService_UpdatedChannelTypeMerchant_Handler,
		},
		{
			MethodName: "DeletedChannelTypeMerchant",
			Handler:    _PayService_DeletedChannelTypeMerchant_Handler,
		},
		{
			MethodName: "GetChannelTypeMerchantList",
			Handler:    _PayService_GetChannelTypeMerchantList_Handler,
		},
		{
			MethodName: "GetChargeChannelTypeList",
			Handler:    _PayService_GetChargeChannelTypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.infra.pay/pay.proto",
}
