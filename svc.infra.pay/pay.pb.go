// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: svc.infra.pay/pay.proto

package pay

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// /////////////////////////////////////////////////////////// 《《《《 支付相关  //////////////////////////////////////////////////////////////////////
type PayStatus int32

const (
	PayStatus_Paying    PayStatus = 0
	PayStatus_Paid      PayStatus = 1
	PayStatus_Closed    PayStatus = 2
	PayStatus_Refunding PayStatus = 3
	PayStatus_Refunded  PayStatus = 4
)

// Enum value maps for PayStatus.
var (
	PayStatus_name = map[int32]string{
		0: "Paying",
		1: "Paid",
		2: "Closed",
		3: "Refunding",
		4: "Refunded",
	}
	PayStatus_value = map[string]int32{
		"Paying":    0,
		"Paid":      1,
		"Closed":    2,
		"Refunding": 3,
		"Refunded":  4,
	}
)

func (x PayStatus) Enum() *PayStatus {
	p := new(PayStatus)
	*p = x
	return p
}

func (x PayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_infra_pay_pay_proto_enumTypes[0].Descriptor()
}

func (PayStatus) Type() protoreflect.EnumType {
	return &file_svc_infra_pay_pay_proto_enumTypes[0]
}

func (x PayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayStatus.Descriptor instead.
func (PayStatus) EnumDescriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{0}
}

type DeliveryStatus int32

const (
	DeliveryStatus_NoDelivered DeliveryStatus = 0
	DeliveryStatus_Delivered   DeliveryStatus = 1
)

// Enum value maps for DeliveryStatus.
var (
	DeliveryStatus_name = map[int32]string{
		0: "NoDelivered",
		1: "Delivered",
	}
	DeliveryStatus_value = map[string]int32{
		"NoDelivered": 0,
		"Delivered":   1,
	}
)

func (x DeliveryStatus) Enum() *DeliveryStatus {
	p := new(DeliveryStatus)
	*p = x
	return p
}

func (x DeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_infra_pay_pay_proto_enumTypes[1].Descriptor()
}

func (DeliveryStatus) Type() protoreflect.EnumType {
	return &file_svc_infra_pay_pay_proto_enumTypes[1]
}

func (x DeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryStatus.Descriptor instead.
func (DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{1}
}

type RecordType int32

const (
	RecordType_Channel             RecordType = 0
	RecordType_ChannelType         RecordType = 1
	RecordType_ChannelTypeMerchant RecordType = 2
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "Channel",
		1: "ChannelType",
		2: "ChannelTypeMerchant",
	}
	RecordType_value = map[string]int32{
		"Channel":             0,
		"ChannelType":         1,
		"ChannelTypeMerchant": 2,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_infra_pay_pay_proto_enumTypes[2].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_svc_infra_pay_pay_proto_enumTypes[2]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{2}
}

type RecordStatus int32

const (
	RecordStatus_Close RecordStatus = 0
	RecordStatus_Open  RecordStatus = 1
)

// Enum value maps for RecordStatus.
var (
	RecordStatus_name = map[int32]string{
		0: "Close",
		1: "Open",
	}
	RecordStatus_value = map[string]int32{
		"Close": 0,
		"Open":  1,
	}
)

func (x RecordStatus) Enum() *RecordStatus {
	p := new(RecordStatus)
	*p = x
	return p
}

func (x RecordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_infra_pay_pay_proto_enumTypes[3].Descriptor()
}

func (RecordStatus) Type() protoreflect.EnumType {
	return &file_svc_infra_pay_pay_proto_enumTypes[3]
}

func (x RecordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordStatus.Descriptor instead.
func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{3}
}

type PayRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo        string                 `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                                         // 订单号
	Money          int64                  `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`                                                                           // 充值金额
	Status         PayStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=svc.infra.pay.PayStatus" json:"status,omitempty"`                                            // 订单状态
	DeliveryStatus DeliveryStatus         `protobuf:"varint,4,opt,name=delivery_status,json=deliveryStatus,proto3,enum=svc.infra.pay.DeliveryStatus" json:"delivery_status,omitempty"` // 发货状态
	ObtainAmount   int64                  `protobuf:"varint,5,opt,name=ObtainAmount,proto3" json:"ObtainAmount,omitempty"`                                                             // 到账金额
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 结束时间
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 结束时间
}

func (x *PayRecord) Reset() {
	*x = PayRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRecord) ProtoMessage() {}

func (x *PayRecord) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRecord.ProtoReflect.Descriptor instead.
func (*PayRecord) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{0}
}

func (x *PayRecord) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayRecord) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PayRecord) GetStatus() PayStatus {
	if x != nil {
		return x.Status
	}
	return PayStatus_Paying
}

func (x *PayRecord) GetDeliveryStatus() DeliveryStatus {
	if x != nil {
		return x.DeliveryStatus
	}
	return DeliveryStatus_NoDelivered
}

func (x *PayRecord) GetObtainAmount() int64 {
	if x != nil {
		return x.ObtainAmount
	}
	return 0
}

func (x *PayRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PayRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type DetailPayRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo         string                 `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                                         // 订单号
	Money           int64                  `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`                                                                           // 充值金额
	Status          PayStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=svc.infra.pay.PayStatus" json:"status,omitempty"`                                            // 订单状态
	DeliveryStatus  DeliveryStatus         `protobuf:"varint,4,opt,name=delivery_status,json=deliveryStatus,proto3,enum=svc.infra.pay.DeliveryStatus" json:"delivery_status,omitempty"` // 发货状态
	ObtainAmount    int64                  `protobuf:"varint,5,opt,name=ObtainAmount,proto3" json:"ObtainAmount,omitempty"`                                                             // 到账金额
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 结束时间
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 结束时间
	MerchantId      string                 `protobuf:"bytes,8,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`                                                // 商户ID
	UserId          string                 `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户ID
	AppId           string                 `protobuf:"bytes,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                                              // 应用ID
	ChannelId       string                 `protobuf:"bytes,11,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                                  //渠道ID
	ChannelTypeId   string                 `protobuf:"bytes,12,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"`                                    // 渠道支付方式
	Creator         string                 `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`                                                                       // 操作者
	ChannelTypeName string                 `protobuf:"bytes,14,opt,name=channel_type_name,json=channelTypeName,proto3" json:"channel_type_name,omitempty"`                              // 渠道支付方式名称
	TransNo         string                 `protobuf:"bytes,15,opt,name=trans_no,json=transNo,proto3" json:"trans_no,omitempty"`                                                        // 三方交易ID
	Platform        string                 `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`                                                                     // 充值端口
	Remark          string                 `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`                                                                         // 备注
}

func (x *DetailPayRecord) Reset() {
	*x = DetailPayRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPayRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPayRecord) ProtoMessage() {}

func (x *DetailPayRecord) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPayRecord.ProtoReflect.Descriptor instead.
func (*DetailPayRecord) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{1}
}

func (x *DetailPayRecord) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DetailPayRecord) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *DetailPayRecord) GetStatus() PayStatus {
	if x != nil {
		return x.Status
	}
	return PayStatus_Paying
}

func (x *DetailPayRecord) GetDeliveryStatus() DeliveryStatus {
	if x != nil {
		return x.DeliveryStatus
	}
	return DeliveryStatus_NoDelivered
}

func (x *DetailPayRecord) GetObtainAmount() int64 {
	if x != nil {
		return x.ObtainAmount
	}
	return 0
}

func (x *DetailPayRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DetailPayRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DetailPayRecord) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DetailPayRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DetailPayRecord) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DetailPayRecord) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DetailPayRecord) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *DetailPayRecord) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *DetailPayRecord) GetChannelTypeName() string {
	if x != nil {
		return x.ChannelTypeName
	}
	return ""
}

func (x *DetailPayRecord) GetTransNo() string {
	if x != nil {
		return x.TransNo
	}
	return ""
}

func (x *DetailPayRecord) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DetailPayRecord) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo        string                 `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Money          int64                  `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	Status         PayStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=svc.infra.pay.PayStatus" json:"status,omitempty"`                                            // 订单状态
	DeliveryStatus DeliveryStatus         `protobuf:"varint,4,opt,name=delivery_status,json=deliveryStatus,proto3,enum=svc.infra.pay.DeliveryStatus" json:"delivery_status,omitempty"` // 发货状态
	ObtainAmount   int64                  `protobuf:"varint,5,opt,name=ObtainAmount,proto3" json:"ObtainAmount,omitempty"`                                                             // 到账金额
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 结束时间
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 结束时间
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{2}
}

func (x *OrderInfo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *OrderInfo) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *OrderInfo) GetStatus() PayStatus {
	if x != nil {
		return x.Status
	}
	return PayStatus_Paying
}

func (x *OrderInfo) GetDeliveryStatus() DeliveryStatus {
	if x != nil {
		return x.DeliveryStatus
	}
	return DeliveryStatus_NoDelivered
}

func (x *OrderInfo) GetObtainAmount() int64 {
	if x != nil {
		return x.ObtainAmount
	}
	return 0
}

func (x *OrderInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ReissueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"` // 订单号
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                          // 操作IP
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`                // 充值操作人
}

func (x *ReissueRequest) Reset() {
	*x = ReissueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReissueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReissueRequest) ProtoMessage() {}

func (x *ReissueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReissueRequest.ProtoReflect.Descriptor instead.
func (*ReissueRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{3}
}

func (x *ReissueRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ReissueRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ReissueRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type RechargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId    string  `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`            // 商户ID
	UserId        string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	Money         uint64  `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`                                       // 充值金额
	TypeChannelId string  `protobuf:"bytes,4,opt,name=type_channel_id,json=typeChannelId,proto3" json:"type_channel_id,omitempty"` // 通过获取充值方式列表中的Id UUID类型
	AppId         string  `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                           // 充值的APPID
	RemoteAddr    string  `protobuf:"bytes,6,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`            // 请求IP
	Platform      string  `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`                                  // 充值的端口: ios,android,h5,pc这种
	Creator       string  `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`                                    // 充值操作人
	Remark        *string `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark,omitempty"`                                // 充值备注
}

func (x *RechargeRequest) Reset() {
	*x = RechargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeRequest) ProtoMessage() {}

func (x *RechargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeRequest.ProtoReflect.Descriptor instead.
func (*RechargeRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{4}
}

func (x *RechargeRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RechargeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RechargeRequest) GetMoney() uint64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *RechargeRequest) GetTypeChannelId() string {
	if x != nil {
		return x.TypeChannelId
	}
	return ""
}

func (x *RechargeRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RechargeRequest) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RechargeRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RechargeRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RechargeRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type RechargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"` // 订单号
	PayUrl  string `protobuf:"bytes,2,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"`    //  付款的URL
}

func (x *RechargeResponse) Reset() {
	*x = RechargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeResponse) ProtoMessage() {}

func (x *RechargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeResponse.ProtoReflect.Descriptor instead.
func (*RechargeResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{5}
}

func (x *RechargeResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *RechargeResponse) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

type ReissueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // 补发结果
}

func (x *ReissueResponse) Reset() {
	*x = ReissueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReissueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReissueResponse) ProtoMessage() {}

func (x *ReissueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReissueResponse.ProtoReflect.Descriptor instead.
func (*ReissueResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{6}
}

func (x *ReissueResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type OrderNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body map[string]string `protobuf:"bytes,1,rep,name=body,proto3" json:"body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 所有参数
}

func (x *OrderNotifyRequest) Reset() {
	*x = OrderNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNotifyRequest) ProtoMessage() {}

func (x *OrderNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNotifyRequest.ProtoReflect.Descriptor instead.
func (*OrderNotifyRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{7}
}

func (x *OrderNotifyRequest) GetBody() map[string]string {
	if x != nil {
		return x.Body
	}
	return nil
}

type OrderNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *OrderNotifyResponse) Reset() {
	*x = OrderNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNotifyResponse) ProtoMessage() {}

func (x *OrderNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNotifyResponse.ProtoReflect.Descriptor instead.
func (*OrderNotifyResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{8}
}

func (x *OrderNotifyResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type OrderQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 商户ID
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderNo    string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
}

func (x *OrderQueryRequest) Reset() {
	*x = OrderQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryRequest) ProtoMessage() {}

func (x *OrderQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryRequest.ProtoReflect.Descriptor instead.
func (*OrderQueryRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{9}
}

func (x *OrderQueryRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *OrderQueryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrderQueryRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type OrderQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *OrderQueryResponse) Reset() {
	*x = OrderQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryResponse) ProtoMessage() {}

func (x *OrderQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryResponse.ProtoReflect.Descriptor instead.
func (*OrderQueryResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{10}
}

func (x *OrderQueryResponse) GetInfo() *OrderInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PayRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 商户ID
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
	Page       uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                              // 页数
	Size       uint32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                              // 每页数量
}

func (x *PayRecordRequest) Reset() {
	*x = PayRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRecordRequest) ProtoMessage() {}

func (x *PayRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRecordRequest.ProtoReflect.Descriptor instead.
func (*PayRecordRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{11}
}

func (x *PayRecordRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PayRecordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PayRecordRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PayRecordRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DetailPayRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`                                  // 商户ID
	UserId     string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户ID
	AppId      string                 `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                                 // 应用ID
	OrderNo    string                 `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                           // 订单号
	ChannelId  string                 `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                     // 渠道ID
	StartAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`                                           // 结束时间
	EndAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`                                                 // 结束时间
	Status     *PayStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=svc.infra.pay.PayStatus,oneof" json:"status,omitempty"`                        // 支付状态
	NotStatus  *PayStatus             `protobuf:"varint,9,opt,name=not_status,json=notStatus,proto3,enum=svc.infra.pay.PayStatus,oneof" json:"not_status,omitempty"` // 不等于某个状态
	Page       uint32                 `protobuf:"varint,100,opt,name=page,proto3" json:"page,omitempty"`                                                             // 页数
	Size       uint32                 `protobuf:"varint,200,opt,name=size,proto3" json:"size,omitempty"`                                                             // 每页数量
}

func (x *DetailPayRecordRequest) Reset() {
	*x = DetailPayRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPayRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPayRecordRequest) ProtoMessage() {}

func (x *DetailPayRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPayRecordRequest.ProtoReflect.Descriptor instead.
func (*DetailPayRecordRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{12}
}

func (x *DetailPayRecordRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DetailPayRecordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DetailPayRecordRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DetailPayRecordRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DetailPayRecordRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DetailPayRecordRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *DetailPayRecordRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *DetailPayRecordRequest) GetStatus() PayStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PayStatus_Paying
}

func (x *DetailPayRecordRequest) GetNotStatus() PayStatus {
	if x != nil && x.NotStatus != nil {
		return *x.NotStatus
	}
	return PayStatus_Paying
}

func (x *DetailPayRecordRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DetailPayRecordRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PayRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 总数
	List  []*PayRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 记录
}

func (x *PayRecordResponse) Reset() {
	*x = PayRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRecordResponse) ProtoMessage() {}

func (x *PayRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRecordResponse.ProtoReflect.Descriptor instead.
func (*PayRecordResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{13}
}

func (x *PayRecordResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PayRecordResponse) GetList() []*PayRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type DetailPayRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64              `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 总数
	List  []*DetailPayRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 记录
}

func (x *DetailPayRecordResponse) Reset() {
	*x = DetailPayRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPayRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPayRecordResponse) ProtoMessage() {}

func (x *DetailPayRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPayRecordResponse.ProtoReflect.Descriptor instead.
func (*DetailPayRecordResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{14}
}

func (x *DetailPayRecordResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DetailPayRecordResponse) GetList() []*DetailPayRecord {
	if x != nil {
		return x.List
	}
	return nil
}

// /////////////////////////////////////////////////////////// 《《《《 渠道相关  /////////////////////////////////////////////////////////////////////
// ChannelSupportedListRequest
type ChannelSupportedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` // 是否开启的渠道
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ChannelSupportedListRequest) Reset() {
	*x = ChannelSupportedListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSupportedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSupportedListRequest) ProtoMessage() {}

func (x *ChannelSupportedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSupportedListRequest.ProtoReflect.Descriptor instead.
func (*ChannelSupportedListRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelSupportedListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelSupportedListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelSupportedListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChannelSupportedListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// ChannelSupportedListResponse 支持平台
type ChannelSupportedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt  int64                                            `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	List []*ChannelSupportedListResponse_ChannelSupported `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` // 永成支付
}

func (x *ChannelSupportedListResponse) Reset() {
	*x = ChannelSupportedListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSupportedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSupportedListResponse) ProtoMessage() {}

func (x *ChannelSupportedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSupportedListResponse.ProtoReflect.Descriptor instead.
func (*ChannelSupportedListResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelSupportedListResponse) GetCnt() int64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ChannelSupportedListResponse) GetList() []*ChannelSupportedListResponse_ChannelSupported {
	if x != nil {
		return x.List
	}
	return nil
}

// CreatedChannelRequest
type CreatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 商户号
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // 名称
	DisplayId  int64  `protobuf:"varint,3,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`   // 显示ID
	MerchantNo string `protobuf:"bytes,4,opt,name=merchant_no,json=merchantNo,proto3" json:"merchant_no,omitempty"` // 商户号
	Secret     string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`                           // 密钥
	GatewayUrl string `protobuf:"bytes,6,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"` // 网关地址
	NotifyUrl  string `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`    // 通知地址
	Status     int64  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                          // 状态 0/关 1/开启
	Creator    string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`                         // 创建者
}

func (x *CreatedChannelRequest) Reset() {
	*x = CreatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedChannelRequest) ProtoMessage() {}

func (x *CreatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedChannelRequest.ProtoReflect.Descriptor instead.
func (*CreatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{17}
}

func (x *CreatedChannelRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreatedChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatedChannelRequest) GetDisplayId() int64 {
	if x != nil {
		return x.DisplayId
	}
	return 0
}

func (x *CreatedChannelRequest) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *CreatedChannelRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreatedChannelRequest) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *CreatedChannelRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CreatedChannelRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatedChannelRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

// UpdatedChannelRequest
type UpdatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // 名称
	MerchantNo string `protobuf:"bytes,3,opt,name=merchant_no,json=merchantNo,proto3" json:"merchant_no,omitempty"` // 商户号
	Secret     string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`                           // 密钥
	GatewayUrl string `protobuf:"bytes,5,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"` // 网关地址
	NotifyUrl  string `protobuf:"bytes,6,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`    // 通知地址
	Status     int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                          // 状态 0/关 1/开启
}

func (x *UpdatedChannelRequest) Reset() {
	*x = UpdatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedChannelRequest) ProtoMessage() {}

func (x *UpdatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{18}
}

func (x *UpdatedChannelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatedChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatedChannelRequest) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *UpdatedChannelRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdatedChannelRequest) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *UpdatedChannelRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *UpdatedChannelRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// ChannelListRequest
type ChannelsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 所属商户号
	Status     int64                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                          // 状态0/关 1/开， -1/全部
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`    // 开始时间
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`          // 结束时间
	Page       int64                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size       int64                  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ChannelsListRequest) Reset() {
	*x = ChannelsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsListRequest) ProtoMessage() {}

func (x *ChannelsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsListRequest.ProtoReflect.Descriptor instead.
func (*ChannelsListRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelsListRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChannelsListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelsListRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ChannelsListRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ChannelsListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChannelsListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// ChannelListResponse
type ChannelsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt  int64                           `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	List []*ChannelsListResponse_Channel `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelsListResponse) Reset() {
	*x = ChannelsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsListResponse) ProtoMessage() {}

func (x *ChannelsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsListResponse.ProtoReflect.Descriptor instead.
func (*ChannelsListResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{20}
}

func (x *ChannelsListResponse) GetCnt() int64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ChannelsListResponse) GetList() []*ChannelsListResponse_Channel {
	if x != nil {
		return x.List
	}
	return nil
}

// CreatedChannelTypeRequest 渠道支付类型
type CreatedChannelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`               // 渠道ID
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          // 名称
	ChannelTypeId string `protobuf:"bytes,4,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"` // 充值字符串
	Status        int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态
	Ratio         int64  `protobuf:"varint,6,opt,name=ratio,proto3" json:"ratio,omitempty"`                                       // 费率
	Creator       string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`                                    // 创建者
	PayPlatform   string `protobuf:"bytes,8,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"`         // 支付平台: 支付宝、微信
	Image         string `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`                                        // 支付方式的图标
}

func (x *CreatedChannelTypeRequest) Reset() {
	*x = CreatedChannelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedChannelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedChannelTypeRequest) ProtoMessage() {}

func (x *CreatedChannelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedChannelTypeRequest.ProtoReflect.Descriptor instead.
func (*CreatedChannelTypeRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{21}
}

func (x *CreatedChannelTypeRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreatedChannelTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatedChannelTypeRequest) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *CreatedChannelTypeRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatedChannelTypeRequest) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *CreatedChannelTypeRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreatedChannelTypeRequest) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

func (x *CreatedChannelTypeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// UpdatedChannelTypeRequest 更新渠道
type UpdatedChannelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 // ID
	ChannelId      string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                  // 渠道ID
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                             // 名称
	ChannelTypeKey string `protobuf:"bytes,4,opt,name=channel_type_key,json=channelTypeKey,proto3" json:"channel_type_key,omitempty"` // 充值字符串
	Status         int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                        // 状态
	Ratio          int64  `protobuf:"varint,6,opt,name=ratio,proto3" json:"ratio,omitempty"`                                          // 费率
	PayPlatform    string `protobuf:"bytes,8,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"`            // 支付平台: 支付宝、微信
	Image          string `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`                                           // 支付方式的图标
}

func (x *UpdatedChannelTypeRequest) Reset() {
	*x = UpdatedChannelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedChannelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedChannelTypeRequest) ProtoMessage() {}

func (x *UpdatedChannelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedChannelTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdatedChannelTypeRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{22}
}

func (x *UpdatedChannelTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatedChannelTypeRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UpdatedChannelTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatedChannelTypeRequest) GetChannelTypeKey() string {
	if x != nil {
		return x.ChannelTypeKey
	}
	return ""
}

func (x *UpdatedChannelTypeRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdatedChannelTypeRequest) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *UpdatedChannelTypeRequest) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

func (x *UpdatedChannelTypeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ChannelTypeListRequest 列表查询
type ChannelTypeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                             // 状态 0/关 1/开 -1/全部
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 名称搜索
	PayPlatform string `protobuf:"bytes,3,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"` // 支付平台: 支付宝、微信
	Page        int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size        int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ChannelTypeListRequest) Reset() {
	*x = ChannelTypeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeListRequest) ProtoMessage() {}

func (x *ChannelTypeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeListRequest.ProtoReflect.Descriptor instead.
func (*ChannelTypeListRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{23}
}

func (x *ChannelTypeListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelTypeListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelTypeListRequest) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

func (x *ChannelTypeListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChannelTypeListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// ChannelTypeListResponse 列表数据
type ChannelTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt  int64                                  `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	List []*ChannelTypeListResponse_ChannelType `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelTypeListResponse) Reset() {
	*x = ChannelTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeListResponse) ProtoMessage() {}

func (x *ChannelTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeListResponse.ProtoReflect.Descriptor instead.
func (*ChannelTypeListResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelTypeListResponse) GetCnt() int64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ChannelTypeListResponse) GetList() []*ChannelTypeListResponse_ChannelType {
	if x != nil {
		return x.List
	}
	return nil
}

// ChargeChannelTypeRequest 支付渠道类型，用户点击金额后，查询对应的渠道类型，返回可支付的方式和费率
type ChargeChannelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // 应用ID
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Platform   uint64 `protobuf:"varint,4,opt,name=platform,proto3" json:"platform,omitempty"` // 平台类型
}

func (x *ChargeChannelTypeRequest) Reset() {
	*x = ChargeChannelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeChannelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeChannelTypeRequest) ProtoMessage() {}

func (x *ChargeChannelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeChannelTypeRequest.ProtoReflect.Descriptor instead.
func (*ChargeChannelTypeRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{25}
}

func (x *ChargeChannelTypeRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChargeChannelTypeRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ChargeChannelTypeRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ChargeChannelTypeRequest) GetPlatform() uint64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

// ChargeChannelTypeResponse 支付渠道类型列表
type ChargeChannelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelTypeList []*ChargeChannelTypeResponse_ChannelType `protobuf:"bytes,1,rep,name=ChannelTypeList,proto3" json:"ChannelTypeList,omitempty"`
}

func (x *ChargeChannelTypeResponse) Reset() {
	*x = ChargeChannelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeChannelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeChannelTypeResponse) ProtoMessage() {}

func (x *ChargeChannelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeChannelTypeResponse.ProtoReflect.Descriptor instead.
func (*ChargeChannelTypeResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{26}
}

func (x *ChargeChannelTypeResponse) GetChannelTypeList() []*ChargeChannelTypeResponse_ChannelType {
	if x != nil {
		return x.ChannelTypeList
	}
	return nil
}

// CreatedChannelTypeMerchantRequest 创建支付渠道
type CreatedChannelTypeMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId    string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ChannelId     string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelTypeId string `protobuf:"bytes,3,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"`
	PayTypeName   string `protobuf:"bytes,4,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`
	TypeNo        string `protobuf:"bytes,5,opt,name=type_no,json=typeNo,proto3" json:"type_no,omitempty"`
	AmountType    int64  `protobuf:"varint,6,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	AmountMin     int64  `protobuf:"varint,7,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax     int64  `protobuf:"varint,8,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	ChannelRatio  int64  `protobuf:"varint,9,opt,name=channel_ratio,json=channelRatio,proto3" json:"channel_ratio,omitempty"`
	Platform      int64  `protobuf:"varint,10,opt,name=platform,proto3" json:"platform,omitempty"`
	Weight        int64  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Status        int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreatedChannelTypeMerchantRequest) Reset() {
	*x = CreatedChannelTypeMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedChannelTypeMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedChannelTypeMerchantRequest) ProtoMessage() {}

func (x *CreatedChannelTypeMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedChannelTypeMerchantRequest.ProtoReflect.Descriptor instead.
func (*CreatedChannelTypeMerchantRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{27}
}

func (x *CreatedChannelTypeMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreatedChannelTypeMerchantRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreatedChannelTypeMerchantRequest) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *CreatedChannelTypeMerchantRequest) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *CreatedChannelTypeMerchantRequest) GetTypeNo() string {
	if x != nil {
		return x.TypeNo
	}
	return ""
}

func (x *CreatedChannelTypeMerchantRequest) GetAmountType() int64 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetAmountMin() int64 {
	if x != nil {
		return x.AmountMin
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetAmountMax() int64 {
	if x != nil {
		return x.AmountMax
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetChannelRatio() int64 {
	if x != nil {
		return x.ChannelRatio
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetPlatform() int64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreatedChannelTypeMerchantRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// UpdatedChannelTypeMerchantRequest 更新
type UpdatedChannelTypeMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PayTypeName string `protobuf:"bytes,4,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`
	TypeNo      string `protobuf:"bytes,5,opt,name=type_no,json=typeNo,proto3" json:"type_no,omitempty"`
	AmountType  int64  `protobuf:"varint,6,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	AmountMin   int64  `protobuf:"varint,7,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax   int64  `protobuf:"varint,8,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	// int64 channel_ratio = 9;
	Platform int64 `protobuf:"varint,10,opt,name=platform,proto3" json:"platform,omitempty"`
	Weight   int64 `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Status   int64 `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdatedChannelTypeMerchantRequest) Reset() {
	*x = UpdatedChannelTypeMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedChannelTypeMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedChannelTypeMerchantRequest) ProtoMessage() {}

func (x *UpdatedChannelTypeMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedChannelTypeMerchantRequest.ProtoReflect.Descriptor instead.
func (*UpdatedChannelTypeMerchantRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{28}
}

func (x *UpdatedChannelTypeMerchantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatedChannelTypeMerchantRequest) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *UpdatedChannelTypeMerchantRequest) GetTypeNo() string {
	if x != nil {
		return x.TypeNo
	}
	return ""
}

func (x *UpdatedChannelTypeMerchantRequest) GetAmountType() int64 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *UpdatedChannelTypeMerchantRequest) GetAmountMin() int64 {
	if x != nil {
		return x.AmountMin
	}
	return 0
}

func (x *UpdatedChannelTypeMerchantRequest) GetAmountMax() int64 {
	if x != nil {
		return x.AmountMax
	}
	return 0
}

func (x *UpdatedChannelTypeMerchantRequest) GetPlatform() int64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *UpdatedChannelTypeMerchantRequest) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpdatedChannelTypeMerchantRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// ChannelTypeMerchantListRequest 请求数据
type ChannelTypeMerchantListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId  string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ChannelId   string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PayTypeName string                 `protobuf:"bytes,3,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`
	Status      int64                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Page        int64                  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	Size        int64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ChannelTypeMerchantListRequest) Reset() {
	*x = ChannelTypeMerchantListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeMerchantListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeMerchantListRequest) ProtoMessage() {}

func (x *ChannelTypeMerchantListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeMerchantListRequest.ProtoReflect.Descriptor instead.
func (*ChannelTypeMerchantListRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelTypeMerchantListRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChannelTypeMerchantListRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelTypeMerchantListRequest) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *ChannelTypeMerchantListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelTypeMerchantListRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ChannelTypeMerchantListRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ChannelTypeMerchantListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChannelTypeMerchantListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// ChannelTypeMerchantListResponse 返回数据
type ChannelTypeMerchantListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt  int64                                                  `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	List []*ChannelTypeMerchantListResponse_ChannelTypeMerchant `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChannelTypeMerchantListResponse) Reset() {
	*x = ChannelTypeMerchantListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeMerchantListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeMerchantListResponse) ProtoMessage() {}

func (x *ChannelTypeMerchantListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeMerchantListResponse.ProtoReflect.Descriptor instead.
func (*ChannelTypeMerchantListResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{30}
}

func (x *ChannelTypeMerchantListResponse) GetCnt() int64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse) GetList() []*ChannelTypeMerchantListResponse_ChannelTypeMerchant {
	if x != nil {
		return x.List
	}
	return nil
}

// 更新记录状态
type UpdateRecordStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId string       `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Status   RecordStatus `protobuf:"varint,2,opt,name=status,proto3,enum=svc.infra.pay.RecordStatus" json:"status,omitempty"`
	Type     RecordType   `protobuf:"varint,3,opt,name=type,proto3,enum=svc.infra.pay.RecordType" json:"type,omitempty"`
}

func (x *UpdateRecordStatusRequest) Reset() {
	*x = UpdateRecordStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordStatusRequest) ProtoMessage() {}

func (x *UpdateRecordStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordStatusRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateRecordStatusRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateRecordStatusRequest) GetStatus() RecordStatus {
	if x != nil {
		return x.Status
	}
	return RecordStatus_Close
}

func (x *UpdateRecordStatusRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_Channel
}

// 更新记录状态结果
type UpdateRecordStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateRecordStatusResponse) Reset() {
	*x = UpdateRecordStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordStatusResponse) ProtoMessage() {}

func (x *UpdateRecordStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecordStatusResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateRecordStatusResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{33}
}

func (x *GetRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 商户号
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // 名称
	DisplayId  int64  `protobuf:"varint,3,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`   // 显示ID
	MerchantNo string `protobuf:"bytes,4,opt,name=merchant_no,json=merchantNo,proto3" json:"merchant_no,omitempty"` // 商户号
	Secret     string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`                           // 密钥
	GatewayUrl string `protobuf:"bytes,6,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"` // 网关地址
	NotifyUrl  string `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`    // 通知地址
	Status     int64  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                          // 状态 0/关 1/开启
	Creator    string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`                         // 创建者
}

func (x *GetChannelResponse) Reset() {
	*x = GetChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelResponse) ProtoMessage() {}

func (x *GetChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelResponse.ProtoReflect.Descriptor instead.
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{34}
}

func (x *GetChannelResponse) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetChannelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChannelResponse) GetDisplayId() int64 {
	if x != nil {
		return x.DisplayId
	}
	return 0
}

func (x *GetChannelResponse) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *GetChannelResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *GetChannelResponse) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *GetChannelResponse) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *GetChannelResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetChannelResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type GetChannelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`               // 渠道ID
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          // 名称
	ChannelTypeId string `protobuf:"bytes,4,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"` // 充值字符串
	Status        int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态
	Ratio         int64  `protobuf:"varint,6,opt,name=ratio,proto3" json:"ratio,omitempty"`                                       // 费率
	Creator       string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`                                    // 创建者
	PayPlatform   string `protobuf:"bytes,8,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"`         // 支付平台
}

func (x *GetChannelTypeResponse) Reset() {
	*x = GetChannelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelTypeResponse) ProtoMessage() {}

func (x *GetChannelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelTypeResponse.ProtoReflect.Descriptor instead.
func (*GetChannelTypeResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{35}
}

func (x *GetChannelTypeResponse) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GetChannelTypeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChannelTypeResponse) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *GetChannelTypeResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetChannelTypeResponse) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *GetChannelTypeResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GetChannelTypeResponse) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

type GetChannelTypeMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId    string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ChannelId     string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelTypeId string `protobuf:"bytes,3,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"`
	PayTypeName   string `protobuf:"bytes,4,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`
	TypeNo        string `protobuf:"bytes,5,opt,name=type_no,json=typeNo,proto3" json:"type_no,omitempty"`
	AmountType    int64  `protobuf:"varint,6,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	AmountMin     int64  `protobuf:"varint,7,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax     int64  `protobuf:"varint,8,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	ChannelRatio  int64  `protobuf:"varint,9,opt,name=channel_ratio,json=channelRatio,proto3" json:"channel_ratio,omitempty"`
	Platform      int64  `protobuf:"varint,10,opt,name=platform,proto3" json:"platform,omitempty"`
	Weight        int64  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Status        int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetChannelTypeMerchantResponse) Reset() {
	*x = GetChannelTypeMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelTypeMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelTypeMerchantResponse) ProtoMessage() {}

func (x *GetChannelTypeMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelTypeMerchantResponse.ProtoReflect.Descriptor instead.
func (*GetChannelTypeMerchantResponse) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{36}
}

func (x *GetChannelTypeMerchantResponse) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetChannelTypeMerchantResponse) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GetChannelTypeMerchantResponse) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *GetChannelTypeMerchantResponse) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *GetChannelTypeMerchantResponse) GetTypeNo() string {
	if x != nil {
		return x.TypeNo
	}
	return ""
}

func (x *GetChannelTypeMerchantResponse) GetAmountType() int64 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetAmountMin() int64 {
	if x != nil {
		return x.AmountMin
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetAmountMax() int64 {
	if x != nil {
		return x.AmountMax
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetChannelRatio() int64 {
	if x != nil {
		return x.ChannelRatio
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetPlatform() int64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetChannelTypeMerchantResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ChannelSupportedListResponse_ChannelSupported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status      int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	IdentityKey string `protobuf:"bytes,4,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (x *ChannelSupportedListResponse_ChannelSupported) Reset() {
	*x = ChannelSupportedListResponse_ChannelSupported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSupportedListResponse_ChannelSupported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSupportedListResponse_ChannelSupported) ProtoMessage() {}

func (x *ChannelSupportedListResponse_ChannelSupported) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSupportedListResponse_ChannelSupported.ProtoReflect.Descriptor instead.
func (*ChannelSupportedListResponse_ChannelSupported) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ChannelSupportedListResponse_ChannelSupported) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelSupportedListResponse_ChannelSupported) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelSupportedListResponse_ChannelSupported) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelSupportedListResponse_ChannelSupported) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

// Channel
type ChannelsListResponse_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 数据ID
	MerchantId string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 商户号
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // 名称, etc. 永成支付
	DisplayId  int64                  `protobuf:"varint,4,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`   // 显示ID
	MerchantNo string                 `protobuf:"bytes,5,opt,name=merchant_no,json=merchantNo,proto3" json:"merchant_no,omitempty"` // 商户号
	Secret     string                 `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`                           // 密钥
	GatewayUrl string                 `protobuf:"bytes,7,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"` // 网关地址
	NotifyUrl  string                 `protobuf:"bytes,8,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`    // 通知地址
	Status     int64                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                          // 状态 0/关 1/开启
	Creator    string                 `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`                        // 创建者
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   // 创建时间
}

func (x *ChannelsListResponse_Channel) Reset() {
	*x = ChannelsListResponse_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsListResponse_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsListResponse_Channel) ProtoMessage() {}

func (x *ChannelsListResponse_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsListResponse_Channel.ProtoReflect.Descriptor instead.
func (*ChannelsListResponse_Channel) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ChannelsListResponse_Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetDisplayId() int64 {
	if x != nil {
		return x.DisplayId
	}
	return 0
}

func (x *ChannelsListResponse_Channel) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelsListResponse_Channel) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ChannelsListResponse_Channel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// ChannelType 渠道支付类型
type ChannelTypeListResponse_ChannelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                              // ID
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`               // 渠道ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          // 名称
	ChannelTypeId string                 `protobuf:"bytes,4,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"` // 充值字符串
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态
	Ratio         int64                  `protobuf:"varint,6,opt,name=ratio,proto3" json:"ratio,omitempty"`                                       // 费率
	Creator       string                 `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`                                    // 创建者
	PayPlatform   string                 `protobuf:"bytes,8,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"`         // 支付平台: 支付宝、微信
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Image         string                 `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"` // 支付方式的图标
}

func (x *ChannelTypeListResponse_ChannelType) Reset() {
	*x = ChannelTypeListResponse_ChannelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeListResponse_ChannelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeListResponse_ChannelType) ProtoMessage() {}

func (x *ChannelTypeListResponse_ChannelType) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeListResponse_ChannelType.ProtoReflect.Descriptor instead.
func (*ChannelTypeListResponse_ChannelType) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ChannelTypeListResponse_ChannelType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelTypeListResponse_ChannelType) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *ChannelTypeListResponse_ChannelType) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

func (x *ChannelTypeListResponse_ChannelType) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChannelTypeListResponse_ChannelType) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ChannelTypeListResponse_ChannelType) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type ChargeChannelTypeResponse_ChannelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayTypeId    string                 `protobuf:"bytes,1,opt,name=pay_type_id,json=payTypeId,proto3" json:"pay_type_id,omitempty"`         // 支付类型ID
	ChannelId    string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`           // 渠道ID
	PayTypeName  string                 `protobuf:"bytes,3,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`   // 支付名称
	ChargeRatio  uint64                 `protobuf:"varint,4,opt,name=charge_ratio,json=chargeRatio,proto3" json:"charge_ratio,omitempty"`    // 支付费率
	Amount       uint64                 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                 // 充充值值
	ObtainAmount uint64                 `protobuf:"varint,6,opt,name=obtain_amount,json=obtainAmount,proto3" json:"obtain_amount,omitempty"` // 支付值到账值
	PayPlatform  string                 `protobuf:"bytes,7,opt,name=pay_platform,json=payPlatform,proto3" json:"pay_platform,omitempty"`
	Image        string                 `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
}

func (x *ChargeChannelTypeResponse_ChannelType) Reset() {
	*x = ChargeChannelTypeResponse_ChannelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeChannelTypeResponse_ChannelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeChannelTypeResponse_ChannelType) ProtoMessage() {}

func (x *ChargeChannelTypeResponse_ChannelType) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeChannelTypeResponse_ChannelType.ProtoReflect.Descriptor instead.
func (*ChargeChannelTypeResponse_ChannelType) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ChargeChannelTypeResponse_ChannelType) GetPayTypeId() string {
	if x != nil {
		return x.PayTypeId
	}
	return ""
}

func (x *ChargeChannelTypeResponse_ChannelType) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChargeChannelTypeResponse_ChannelType) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *ChargeChannelTypeResponse_ChannelType) GetChargeRatio() uint64 {
	if x != nil {
		return x.ChargeRatio
	}
	return 0
}

func (x *ChargeChannelTypeResponse_ChannelType) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ChargeChannelTypeResponse_ChannelType) GetObtainAmount() uint64 {
	if x != nil {
		return x.ObtainAmount
	}
	return 0
}

func (x *ChargeChannelTypeResponse_ChannelType) GetPayPlatform() string {
	if x != nil {
		return x.PayPlatform
	}
	return ""
}

func (x *ChargeChannelTypeResponse_ChannelType) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ChargeChannelTypeResponse_ChannelType) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ChannelTypeMerchantListResponse_ChannelTypeMerchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId    string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelTypeId string                 `protobuf:"bytes,3,opt,name=channel_type_id,json=channelTypeId,proto3" json:"channel_type_id,omitempty"`
	PayTypeName   string                 `protobuf:"bytes,4,opt,name=pay_type_name,json=payTypeName,proto3" json:"pay_type_name,omitempty"`
	TypeNo        string                 `protobuf:"bytes,5,opt,name=type_no,json=typeNo,proto3" json:"type_no,omitempty"`
	AmountType    int64                  `protobuf:"varint,6,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	AmountMin     int64                  `protobuf:"varint,7,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax     int64                  `protobuf:"varint,8,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	ChannelRatio  int64                  `protobuf:"varint,9,opt,name=channel_ratio,json=channelRatio,proto3" json:"channel_ratio,omitempty"`
	Platform      int64                  `protobuf:"varint,10,opt,name=platform,proto3" json:"platform,omitempty"`
	Weight        int64                  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Status        int64                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Id            string                 `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) Reset() {
	*x = ChannelTypeMerchantListResponse_ChannelTypeMerchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_infra_pay_pay_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeMerchantListResponse_ChannelTypeMerchant) ProtoMessage() {}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) ProtoReflect() protoreflect.Message {
	mi := &file_svc_infra_pay_pay_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeMerchantListResponse_ChannelTypeMerchant.ProtoReflect.Descriptor instead.
func (*ChannelTypeMerchantListResponse_ChannelTypeMerchant) Descriptor() ([]byte, []int) {
	return file_svc_infra_pay_pay_proto_rawDescGZIP(), []int{30, 0}
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetChannelTypeId() string {
	if x != nil {
		return x.ChannelTypeId
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetPayTypeName() string {
	if x != nil {
		return x.PayTypeName
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetTypeNo() string {
	if x != nil {
		return x.TypeNo
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetAmountType() int64 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetAmountMin() int64 {
	if x != nil {
		return x.AmountMin
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetAmountMax() int64 {
	if x != nil {
		return x.AmountMax
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetChannelRatio() int64 {
	if x != nil {
		return x.ChannelRatio
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetPlatform() int64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ChannelTypeMerchantListResponse_ChannelTypeMerchant) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

var File_svc_infra_pay_pay_proto protoreflect.FileDescriptor

var file_svc_infra_pay_pay_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2f,
	0x70, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x76, 0x63, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x76, 0x63, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x69, 0x6e,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x05, 0x0a, 0x0f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xd0, 0x02, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x46, 0x0a, 0x10,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x79, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2d, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x68, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x42, 0x0a, 0x12, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x17, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x1b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf5, 0x01, 0x0a,
	0x1c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x71, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xcc, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe8, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0xd3, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xef, 0x02,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xc2, 0x03, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc4, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x98, 0x03,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0xd9, 0x05, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xcb, 0x04,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x95, 0x03, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2a, 0x4a, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x61, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x04, 0x2a,
	0x30, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x10,
	0x01, 0x2a, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x32, 0xd0, 0x12, 0x0a, 0x0a,
	0x50, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0a, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70,
	0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15,
	0x5a, 0x13, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x61,
	0x79, 0x3b, 0x70, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_infra_pay_pay_proto_rawDescOnce sync.Once
	file_svc_infra_pay_pay_proto_rawDescData = file_svc_infra_pay_pay_proto_rawDesc
)

func file_svc_infra_pay_pay_proto_rawDescGZIP() []byte {
	file_svc_infra_pay_pay_proto_rawDescOnce.Do(func() {
		file_svc_infra_pay_pay_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_infra_pay_pay_proto_rawDescData)
	})
	return file_svc_infra_pay_pay_proto_rawDescData
}

var file_svc_infra_pay_pay_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_svc_infra_pay_pay_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_svc_infra_pay_pay_proto_goTypes = []any{
	(PayStatus)(0),                                              // 0: svc.infra.pay.PayStatus
	(DeliveryStatus)(0),                                         // 1: svc.infra.pay.DeliveryStatus
	(RecordType)(0),                                             // 2: svc.infra.pay.RecordType
	(RecordStatus)(0),                                           // 3: svc.infra.pay.RecordStatus
	(*PayRecord)(nil),                                           // 4: svc.infra.pay.PayRecord
	(*DetailPayRecord)(nil),                                     // 5: svc.infra.pay.DetailPayRecord
	(*OrderInfo)(nil),                                           // 6: svc.infra.pay.OrderInfo
	(*ReissueRequest)(nil),                                      // 7: svc.infra.pay.ReissueRequest
	(*RechargeRequest)(nil),                                     // 8: svc.infra.pay.RechargeRequest
	(*RechargeResponse)(nil),                                    // 9: svc.infra.pay.RechargeResponse
	(*ReissueResponse)(nil),                                     // 10: svc.infra.pay.ReissueResponse
	(*OrderNotifyRequest)(nil),                                  // 11: svc.infra.pay.OrderNotifyRequest
	(*OrderNotifyResponse)(nil),                                 // 12: svc.infra.pay.OrderNotifyResponse
	(*OrderQueryRequest)(nil),                                   // 13: svc.infra.pay.OrderQueryRequest
	(*OrderQueryResponse)(nil),                                  // 14: svc.infra.pay.OrderQueryResponse
	(*PayRecordRequest)(nil),                                    // 15: svc.infra.pay.PayRecordRequest
	(*DetailPayRecordRequest)(nil),                              // 16: svc.infra.pay.DetailPayRecordRequest
	(*PayRecordResponse)(nil),                                   // 17: svc.infra.pay.PayRecordResponse
	(*DetailPayRecordResponse)(nil),                             // 18: svc.infra.pay.DetailPayRecordResponse
	(*ChannelSupportedListRequest)(nil),                         // 19: svc.infra.pay.ChannelSupportedListRequest
	(*ChannelSupportedListResponse)(nil),                        // 20: svc.infra.pay.ChannelSupportedListResponse
	(*CreatedChannelRequest)(nil),                               // 21: svc.infra.pay.CreatedChannelRequest
	(*UpdatedChannelRequest)(nil),                               // 22: svc.infra.pay.UpdatedChannelRequest
	(*ChannelsListRequest)(nil),                                 // 23: svc.infra.pay.ChannelsListRequest
	(*ChannelsListResponse)(nil),                                // 24: svc.infra.pay.ChannelsListResponse
	(*CreatedChannelTypeRequest)(nil),                           // 25: svc.infra.pay.CreatedChannelTypeRequest
	(*UpdatedChannelTypeRequest)(nil),                           // 26: svc.infra.pay.UpdatedChannelTypeRequest
	(*ChannelTypeListRequest)(nil),                              // 27: svc.infra.pay.ChannelTypeListRequest
	(*ChannelTypeListResponse)(nil),                             // 28: svc.infra.pay.ChannelTypeListResponse
	(*ChargeChannelTypeRequest)(nil),                            // 29: svc.infra.pay.ChargeChannelTypeRequest
	(*ChargeChannelTypeResponse)(nil),                           // 30: svc.infra.pay.ChargeChannelTypeResponse
	(*CreatedChannelTypeMerchantRequest)(nil),                   // 31: svc.infra.pay.CreatedChannelTypeMerchantRequest
	(*UpdatedChannelTypeMerchantRequest)(nil),                   // 32: svc.infra.pay.UpdatedChannelTypeMerchantRequest
	(*ChannelTypeMerchantListRequest)(nil),                      // 33: svc.infra.pay.ChannelTypeMerchantListRequest
	(*ChannelTypeMerchantListResponse)(nil),                     // 34: svc.infra.pay.ChannelTypeMerchantListResponse
	(*UpdateRecordStatusRequest)(nil),                           // 35: svc.infra.pay.UpdateRecordStatusRequest
	(*UpdateRecordStatusResponse)(nil),                          // 36: svc.infra.pay.UpdateRecordStatusResponse
	(*GetRecordRequest)(nil),                                    // 37: svc.infra.pay.GetRecordRequest
	(*GetChannelResponse)(nil),                                  // 38: svc.infra.pay.GetChannelResponse
	(*GetChannelTypeResponse)(nil),                              // 39: svc.infra.pay.GetChannelTypeResponse
	(*GetChannelTypeMerchantResponse)(nil),                      // 40: svc.infra.pay.GetChannelTypeMerchantResponse
	nil,                                                         // 41: svc.infra.pay.OrderNotifyRequest.BodyEntry
	(*ChannelSupportedListResponse_ChannelSupported)(nil),       // 42: svc.infra.pay.ChannelSupportedListResponse.ChannelSupported
	(*ChannelsListResponse_Channel)(nil),                        // 43: svc.infra.pay.ChannelsListResponse.Channel
	(*ChannelTypeListResponse_ChannelType)(nil),                 // 44: svc.infra.pay.ChannelTypeListResponse.ChannelType
	(*ChargeChannelTypeResponse_ChannelType)(nil),               // 45: svc.infra.pay.ChargeChannelTypeResponse.ChannelType
	(*ChannelTypeMerchantListResponse_ChannelTypeMerchant)(nil), // 46: svc.infra.pay.ChannelTypeMerchantListResponse.ChannelTypeMerchant
	(*timestamppb.Timestamp)(nil),                               // 47: google.protobuf.Timestamp
	(*CommonDeletedRequest)(nil),                                // 48: svc.infra.pay.CommonDeletedRequest
	(*CommonResponse)(nil),                                      // 49: svc.infra.pay.CommonResponse
}
var file_svc_infra_pay_pay_proto_depIdxs = []int32{
	0,  // 0: svc.infra.pay.PayRecord.status:type_name -> svc.infra.pay.PayStatus
	1,  // 1: svc.infra.pay.PayRecord.delivery_status:type_name -> svc.infra.pay.DeliveryStatus
	47, // 2: svc.infra.pay.PayRecord.created_at:type_name -> google.protobuf.Timestamp
	47, // 3: svc.infra.pay.PayRecord.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: svc.infra.pay.DetailPayRecord.status:type_name -> svc.infra.pay.PayStatus
	1,  // 5: svc.infra.pay.DetailPayRecord.delivery_status:type_name -> svc.infra.pay.DeliveryStatus
	47, // 6: svc.infra.pay.DetailPayRecord.created_at:type_name -> google.protobuf.Timestamp
	47, // 7: svc.infra.pay.DetailPayRecord.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 8: svc.infra.pay.OrderInfo.status:type_name -> svc.infra.pay.PayStatus
	1,  // 9: svc.infra.pay.OrderInfo.delivery_status:type_name -> svc.infra.pay.DeliveryStatus
	47, // 10: svc.infra.pay.OrderInfo.created_at:type_name -> google.protobuf.Timestamp
	47, // 11: svc.infra.pay.OrderInfo.updated_at:type_name -> google.protobuf.Timestamp
	41, // 12: svc.infra.pay.OrderNotifyRequest.body:type_name -> svc.infra.pay.OrderNotifyRequest.BodyEntry
	6,  // 13: svc.infra.pay.OrderQueryResponse.info:type_name -> svc.infra.pay.OrderInfo
	47, // 14: svc.infra.pay.DetailPayRecordRequest.start_at:type_name -> google.protobuf.Timestamp
	47, // 15: svc.infra.pay.DetailPayRecordRequest.end_at:type_name -> google.protobuf.Timestamp
	0,  // 16: svc.infra.pay.DetailPayRecordRequest.status:type_name -> svc.infra.pay.PayStatus
	0,  // 17: svc.infra.pay.DetailPayRecordRequest.not_status:type_name -> svc.infra.pay.PayStatus
	4,  // 18: svc.infra.pay.PayRecordResponse.list:type_name -> svc.infra.pay.PayRecord
	5,  // 19: svc.infra.pay.DetailPayRecordResponse.list:type_name -> svc.infra.pay.DetailPayRecord
	42, // 20: svc.infra.pay.ChannelSupportedListResponse.list:type_name -> svc.infra.pay.ChannelSupportedListResponse.ChannelSupported
	47, // 21: svc.infra.pay.ChannelsListRequest.start_time:type_name -> google.protobuf.Timestamp
	47, // 22: svc.infra.pay.ChannelsListRequest.end_time:type_name -> google.protobuf.Timestamp
	43, // 23: svc.infra.pay.ChannelsListResponse.list:type_name -> svc.infra.pay.ChannelsListResponse.Channel
	44, // 24: svc.infra.pay.ChannelTypeListResponse.list:type_name -> svc.infra.pay.ChannelTypeListResponse.ChannelType
	45, // 25: svc.infra.pay.ChargeChannelTypeResponse.ChannelTypeList:type_name -> svc.infra.pay.ChargeChannelTypeResponse.ChannelType
	47, // 26: svc.infra.pay.ChannelTypeMerchantListRequest.start_time:type_name -> google.protobuf.Timestamp
	47, // 27: svc.infra.pay.ChannelTypeMerchantListRequest.end_time:type_name -> google.protobuf.Timestamp
	46, // 28: svc.infra.pay.ChannelTypeMerchantListResponse.list:type_name -> svc.infra.pay.ChannelTypeMerchantListResponse.ChannelTypeMerchant
	3,  // 29: svc.infra.pay.UpdateRecordStatusRequest.status:type_name -> svc.infra.pay.RecordStatus
	2,  // 30: svc.infra.pay.UpdateRecordStatusRequest.type:type_name -> svc.infra.pay.RecordType
	47, // 31: svc.infra.pay.ChannelsListResponse.Channel.created_at:type_name -> google.protobuf.Timestamp
	47, // 32: svc.infra.pay.ChannelTypeListResponse.ChannelType.created_at:type_name -> google.protobuf.Timestamp
	47, // 33: svc.infra.pay.ChannelTypeListResponse.ChannelType.updated_at:type_name -> google.protobuf.Timestamp
	47, // 34: svc.infra.pay.ChargeChannelTypeResponse.ChannelType.created_at:type_name -> google.protobuf.Timestamp
	47, // 35: svc.infra.pay.ChannelTypeMerchantListResponse.ChannelTypeMerchant.created_at:type_name -> google.protobuf.Timestamp
	47, // 36: svc.infra.pay.ChannelTypeMerchantListResponse.ChannelTypeMerchant.updated_at:type_name -> google.protobuf.Timestamp
	47, // 37: svc.infra.pay.ChannelTypeMerchantListResponse.ChannelTypeMerchant.deleted_at:type_name -> google.protobuf.Timestamp
	8,  // 38: svc.infra.pay.PayService.ArtificialRecharge:input_type -> svc.infra.pay.RechargeRequest
	8,  // 39: svc.infra.pay.PayService.Recharge:input_type -> svc.infra.pay.RechargeRequest
	15, // 40: svc.infra.pay.PayService.PayRecords:input_type -> svc.infra.pay.PayRecordRequest
	13, // 41: svc.infra.pay.PayService.OrderQuery:input_type -> svc.infra.pay.OrderQueryRequest
	11, // 42: svc.infra.pay.PayService.Notify:input_type -> svc.infra.pay.OrderNotifyRequest
	16, // 43: svc.infra.pay.PayService.DetailPayRecords:input_type -> svc.infra.pay.DetailPayRecordRequest
	7,  // 44: svc.infra.pay.PayService.Reissue:input_type -> svc.infra.pay.ReissueRequest
	19, // 45: svc.infra.pay.PayService.GetChannelSupportedList:input_type -> svc.infra.pay.ChannelSupportedListRequest
	21, // 46: svc.infra.pay.PayService.CreatedChannel:input_type -> svc.infra.pay.CreatedChannelRequest
	48, // 47: svc.infra.pay.PayService.DeletedChannel:input_type -> svc.infra.pay.CommonDeletedRequest
	22, // 48: svc.infra.pay.PayService.UpdatedChannel:input_type -> svc.infra.pay.UpdatedChannelRequest
	23, // 49: svc.infra.pay.PayService.GetChannelsList:input_type -> svc.infra.pay.ChannelsListRequest
	37, // 50: svc.infra.pay.PayService.GetChannel:input_type -> svc.infra.pay.GetRecordRequest
	25, // 51: svc.infra.pay.PayService.CreatedChannelType:input_type -> svc.infra.pay.CreatedChannelTypeRequest
	26, // 52: svc.infra.pay.PayService.UpdatedChannelType:input_type -> svc.infra.pay.UpdatedChannelTypeRequest
	48, // 53: svc.infra.pay.PayService.DeletedChannelType:input_type -> svc.infra.pay.CommonDeletedRequest
	27, // 54: svc.infra.pay.PayService.GetChannelTypeList:input_type -> svc.infra.pay.ChannelTypeListRequest
	37, // 55: svc.infra.pay.PayService.GetChannelType:input_type -> svc.infra.pay.GetRecordRequest
	31, // 56: svc.infra.pay.PayService.CreatedChannelTypeMerchant:input_type -> svc.infra.pay.CreatedChannelTypeMerchantRequest
	32, // 57: svc.infra.pay.PayService.UpdatedChannelTypeMerchant:input_type -> svc.infra.pay.UpdatedChannelTypeMerchantRequest
	48, // 58: svc.infra.pay.PayService.DeletedChannelTypeMerchant:input_type -> svc.infra.pay.CommonDeletedRequest
	33, // 59: svc.infra.pay.PayService.GetChannelTypeMerchantList:input_type -> svc.infra.pay.ChannelTypeMerchantListRequest
	37, // 60: svc.infra.pay.PayService.GetChannelTypeMerchant:input_type -> svc.infra.pay.GetRecordRequest
	35, // 61: svc.infra.pay.PayService.UpdateRecordStatus:input_type -> svc.infra.pay.UpdateRecordStatusRequest
	29, // 62: svc.infra.pay.PayService.GetChargeChannelTypeList:input_type -> svc.infra.pay.ChargeChannelTypeRequest
	9,  // 63: svc.infra.pay.PayService.ArtificialRecharge:output_type -> svc.infra.pay.RechargeResponse
	9,  // 64: svc.infra.pay.PayService.Recharge:output_type -> svc.infra.pay.RechargeResponse
	17, // 65: svc.infra.pay.PayService.PayRecords:output_type -> svc.infra.pay.PayRecordResponse
	14, // 66: svc.infra.pay.PayService.OrderQuery:output_type -> svc.infra.pay.OrderQueryResponse
	12, // 67: svc.infra.pay.PayService.Notify:output_type -> svc.infra.pay.OrderNotifyResponse
	18, // 68: svc.infra.pay.PayService.DetailPayRecords:output_type -> svc.infra.pay.DetailPayRecordResponse
	10, // 69: svc.infra.pay.PayService.Reissue:output_type -> svc.infra.pay.ReissueResponse
	20, // 70: svc.infra.pay.PayService.GetChannelSupportedList:output_type -> svc.infra.pay.ChannelSupportedListResponse
	49, // 71: svc.infra.pay.PayService.CreatedChannel:output_type -> svc.infra.pay.CommonResponse
	49, // 72: svc.infra.pay.PayService.DeletedChannel:output_type -> svc.infra.pay.CommonResponse
	49, // 73: svc.infra.pay.PayService.UpdatedChannel:output_type -> svc.infra.pay.CommonResponse
	24, // 74: svc.infra.pay.PayService.GetChannelsList:output_type -> svc.infra.pay.ChannelsListResponse
	38, // 75: svc.infra.pay.PayService.GetChannel:output_type -> svc.infra.pay.GetChannelResponse
	49, // 76: svc.infra.pay.PayService.CreatedChannelType:output_type -> svc.infra.pay.CommonResponse
	49, // 77: svc.infra.pay.PayService.UpdatedChannelType:output_type -> svc.infra.pay.CommonResponse
	49, // 78: svc.infra.pay.PayService.DeletedChannelType:output_type -> svc.infra.pay.CommonResponse
	28, // 79: svc.infra.pay.PayService.GetChannelTypeList:output_type -> svc.infra.pay.ChannelTypeListResponse
	39, // 80: svc.infra.pay.PayService.GetChannelType:output_type -> svc.infra.pay.GetChannelTypeResponse
	49, // 81: svc.infra.pay.PayService.CreatedChannelTypeMerchant:output_type -> svc.infra.pay.CommonResponse
	49, // 82: svc.infra.pay.PayService.UpdatedChannelTypeMerchant:output_type -> svc.infra.pay.CommonResponse
	49, // 83: svc.infra.pay.PayService.DeletedChannelTypeMerchant:output_type -> svc.infra.pay.CommonResponse
	34, // 84: svc.infra.pay.PayService.GetChannelTypeMerchantList:output_type -> svc.infra.pay.ChannelTypeMerchantListResponse
	40, // 85: svc.infra.pay.PayService.GetChannelTypeMerchant:output_type -> svc.infra.pay.GetChannelTypeMerchantResponse
	36, // 86: svc.infra.pay.PayService.UpdateRecordStatus:output_type -> svc.infra.pay.UpdateRecordStatusResponse
	30, // 87: svc.infra.pay.PayService.GetChargeChannelTypeList:output_type -> svc.infra.pay.ChargeChannelTypeResponse
	63, // [63:88] is the sub-list for method output_type
	38, // [38:63] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_svc_infra_pay_pay_proto_init() }
func file_svc_infra_pay_pay_proto_init() {
	if File_svc_infra_pay_pay_proto != nil {
		return
	}
	file_svc_infra_pay_comm_inc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svc_infra_pay_pay_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PayRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DetailPayRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReissueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RechargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RechargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReissueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*OrderNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OrderNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OrderQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*OrderQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PayRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DetailPayRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PayRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DetailPayRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelSupportedListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelSupportedListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CreatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CreatedChannelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedChannelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ChargeChannelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ChargeChannelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CreatedChannelTypeMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedChannelTypeMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeMerchantListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeMerchantListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRecordStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRecordStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelTypeMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelSupportedListResponse_ChannelSupported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelsListResponse_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeListResponse_ChannelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ChargeChannelTypeResponse_ChannelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_infra_pay_pay_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelTypeMerchantListResponse_ChannelTypeMerchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_svc_infra_pay_pay_proto_msgTypes[4].OneofWrappers = []any{}
	file_svc_infra_pay_pay_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_infra_pay_pay_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_infra_pay_pay_proto_goTypes,
		DependencyIndexes: file_svc_infra_pay_pay_proto_depIdxs,
		EnumInfos:         file_svc_infra_pay_pay_proto_enumTypes,
		MessageInfos:      file_svc_infra_pay_pay_proto_msgTypes,
	}.Build()
	File_svc_infra_pay_pay_proto = out.File
	file_svc_infra_pay_pay_proto_rawDesc = nil
	file_svc_infra_pay_pay_proto_goTypes = nil
	file_svc_infra_pay_pay_proto_depIdxs = nil
}
