// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.infra.pay/pay.proto

package pay

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayService service

func NewPayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayService service

type PayService interface {
	// 人工充值 for dashboard
	ArtificialRecharge(ctx context.Context, in *RechargeRequest, opts ...client.CallOption) (*RechargeResponse, error)
	// 充值 for client
	Recharge(ctx context.Context, in *RechargeRequest, opts ...client.CallOption) (*RechargeResponse, error)
	// 充值记录
	PayRecords(ctx context.Context, in *PayRecordRequest, opts ...client.CallOption) (*PayRecordResponse, error)
	// 订单查询
	OrderQuery(ctx context.Context, in *OrderQueryRequest, opts ...client.CallOption) (*OrderQueryResponse, error)
	// 回调通知
	Notify(ctx context.Context, in *OrderNotifyRequest, opts ...client.CallOption) (*OrderNotifyResponse, error)
	// 详细的充值订单记录
	DetailPayRecords(ctx context.Context, in *DetailPayRecordRequest, opts ...client.CallOption) (*DetailPayRecordResponse, error)
	// ChannelSupportedList api for dashbaord
	GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, opts ...client.CallOption) (*ChannelSupportedListResponse, error)
	// Channel
	CreatedChannel(ctx context.Context, in *CreatedChannelRequest, opts ...client.CallOption) (*CommonResponse, error)
	// DeletedChannel delete useless channel rows
	DeletedChannel(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error)
	// UpdatedChannel update channel basic information
	UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, opts ...client.CallOption) (*CommonResponse, error)
	// GetChannelsList fetch channel list api for dashboard
	GetChannelsList(ctx context.Context, in *ChannelsListRequest, opts ...client.CallOption) (*ChannelsListResponse, error)
	GetChannel(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelResponse, error)
	// CreatedChannelType created channel types api for dashboard
	CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, opts ...client.CallOption) (*CommonResponse, error)
	// UpdatedChannelType updated channel types api for dashboard
	UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, opts ...client.CallOption) (*CommonResponse, error)
	// DeletedChannelType deleted channel types api for dashboard
	DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error)
	// GetChannelTypeList fetch channel types api for dashboard
	GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, opts ...client.CallOption) (*ChannelTypeListResponse, error)
	GetChannelType(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelTypeResponse, error)
	// CreatedChannelTypeMerchant merchant channel type created api for dashboard
	CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, opts ...client.CallOption) (*CommonResponse, error)
	// UpdatedChannelTypeMerchant merchant channel type updated api for dashboard
	UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, opts ...client.CallOption) (*CommonResponse, error)
	// DeletedChannelTypeMerchant merchant channel type deleted api for dashboard
	DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error)
	// GetChannelTypeMerchantList merchant channel type list api for dashboard
	GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, opts ...client.CallOption) (*ChannelTypeMerchantListResponse, error)
	GetChannelTypeMerchant(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelTypeMerchantResponse, error)
	// 更新记录状态
	UpdateRecordStatus(ctx context.Context, in *UpdateRecordStatusRequest, opts ...client.CallOption) (*UpdateRecordStatusResponse, error)
	// GetChargeChannelTypeList fetch charge channel list api for viewer layer
	GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, opts ...client.CallOption) (*ChargeChannelTypeResponse, error)
}

type payService struct {
	c    client.Client
	name string
}

func NewPayService(name string, c client.Client) PayService {
	return &payService{
		c:    c,
		name: name,
	}
}

func (c *payService) ArtificialRecharge(ctx context.Context, in *RechargeRequest, opts ...client.CallOption) (*RechargeResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.ArtificialRecharge", in)
	out := new(RechargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) Recharge(ctx context.Context, in *RechargeRequest, opts ...client.CallOption) (*RechargeResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.Recharge", in)
	out := new(RechargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) PayRecords(ctx context.Context, in *PayRecordRequest, opts ...client.CallOption) (*PayRecordResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.PayRecords", in)
	out := new(PayRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) OrderQuery(ctx context.Context, in *OrderQueryRequest, opts ...client.CallOption) (*OrderQueryResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.OrderQuery", in)
	out := new(OrderQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) Notify(ctx context.Context, in *OrderNotifyRequest, opts ...client.CallOption) (*OrderNotifyResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.Notify", in)
	out := new(OrderNotifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) DetailPayRecords(ctx context.Context, in *DetailPayRecordRequest, opts ...client.CallOption) (*DetailPayRecordResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.DetailPayRecords", in)
	out := new(DetailPayRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, opts ...client.CallOption) (*ChannelSupportedListResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelSupportedList", in)
	out := new(ChannelSupportedListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) CreatedChannel(ctx context.Context, in *CreatedChannelRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.CreatedChannel", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) DeletedChannel(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.DeletedChannel", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.UpdatedChannel", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelsList(ctx context.Context, in *ChannelsListRequest, opts ...client.CallOption) (*ChannelsListResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelsList", in)
	out := new(ChannelsListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannel(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannel", in)
	out := new(GetChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.CreatedChannelType", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.UpdatedChannelType", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.DeletedChannelType", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, opts ...client.CallOption) (*ChannelTypeListResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelTypeList", in)
	out := new(ChannelTypeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelType(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelTypeResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelType", in)
	out := new(GetChannelTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.CreatedChannelTypeMerchant", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.UpdatedChannelTypeMerchant", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.DeletedChannelTypeMerchant", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, opts ...client.CallOption) (*ChannelTypeMerchantListResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelTypeMerchantList", in)
	out := new(ChannelTypeMerchantListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChannelTypeMerchant(ctx context.Context, in *GetRecordRequest, opts ...client.CallOption) (*GetChannelTypeMerchantResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChannelTypeMerchant", in)
	out := new(GetChannelTypeMerchantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) UpdateRecordStatus(ctx context.Context, in *UpdateRecordStatusRequest, opts ...client.CallOption) (*UpdateRecordStatusResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.UpdateRecordStatus", in)
	out := new(UpdateRecordStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, opts ...client.CallOption) (*ChargeChannelTypeResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.GetChargeChannelTypeList", in)
	out := new(ChargeChannelTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayService service

type PayServiceHandler interface {
	// 人工充值 for dashboard
	ArtificialRecharge(context.Context, *RechargeRequest, *RechargeResponse) error
	// 充值 for client
	Recharge(context.Context, *RechargeRequest, *RechargeResponse) error
	// 充值记录
	PayRecords(context.Context, *PayRecordRequest, *PayRecordResponse) error
	// 订单查询
	OrderQuery(context.Context, *OrderQueryRequest, *OrderQueryResponse) error
	// 回调通知
	Notify(context.Context, *OrderNotifyRequest, *OrderNotifyResponse) error
	// 详细的充值订单记录
	DetailPayRecords(context.Context, *DetailPayRecordRequest, *DetailPayRecordResponse) error
	// ChannelSupportedList api for dashbaord
	GetChannelSupportedList(context.Context, *ChannelSupportedListRequest, *ChannelSupportedListResponse) error
	// Channel
	CreatedChannel(context.Context, *CreatedChannelRequest, *CommonResponse) error
	// DeletedChannel delete useless channel rows
	DeletedChannel(context.Context, *CommonDeletedRequest, *CommonResponse) error
	// UpdatedChannel update channel basic information
	UpdatedChannel(context.Context, *UpdatedChannelRequest, *CommonResponse) error
	// GetChannelsList fetch channel list api for dashboard
	GetChannelsList(context.Context, *ChannelsListRequest, *ChannelsListResponse) error
	GetChannel(context.Context, *GetRecordRequest, *GetChannelResponse) error
	// CreatedChannelType created channel types api for dashboard
	CreatedChannelType(context.Context, *CreatedChannelTypeRequest, *CommonResponse) error
	// UpdatedChannelType updated channel types api for dashboard
	UpdatedChannelType(context.Context, *UpdatedChannelTypeRequest, *CommonResponse) error
	// DeletedChannelType deleted channel types api for dashboard
	DeletedChannelType(context.Context, *CommonDeletedRequest, *CommonResponse) error
	// GetChannelTypeList fetch channel types api for dashboard
	GetChannelTypeList(context.Context, *ChannelTypeListRequest, *ChannelTypeListResponse) error
	GetChannelType(context.Context, *GetRecordRequest, *GetChannelTypeResponse) error
	// CreatedChannelTypeMerchant merchant channel type created api for dashboard
	CreatedChannelTypeMerchant(context.Context, *CreatedChannelTypeMerchantRequest, *CommonResponse) error
	// UpdatedChannelTypeMerchant merchant channel type updated api for dashboard
	UpdatedChannelTypeMerchant(context.Context, *UpdatedChannelTypeMerchantRequest, *CommonResponse) error
	// DeletedChannelTypeMerchant merchant channel type deleted api for dashboard
	DeletedChannelTypeMerchant(context.Context, *CommonDeletedRequest, *CommonResponse) error
	// GetChannelTypeMerchantList merchant channel type list api for dashboard
	GetChannelTypeMerchantList(context.Context, *ChannelTypeMerchantListRequest, *ChannelTypeMerchantListResponse) error
	GetChannelTypeMerchant(context.Context, *GetRecordRequest, *GetChannelTypeMerchantResponse) error
	// 更新记录状态
	UpdateRecordStatus(context.Context, *UpdateRecordStatusRequest, *UpdateRecordStatusResponse) error
	// GetChargeChannelTypeList fetch charge channel list api for viewer layer
	GetChargeChannelTypeList(context.Context, *ChargeChannelTypeRequest, *ChargeChannelTypeResponse) error
}

func RegisterPayServiceHandler(s server.Server, hdlr PayServiceHandler, opts ...server.HandlerOption) error {
	type payService interface {
		ArtificialRecharge(ctx context.Context, in *RechargeRequest, out *RechargeResponse) error
		Recharge(ctx context.Context, in *RechargeRequest, out *RechargeResponse) error
		PayRecords(ctx context.Context, in *PayRecordRequest, out *PayRecordResponse) error
		OrderQuery(ctx context.Context, in *OrderQueryRequest, out *OrderQueryResponse) error
		Notify(ctx context.Context, in *OrderNotifyRequest, out *OrderNotifyResponse) error
		DetailPayRecords(ctx context.Context, in *DetailPayRecordRequest, out *DetailPayRecordResponse) error
		GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, out *ChannelSupportedListResponse) error
		CreatedChannel(ctx context.Context, in *CreatedChannelRequest, out *CommonResponse) error
		DeletedChannel(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error
		UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, out *CommonResponse) error
		GetChannelsList(ctx context.Context, in *ChannelsListRequest, out *ChannelsListResponse) error
		GetChannel(ctx context.Context, in *GetRecordRequest, out *GetChannelResponse) error
		CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, out *CommonResponse) error
		UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, out *CommonResponse) error
		DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error
		GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, out *ChannelTypeListResponse) error
		GetChannelType(ctx context.Context, in *GetRecordRequest, out *GetChannelTypeResponse) error
		CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, out *CommonResponse) error
		UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, out *CommonResponse) error
		DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error
		GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, out *ChannelTypeMerchantListResponse) error
		GetChannelTypeMerchant(ctx context.Context, in *GetRecordRequest, out *GetChannelTypeMerchantResponse) error
		UpdateRecordStatus(ctx context.Context, in *UpdateRecordStatusRequest, out *UpdateRecordStatusResponse) error
		GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, out *ChargeChannelTypeResponse) error
	}
	type PayService struct {
		payService
	}
	h := &payServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayService{h}, opts...))
}

type payServiceHandler struct {
	PayServiceHandler
}

func (h *payServiceHandler) ArtificialRecharge(ctx context.Context, in *RechargeRequest, out *RechargeResponse) error {
	return h.PayServiceHandler.ArtificialRecharge(ctx, in, out)
}

func (h *payServiceHandler) Recharge(ctx context.Context, in *RechargeRequest, out *RechargeResponse) error {
	return h.PayServiceHandler.Recharge(ctx, in, out)
}

func (h *payServiceHandler) PayRecords(ctx context.Context, in *PayRecordRequest, out *PayRecordResponse) error {
	return h.PayServiceHandler.PayRecords(ctx, in, out)
}

func (h *payServiceHandler) OrderQuery(ctx context.Context, in *OrderQueryRequest, out *OrderQueryResponse) error {
	return h.PayServiceHandler.OrderQuery(ctx, in, out)
}

func (h *payServiceHandler) Notify(ctx context.Context, in *OrderNotifyRequest, out *OrderNotifyResponse) error {
	return h.PayServiceHandler.Notify(ctx, in, out)
}

func (h *payServiceHandler) DetailPayRecords(ctx context.Context, in *DetailPayRecordRequest, out *DetailPayRecordResponse) error {
	return h.PayServiceHandler.DetailPayRecords(ctx, in, out)
}

func (h *payServiceHandler) GetChannelSupportedList(ctx context.Context, in *ChannelSupportedListRequest, out *ChannelSupportedListResponse) error {
	return h.PayServiceHandler.GetChannelSupportedList(ctx, in, out)
}

func (h *payServiceHandler) CreatedChannel(ctx context.Context, in *CreatedChannelRequest, out *CommonResponse) error {
	return h.PayServiceHandler.CreatedChannel(ctx, in, out)
}

func (h *payServiceHandler) DeletedChannel(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error {
	return h.PayServiceHandler.DeletedChannel(ctx, in, out)
}

func (h *payServiceHandler) UpdatedChannel(ctx context.Context, in *UpdatedChannelRequest, out *CommonResponse) error {
	return h.PayServiceHandler.UpdatedChannel(ctx, in, out)
}

func (h *payServiceHandler) GetChannelsList(ctx context.Context, in *ChannelsListRequest, out *ChannelsListResponse) error {
	return h.PayServiceHandler.GetChannelsList(ctx, in, out)
}

func (h *payServiceHandler) GetChannel(ctx context.Context, in *GetRecordRequest, out *GetChannelResponse) error {
	return h.PayServiceHandler.GetChannel(ctx, in, out)
}

func (h *payServiceHandler) CreatedChannelType(ctx context.Context, in *CreatedChannelTypeRequest, out *CommonResponse) error {
	return h.PayServiceHandler.CreatedChannelType(ctx, in, out)
}

func (h *payServiceHandler) UpdatedChannelType(ctx context.Context, in *UpdatedChannelTypeRequest, out *CommonResponse) error {
	return h.PayServiceHandler.UpdatedChannelType(ctx, in, out)
}

func (h *payServiceHandler) DeletedChannelType(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error {
	return h.PayServiceHandler.DeletedChannelType(ctx, in, out)
}

func (h *payServiceHandler) GetChannelTypeList(ctx context.Context, in *ChannelTypeListRequest, out *ChannelTypeListResponse) error {
	return h.PayServiceHandler.GetChannelTypeList(ctx, in, out)
}

func (h *payServiceHandler) GetChannelType(ctx context.Context, in *GetRecordRequest, out *GetChannelTypeResponse) error {
	return h.PayServiceHandler.GetChannelType(ctx, in, out)
}

func (h *payServiceHandler) CreatedChannelTypeMerchant(ctx context.Context, in *CreatedChannelTypeMerchantRequest, out *CommonResponse) error {
	return h.PayServiceHandler.CreatedChannelTypeMerchant(ctx, in, out)
}

func (h *payServiceHandler) UpdatedChannelTypeMerchant(ctx context.Context, in *UpdatedChannelTypeMerchantRequest, out *CommonResponse) error {
	return h.PayServiceHandler.UpdatedChannelTypeMerchant(ctx, in, out)
}

func (h *payServiceHandler) DeletedChannelTypeMerchant(ctx context.Context, in *CommonDeletedRequest, out *CommonResponse) error {
	return h.PayServiceHandler.DeletedChannelTypeMerchant(ctx, in, out)
}

func (h *payServiceHandler) GetChannelTypeMerchantList(ctx context.Context, in *ChannelTypeMerchantListRequest, out *ChannelTypeMerchantListResponse) error {
	return h.PayServiceHandler.GetChannelTypeMerchantList(ctx, in, out)
}

func (h *payServiceHandler) GetChannelTypeMerchant(ctx context.Context, in *GetRecordRequest, out *GetChannelTypeMerchantResponse) error {
	return h.PayServiceHandler.GetChannelTypeMerchant(ctx, in, out)
}

func (h *payServiceHandler) UpdateRecordStatus(ctx context.Context, in *UpdateRecordStatusRequest, out *UpdateRecordStatusResponse) error {
	return h.PayServiceHandler.UpdateRecordStatus(ctx, in, out)
}

func (h *payServiceHandler) GetChargeChannelTypeList(ctx context.Context, in *ChargeChannelTypeRequest, out *ChargeChannelTypeResponse) error {
	return h.PayServiceHandler.GetChargeChannelTypeList(ctx, in, out)
}
