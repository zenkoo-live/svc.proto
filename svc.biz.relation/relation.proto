syntax = "proto3";

package svc.biz.relation;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package="./svc.biz.relation;relation";

service Relation {
    // RelationAdd 新建关系
    rpc RelationAdd (RelationAddReq) returns (google.protobuf.Empty);
    // RelationGet 获取关系
    rpc RelationGet (RelationGetReq) returns (RelationGetResp);
    // RelationDel 删除关系
    rpc RelationDel (RelationDelReq) returns (google.protobuf.Empty);
    // RelationCheck 关系检测
    rpc RelationCheck (RelationCheckReq) returns (RelationCheckResp);
    // RelationMCheck 批量关系检测
    rpc RelationMCheck (RelationMCheckReq) returns (RelationMCheckResp);
    // GetRelationCount 获取关系数量
    rpc GetRelationCount (GetRelationCountReq) returns (GetRelationCountResp);
    // GetRelationList 获取关系列表
    rpc GetRelationList (GetRelationListReq) returns (GetRelationListResp);
}

enum RelationType {
    RelationTypeUnknown = 0; // 未知

    RelationTypeFollow = 101; // 关注主播
    RelationTypeHistory = 102; // 观看历史

    RelationTypeMuzzle = 201; // 禁言

    RelationTypeBlacklistViewer = 301; // 用户黑名单
    RelationTypeBlacklistStreamer = 302; // 主播黑名单
    RelationTypeBlacklistIP = 303; // ip黑名单
    RelationTypeBlacklistDevice = 304; // 设备黑名单

    RelationTypeSuperManager = 401; // 超级管理员
    RelationTypeRoomManager = 402; // 房间管理员
}

message RelationInfo {
    RelationType relation_type = 1; // 关系类型
    string member_id = 2; // 成员（名单属于谁）
    string r_member_id = 3; // 产生关系的成员（名单内有谁；当为ip或者设备号时不是uuid格式）
    google.protobuf.Timestamp build_time = 4; // 建立关系时间（默认会按照此字段排序）
    google.protobuf.Timestamp expire_time = 5; // 过期时间（可无，为空则永久有效）
    string operator_id = 6; // 操作人
    string remark = 7; // 备注

    google.protobuf.Timestamp created_at = 101; // 创建时间
    google.protobuf.Timestamp updated_at = 102; // 更新时间
}

message RelationAddReq {
    RelationInfo relation_info = 1;
}

message RelationGetReq {
    RelationType relation_type = 1;
    string member_id = 2; // 成员
    string r_member_id = 3; // 产生关系的成员
}
message RelationGetResp {
    RelationInfo relation_info = 1;
}

message RelationDelReq {
    RelationType relation_type = 1;
    string member_id = 2; // 成员
    string r_member_id = 3; // 产生关系的成员
}


message RelationCheckReq {
    RelationType relation_type = 1;
    string member_id = 2; // 成员
    string r_member_id = 3; // 产生关系的成员
}
message RelationCheckResp {
    bool result = 1;
}

message RelationMCheckReq {
    RelationType relation_type = 1;
    string member_id = 2; // 成员
    repeated string r_member_ids = 3; // 产生关系的成员列表
}
message RelationMCheckResp {
    map<string, bool> result = 1;
}

message GetRelationCountReq  {
    RelationType relation_type = 1;
    string member_id = 2; 
    google.protobuf.Timestamp build_start_time = 3; 
    google.protobuf.Timestamp build_end_time = 4;
}
message GetRelationCountResp {
    int64 count = 1;
}

message GetRelationListReq {
    RelationType relation_type = 1;
    string member_id = 2; 
    int64 page = 3;
    int64 limit = 4;
}
message GetRelationListResp {
    repeated RelationInfo items = 1;
}