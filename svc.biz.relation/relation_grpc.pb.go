// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: svc.biz.relation/relation.proto

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Relation_RelationAdd_FullMethodName      = "/svc.biz.relation.Relation/RelationAdd"
	Relation_RelationGet_FullMethodName      = "/svc.biz.relation.Relation/RelationGet"
	Relation_RelationDel_FullMethodName      = "/svc.biz.relation.Relation/RelationDel"
	Relation_RelationCheck_FullMethodName    = "/svc.biz.relation.Relation/RelationCheck"
	Relation_GetRelationCount_FullMethodName = "/svc.biz.relation.Relation/GetRelationCount"
	Relation_GetRelationList_FullMethodName  = "/svc.biz.relation.Relation/GetRelationList"
)

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	RelationAdd(ctx context.Context, in *RelationAddReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RelationGet(ctx context.Context, in *RelationGetReq, opts ...grpc.CallOption) (*RelationGetResp, error)
	RelationDel(ctx context.Context, in *RelationDelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RelationCheck(ctx context.Context, in *RelationCheckReq, opts ...grpc.CallOption) (*RelationCheckResp, error)
	GetRelationCount(ctx context.Context, in *GetRelationCountReq, opts ...grpc.CallOption) (*GetRelationCountResp, error)
	GetRelationList(ctx context.Context, in *GetRelationListReq, opts ...grpc.CallOption) (*GetRelationListResp, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) RelationAdd(ctx context.Context, in *RelationAddReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Relation_RelationAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationGet(ctx context.Context, in *RelationGetReq, opts ...grpc.CallOption) (*RelationGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationGetResp)
	err := c.cc.Invoke(ctx, Relation_RelationGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationDel(ctx context.Context, in *RelationDelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Relation_RelationDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationCheck(ctx context.Context, in *RelationCheckReq, opts ...grpc.CallOption) (*RelationCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationCheckResp)
	err := c.cc.Invoke(ctx, Relation_RelationCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetRelationCount(ctx context.Context, in *GetRelationCountReq, opts ...grpc.CallOption) (*GetRelationCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationCountResp)
	err := c.cc.Invoke(ctx, Relation_GetRelationCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetRelationList(ctx context.Context, in *GetRelationListReq, opts ...grpc.CallOption) (*GetRelationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationListResp)
	err := c.cc.Invoke(ctx, Relation_GetRelationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	RelationAdd(context.Context, *RelationAddReq) (*emptypb.Empty, error)
	RelationGet(context.Context, *RelationGetReq) (*RelationGetResp, error)
	RelationDel(context.Context, *RelationDelReq) (*emptypb.Empty, error)
	RelationCheck(context.Context, *RelationCheckReq) (*RelationCheckResp, error)
	GetRelationCount(context.Context, *GetRelationCountReq) (*GetRelationCountResp, error)
	GetRelationList(context.Context, *GetRelationListReq) (*GetRelationListResp, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) RelationAdd(context.Context, *RelationAddReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAdd not implemented")
}
func (UnimplementedRelationServer) RelationGet(context.Context, *RelationGetReq) (*RelationGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationGet not implemented")
}
func (UnimplementedRelationServer) RelationDel(context.Context, *RelationDelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationDel not implemented")
}
func (UnimplementedRelationServer) RelationCheck(context.Context, *RelationCheckReq) (*RelationCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationCheck not implemented")
}
func (UnimplementedRelationServer) GetRelationCount(context.Context, *GetRelationCountReq) (*GetRelationCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationCount not implemented")
}
func (UnimplementedRelationServer) GetRelationList(context.Context, *GetRelationListReq) (*GetRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationList not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_RelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_RelationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationAdd(ctx, req.(*RelationAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_RelationGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationGet(ctx, req.(*RelationGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_RelationDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationDel(ctx, req.(*RelationDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_RelationCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationCheck(ctx, req.(*RelationCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetRelationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetRelationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetRelationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetRelationCount(ctx, req.(*GetRelationCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetRelationList(ctx, req.(*GetRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.relation.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAdd",
			Handler:    _Relation_RelationAdd_Handler,
		},
		{
			MethodName: "RelationGet",
			Handler:    _Relation_RelationGet_Handler,
		},
		{
			MethodName: "RelationDel",
			Handler:    _Relation_RelationDel_Handler,
		},
		{
			MethodName: "RelationCheck",
			Handler:    _Relation_RelationCheck_Handler,
		},
		{
			MethodName: "GetRelationCount",
			Handler:    _Relation_GetRelationCount_Handler,
		},
		{
			MethodName: "GetRelationList",
			Handler:    _Relation_GetRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.relation/relation.proto",
}
