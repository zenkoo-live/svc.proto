// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: svc.biz.relation/relation.proto

package relation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationType int32

const (
	RelationType_RelationTypeUnknown           RelationType = 0   // 未知
	RelationType_RelationTypeFollow            RelationType = 101 // 关注主播
	RelationType_RelationTypeHistory           RelationType = 102 // 观看历史
	RelationType_RelationTypeMuzzle            RelationType = 201 // 禁言
	RelationType_RelationTypeBlacklistViewer   RelationType = 301 // 用户黑名单
	RelationType_RelationTypeBlacklistStreamer RelationType = 302 // 主播黑名单
	RelationType_RelationTypeBlacklistIP       RelationType = 303 // ip黑名单
	RelationType_RelationTypeBlacklistDevice   RelationType = 304 // 设备黑名单
	RelationType_RelationTypeSuperManager      RelationType = 401 // 超级管理员
	RelationType_RelationTypeRoomManager       RelationType = 402 // 房间管理员
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0:   "RelationTypeUnknown",
		101: "RelationTypeFollow",
		102: "RelationTypeHistory",
		201: "RelationTypeMuzzle",
		301: "RelationTypeBlacklistViewer",
		302: "RelationTypeBlacklistStreamer",
		303: "RelationTypeBlacklistIP",
		304: "RelationTypeBlacklistDevice",
		401: "RelationTypeSuperManager",
		402: "RelationTypeRoomManager",
	}
	RelationType_value = map[string]int32{
		"RelationTypeUnknown":           0,
		"RelationTypeFollow":            101,
		"RelationTypeHistory":           102,
		"RelationTypeMuzzle":            201,
		"RelationTypeBlacklistViewer":   301,
		"RelationTypeBlacklistStreamer": 302,
		"RelationTypeBlacklistIP":       303,
		"RelationTypeBlacklistDevice":   304,
		"RelationTypeSuperManager":      401,
		"RelationTypeRoomManager":       402,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_relation_relation_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_svc_biz_relation_relation_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{0}
}

type RelationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"` // 关系类型
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`                                                 // 成员（名单属于谁）
	RMemberId     string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"`                                            // 产生关系的成员（名单内有谁；当为ip或者设备号时不是uuid格式）
	BuildTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`                                              // 建立关系时间（默认会按照此字段排序）
	ExpireTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`                                           // 过期时间（可无，为空则永久有效）
	OperatorId    string                 `protobuf:"bytes,6,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                                           // 操作人
	Remark        string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`                                                                     // 备注
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                            // 创建时间
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                            // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationInfo) Reset() {
	*x = RelationInfo{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationInfo) ProtoMessage() {}

func (x *RelationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationInfo.ProtoReflect.Descriptor instead.
func (*RelationInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{0}
}

func (x *RelationInfo) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *RelationInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RelationInfo) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

func (x *RelationInfo) GetBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildTime
	}
	return nil
}

func (x *RelationInfo) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RelationInfo) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *RelationInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RelationInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RelationInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RelationAddReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationInfo  *RelationInfo          `protobuf:"bytes,1,opt,name=relation_info,json=relationInfo,proto3" json:"relation_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationAddReq) Reset() {
	*x = RelationAddReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationAddReq) ProtoMessage() {}

func (x *RelationAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationAddReq.ProtoReflect.Descriptor instead.
func (*RelationAddReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{1}
}

func (x *RelationAddReq) GetRelationInfo() *RelationInfo {
	if x != nil {
		return x.RelationInfo
	}
	return nil
}

type RelationGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`      // 成员
	RMemberId     string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"` // 产生关系的成员
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationGetReq) Reset() {
	*x = RelationGetReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationGetReq) ProtoMessage() {}

func (x *RelationGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationGetReq.ProtoReflect.Descriptor instead.
func (*RelationGetReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{2}
}

func (x *RelationGetReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *RelationGetReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RelationGetReq) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

type RelationGetResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationInfo  *RelationInfo          `protobuf:"bytes,1,opt,name=relation_info,json=relationInfo,proto3" json:"relation_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationGetResp) Reset() {
	*x = RelationGetResp{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationGetResp) ProtoMessage() {}

func (x *RelationGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationGetResp.ProtoReflect.Descriptor instead.
func (*RelationGetResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{3}
}

func (x *RelationGetResp) GetRelationInfo() *RelationInfo {
	if x != nil {
		return x.RelationInfo
	}
	return nil
}

type RelationDelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`      // 成员
	RMemberId     string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"` // 产生关系的成员
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationDelReq) Reset() {
	*x = RelationDelReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationDelReq) ProtoMessage() {}

func (x *RelationDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationDelReq.ProtoReflect.Descriptor instead.
func (*RelationDelReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{4}
}

func (x *RelationDelReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *RelationDelReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RelationDelReq) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

type RelationCheckReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`      // 成员
	RMemberId     string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"` // 产生关系的成员
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationCheckReq) Reset() {
	*x = RelationCheckReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationCheckReq) ProtoMessage() {}

func (x *RelationCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationCheckReq.ProtoReflect.Descriptor instead.
func (*RelationCheckReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{5}
}

func (x *RelationCheckReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *RelationCheckReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RelationCheckReq) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

type RelationCheckResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationCheckResp) Reset() {
	*x = RelationCheckResp{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationCheckResp) ProtoMessage() {}

func (x *RelationCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationCheckResp.ProtoReflect.Descriptor instead.
func (*RelationCheckResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{6}
}

func (x *RelationCheckResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type RelationMCheckReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`         // 成员
	RMemberIds    []string               `protobuf:"bytes,3,rep,name=r_member_ids,json=rMemberIds,proto3" json:"r_member_ids,omitempty"` // 产生关系的成员列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationMCheckReq) Reset() {
	*x = RelationMCheckReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationMCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationMCheckReq) ProtoMessage() {}

func (x *RelationMCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationMCheckReq.ProtoReflect.Descriptor instead.
func (*RelationMCheckReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{7}
}

func (x *RelationMCheckReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *RelationMCheckReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RelationMCheckReq) GetRMemberIds() []string {
	if x != nil {
		return x.RMemberIds
	}
	return nil
}

type RelationMCheckResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        map[string]bool        `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationMCheckResp) Reset() {
	*x = RelationMCheckResp{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationMCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationMCheckResp) ProtoMessage() {}

func (x *RelationMCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationMCheckResp.ProtoReflect.Descriptor instead.
func (*RelationMCheckResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{8}
}

func (x *RelationMCheckResp) GetResult() map[string]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetRelationCountReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RelationType   RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId       string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`      // 正向关系传这个
	RMemberId      string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"` // 反向关系传这个
	BuildStartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=build_start_time,json=buildStartTime,proto3" json:"build_start_time,omitempty"`
	BuildEndTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=build_end_time,json=buildEndTime,proto3" json:"build_end_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetRelationCountReq) Reset() {
	*x = GetRelationCountReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRelationCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationCountReq) ProtoMessage() {}

func (x *GetRelationCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationCountReq.ProtoReflect.Descriptor instead.
func (*GetRelationCountReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{9}
}

func (x *GetRelationCountReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *GetRelationCountReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GetRelationCountReq) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

func (x *GetRelationCountReq) GetBuildStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildStartTime
	}
	return nil
}

func (x *GetRelationCountReq) GetBuildEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildEndTime
	}
	return nil
}

type GetRelationCountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRelationCountResp) Reset() {
	*x = GetRelationCountResp{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRelationCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationCountResp) ProtoMessage() {}

func (x *GetRelationCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationCountResp.ProtoReflect.Descriptor instead.
func (*GetRelationCountResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{10}
}

func (x *GetRelationCountResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRelationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelationType  RelationType           `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=svc.biz.relation.RelationType" json:"relation_type,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`      // 正向关系传这个
	RMemberId     string                 `protobuf:"bytes,3,opt,name=r_member_id,json=rMemberId,proto3" json:"r_member_id,omitempty"` // 反向关系传这个
	Page          int64                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int64                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRelationListReq) Reset() {
	*x = GetRelationListReq{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationListReq) ProtoMessage() {}

func (x *GetRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationListReq.ProtoReflect.Descriptor instead.
func (*GetRelationListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{11}
}

func (x *GetRelationListReq) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RelationTypeUnknown
}

func (x *GetRelationListReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GetRelationListReq) GetRMemberId() string {
	if x != nil {
		return x.RMemberId
	}
	return ""
}

func (x *GetRelationListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRelationListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRelationListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*RelationInfo        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRelationListResp) Reset() {
	*x = GetRelationListResp{}
	mi := &file_svc_biz_relation_relation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRelationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationListResp) ProtoMessage() {}

func (x *GetRelationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_relation_relation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationListResp.ProtoReflect.Descriptor instead.
func (*GetRelationListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_relation_relation_proto_rawDescGZIP(), []int{12}
}

func (x *GetRelationListResp) GetItems() []*RelationInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_svc_biz_relation_relation_proto protoreflect.FileDescriptor

var file_svc_biz_relation_relation_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb7, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x0e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x11, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x43,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f,
	0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc0,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0xb4,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x66, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x10,
	0xc9, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x10, 0xad, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x10, 0xae, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x50, 0x10, 0xaf, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0xb0, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x10, 0x91, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x10, 0x92, 0x03, 0x32, 0xea, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x47, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x20,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5b, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_relation_relation_proto_rawDescOnce sync.Once
	file_svc_biz_relation_relation_proto_rawDescData = file_svc_biz_relation_relation_proto_rawDesc
)

func file_svc_biz_relation_relation_proto_rawDescGZIP() []byte {
	file_svc_biz_relation_relation_proto_rawDescOnce.Do(func() {
		file_svc_biz_relation_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_relation_relation_proto_rawDescData)
	})
	return file_svc_biz_relation_relation_proto_rawDescData
}

var file_svc_biz_relation_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_svc_biz_relation_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_svc_biz_relation_relation_proto_goTypes = []any{
	(RelationType)(0),             // 0: svc.biz.relation.RelationType
	(*RelationInfo)(nil),          // 1: svc.biz.relation.RelationInfo
	(*RelationAddReq)(nil),        // 2: svc.biz.relation.RelationAddReq
	(*RelationGetReq)(nil),        // 3: svc.biz.relation.RelationGetReq
	(*RelationGetResp)(nil),       // 4: svc.biz.relation.RelationGetResp
	(*RelationDelReq)(nil),        // 5: svc.biz.relation.RelationDelReq
	(*RelationCheckReq)(nil),      // 6: svc.biz.relation.RelationCheckReq
	(*RelationCheckResp)(nil),     // 7: svc.biz.relation.RelationCheckResp
	(*RelationMCheckReq)(nil),     // 8: svc.biz.relation.RelationMCheckReq
	(*RelationMCheckResp)(nil),    // 9: svc.biz.relation.RelationMCheckResp
	(*GetRelationCountReq)(nil),   // 10: svc.biz.relation.GetRelationCountReq
	(*GetRelationCountResp)(nil),  // 11: svc.biz.relation.GetRelationCountResp
	(*GetRelationListReq)(nil),    // 12: svc.biz.relation.GetRelationListReq
	(*GetRelationListResp)(nil),   // 13: svc.biz.relation.GetRelationListResp
	nil,                           // 14: svc.biz.relation.RelationMCheckResp.ResultEntry
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 16: google.protobuf.Empty
}
var file_svc_biz_relation_relation_proto_depIdxs = []int32{
	0,  // 0: svc.biz.relation.RelationInfo.relation_type:type_name -> svc.biz.relation.RelationType
	15, // 1: svc.biz.relation.RelationInfo.build_time:type_name -> google.protobuf.Timestamp
	15, // 2: svc.biz.relation.RelationInfo.expire_time:type_name -> google.protobuf.Timestamp
	15, // 3: svc.biz.relation.RelationInfo.created_at:type_name -> google.protobuf.Timestamp
	15, // 4: svc.biz.relation.RelationInfo.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 5: svc.biz.relation.RelationAddReq.relation_info:type_name -> svc.biz.relation.RelationInfo
	0,  // 6: svc.biz.relation.RelationGetReq.relation_type:type_name -> svc.biz.relation.RelationType
	1,  // 7: svc.biz.relation.RelationGetResp.relation_info:type_name -> svc.biz.relation.RelationInfo
	0,  // 8: svc.biz.relation.RelationDelReq.relation_type:type_name -> svc.biz.relation.RelationType
	0,  // 9: svc.biz.relation.RelationCheckReq.relation_type:type_name -> svc.biz.relation.RelationType
	0,  // 10: svc.biz.relation.RelationMCheckReq.relation_type:type_name -> svc.biz.relation.RelationType
	14, // 11: svc.biz.relation.RelationMCheckResp.result:type_name -> svc.biz.relation.RelationMCheckResp.ResultEntry
	0,  // 12: svc.biz.relation.GetRelationCountReq.relation_type:type_name -> svc.biz.relation.RelationType
	15, // 13: svc.biz.relation.GetRelationCountReq.build_start_time:type_name -> google.protobuf.Timestamp
	15, // 14: svc.biz.relation.GetRelationCountReq.build_end_time:type_name -> google.protobuf.Timestamp
	0,  // 15: svc.biz.relation.GetRelationListReq.relation_type:type_name -> svc.biz.relation.RelationType
	1,  // 16: svc.biz.relation.GetRelationListResp.items:type_name -> svc.biz.relation.RelationInfo
	2,  // 17: svc.biz.relation.Relation.RelationAdd:input_type -> svc.biz.relation.RelationAddReq
	3,  // 18: svc.biz.relation.Relation.RelationGet:input_type -> svc.biz.relation.RelationGetReq
	5,  // 19: svc.biz.relation.Relation.RelationDel:input_type -> svc.biz.relation.RelationDelReq
	6,  // 20: svc.biz.relation.Relation.RelationCheck:input_type -> svc.biz.relation.RelationCheckReq
	8,  // 21: svc.biz.relation.Relation.RelationMCheck:input_type -> svc.biz.relation.RelationMCheckReq
	10, // 22: svc.biz.relation.Relation.GetRelationCount:input_type -> svc.biz.relation.GetRelationCountReq
	12, // 23: svc.biz.relation.Relation.GetRelationList:input_type -> svc.biz.relation.GetRelationListReq
	16, // 24: svc.biz.relation.Relation.RelationAdd:output_type -> google.protobuf.Empty
	4,  // 25: svc.biz.relation.Relation.RelationGet:output_type -> svc.biz.relation.RelationGetResp
	16, // 26: svc.biz.relation.Relation.RelationDel:output_type -> google.protobuf.Empty
	7,  // 27: svc.biz.relation.Relation.RelationCheck:output_type -> svc.biz.relation.RelationCheckResp
	9,  // 28: svc.biz.relation.Relation.RelationMCheck:output_type -> svc.biz.relation.RelationMCheckResp
	11, // 29: svc.biz.relation.Relation.GetRelationCount:output_type -> svc.biz.relation.GetRelationCountResp
	13, // 30: svc.biz.relation.Relation.GetRelationList:output_type -> svc.biz.relation.GetRelationListResp
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_svc_biz_relation_relation_proto_init() }
func file_svc_biz_relation_relation_proto_init() {
	if File_svc_biz_relation_relation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_relation_relation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_relation_relation_proto_goTypes,
		DependencyIndexes: file_svc_biz_relation_relation_proto_depIdxs,
		EnumInfos:         file_svc_biz_relation_relation_proto_enumTypes,
		MessageInfos:      file_svc_biz_relation_relation_proto_msgTypes,
	}.Build()
	File_svc_biz_relation_relation_proto = out.File
	file_svc_biz_relation_relation_proto_rawDesc = nil
	file_svc_biz_relation_relation_proto_goTypes = nil
	file_svc_biz_relation_relation_proto_depIdxs = nil
}
