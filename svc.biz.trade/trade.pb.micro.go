// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.trade/trade.proto

package trade

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Trade service

func NewTradeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Trade service

type TradeService interface {
	SendGiftInLive(ctx context.Context, in *SendGiftInLiveReq, opts ...client.CallOption) (*SendGiftInLiveResp, error)
	BuyLiveTicket(ctx context.Context, in *BuyLiveTicketReq, opts ...client.CallOption) (*BuyLiveTicketResp, error)
	PayLiveDurationFee(ctx context.Context, in *PayLiveDurationFeeReq, opts ...client.CallOption) (*PayLiveDurationFeeResp, error)
	JoinAnchorFansGroup(ctx context.Context, in *JoinAnchorFansGroupReq, opts ...client.CallOption) (*JoinAnchorFansGroupResp, error)
	PayBulletChat(ctx context.Context, in *PayBulletChatReq, opts ...client.CallOption) (*PayBulletChatResp, error)
	VipActivate(ctx context.Context, in *VipActivateReq, opts ...client.CallOption) (*VipActivateResp, error)
	VipExtend(ctx context.Context, in *VipExtendReq, opts ...client.CallOption) (*VipExtendResp, error)
	VipUpgrade(ctx context.Context, in *VipUpgradeReq, opts ...client.CallOption) (*VipUpgradeResp, error)
	BuyRide(ctx context.Context, in *BuyRideReq, opts ...client.CallOption) (*BuyRideResp, error)
	BuyLuckyId(ctx context.Context, in *BuyLuckyIdReq, opts ...client.CallOption) (*BuyLuckyIdResp, error)
	MoneyRecharge(ctx context.Context, in *MoneyRechargeReq, opts ...client.CallOption) (*MoneyRechargeResp, error)
	MoneyWithdraw(ctx context.Context, in *MoneyWithdrawReq, opts ...client.CallOption) (*MoneyWithdrawResp, error)
	MoneyExchangeCoin(ctx context.Context, in *MoneyExchangeCoinReq, opts ...client.CallOption) (*MoneyExchangeCoinResp, error)
}

type tradeService struct {
	c    client.Client
	name string
}

func NewTradeService(name string, c client.Client) TradeService {
	return &tradeService{
		c:    c,
		name: name,
	}
}

func (c *tradeService) SendGiftInLive(ctx context.Context, in *SendGiftInLiveReq, opts ...client.CallOption) (*SendGiftInLiveResp, error) {
	req := c.c.NewRequest(c.name, "Trade.SendGiftInLive", in)
	out := new(SendGiftInLiveResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) BuyLiveTicket(ctx context.Context, in *BuyLiveTicketReq, opts ...client.CallOption) (*BuyLiveTicketResp, error) {
	req := c.c.NewRequest(c.name, "Trade.BuyLiveTicket", in)
	out := new(BuyLiveTicketResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) PayLiveDurationFee(ctx context.Context, in *PayLiveDurationFeeReq, opts ...client.CallOption) (*PayLiveDurationFeeResp, error) {
	req := c.c.NewRequest(c.name, "Trade.PayLiveDurationFee", in)
	out := new(PayLiveDurationFeeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) JoinAnchorFansGroup(ctx context.Context, in *JoinAnchorFansGroupReq, opts ...client.CallOption) (*JoinAnchorFansGroupResp, error) {
	req := c.c.NewRequest(c.name, "Trade.JoinAnchorFansGroup", in)
	out := new(JoinAnchorFansGroupResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) PayBulletChat(ctx context.Context, in *PayBulletChatReq, opts ...client.CallOption) (*PayBulletChatResp, error) {
	req := c.c.NewRequest(c.name, "Trade.PayBulletChat", in)
	out := new(PayBulletChatResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) VipActivate(ctx context.Context, in *VipActivateReq, opts ...client.CallOption) (*VipActivateResp, error) {
	req := c.c.NewRequest(c.name, "Trade.VipActivate", in)
	out := new(VipActivateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) VipExtend(ctx context.Context, in *VipExtendReq, opts ...client.CallOption) (*VipExtendResp, error) {
	req := c.c.NewRequest(c.name, "Trade.VipExtend", in)
	out := new(VipExtendResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) VipUpgrade(ctx context.Context, in *VipUpgradeReq, opts ...client.CallOption) (*VipUpgradeResp, error) {
	req := c.c.NewRequest(c.name, "Trade.VipUpgrade", in)
	out := new(VipUpgradeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) BuyRide(ctx context.Context, in *BuyRideReq, opts ...client.CallOption) (*BuyRideResp, error) {
	req := c.c.NewRequest(c.name, "Trade.BuyRide", in)
	out := new(BuyRideResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) BuyLuckyId(ctx context.Context, in *BuyLuckyIdReq, opts ...client.CallOption) (*BuyLuckyIdResp, error) {
	req := c.c.NewRequest(c.name, "Trade.BuyLuckyId", in)
	out := new(BuyLuckyIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) MoneyRecharge(ctx context.Context, in *MoneyRechargeReq, opts ...client.CallOption) (*MoneyRechargeResp, error) {
	req := c.c.NewRequest(c.name, "Trade.MoneyRecharge", in)
	out := new(MoneyRechargeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) MoneyWithdraw(ctx context.Context, in *MoneyWithdrawReq, opts ...client.CallOption) (*MoneyWithdrawResp, error) {
	req := c.c.NewRequest(c.name, "Trade.MoneyWithdraw", in)
	out := new(MoneyWithdrawResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeService) MoneyExchangeCoin(ctx context.Context, in *MoneyExchangeCoinReq, opts ...client.CallOption) (*MoneyExchangeCoinResp, error) {
	req := c.c.NewRequest(c.name, "Trade.MoneyExchangeCoin", in)
	out := new(MoneyExchangeCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trade service

type TradeHandler interface {
	SendGiftInLive(context.Context, *SendGiftInLiveReq, *SendGiftInLiveResp) error
	BuyLiveTicket(context.Context, *BuyLiveTicketReq, *BuyLiveTicketResp) error
	PayLiveDurationFee(context.Context, *PayLiveDurationFeeReq, *PayLiveDurationFeeResp) error
	JoinAnchorFansGroup(context.Context, *JoinAnchorFansGroupReq, *JoinAnchorFansGroupResp) error
	PayBulletChat(context.Context, *PayBulletChatReq, *PayBulletChatResp) error
	VipActivate(context.Context, *VipActivateReq, *VipActivateResp) error
	VipExtend(context.Context, *VipExtendReq, *VipExtendResp) error
	VipUpgrade(context.Context, *VipUpgradeReq, *VipUpgradeResp) error
	BuyRide(context.Context, *BuyRideReq, *BuyRideResp) error
	BuyLuckyId(context.Context, *BuyLuckyIdReq, *BuyLuckyIdResp) error
	MoneyRecharge(context.Context, *MoneyRechargeReq, *MoneyRechargeResp) error
	MoneyWithdraw(context.Context, *MoneyWithdrawReq, *MoneyWithdrawResp) error
	MoneyExchangeCoin(context.Context, *MoneyExchangeCoinReq, *MoneyExchangeCoinResp) error
}

func RegisterTradeHandler(s server.Server, hdlr TradeHandler, opts ...server.HandlerOption) error {
	type trade interface {
		SendGiftInLive(ctx context.Context, in *SendGiftInLiveReq, out *SendGiftInLiveResp) error
		BuyLiveTicket(ctx context.Context, in *BuyLiveTicketReq, out *BuyLiveTicketResp) error
		PayLiveDurationFee(ctx context.Context, in *PayLiveDurationFeeReq, out *PayLiveDurationFeeResp) error
		JoinAnchorFansGroup(ctx context.Context, in *JoinAnchorFansGroupReq, out *JoinAnchorFansGroupResp) error
		PayBulletChat(ctx context.Context, in *PayBulletChatReq, out *PayBulletChatResp) error
		VipActivate(ctx context.Context, in *VipActivateReq, out *VipActivateResp) error
		VipExtend(ctx context.Context, in *VipExtendReq, out *VipExtendResp) error
		VipUpgrade(ctx context.Context, in *VipUpgradeReq, out *VipUpgradeResp) error
		BuyRide(ctx context.Context, in *BuyRideReq, out *BuyRideResp) error
		BuyLuckyId(ctx context.Context, in *BuyLuckyIdReq, out *BuyLuckyIdResp) error
		MoneyRecharge(ctx context.Context, in *MoneyRechargeReq, out *MoneyRechargeResp) error
		MoneyWithdraw(ctx context.Context, in *MoneyWithdrawReq, out *MoneyWithdrawResp) error
		MoneyExchangeCoin(ctx context.Context, in *MoneyExchangeCoinReq, out *MoneyExchangeCoinResp) error
	}
	type Trade struct {
		trade
	}
	h := &tradeHandler{hdlr}
	return s.Handle(s.NewHandler(&Trade{h}, opts...))
}

type tradeHandler struct {
	TradeHandler
}

func (h *tradeHandler) SendGiftInLive(ctx context.Context, in *SendGiftInLiveReq, out *SendGiftInLiveResp) error {
	return h.TradeHandler.SendGiftInLive(ctx, in, out)
}

func (h *tradeHandler) BuyLiveTicket(ctx context.Context, in *BuyLiveTicketReq, out *BuyLiveTicketResp) error {
	return h.TradeHandler.BuyLiveTicket(ctx, in, out)
}

func (h *tradeHandler) PayLiveDurationFee(ctx context.Context, in *PayLiveDurationFeeReq, out *PayLiveDurationFeeResp) error {
	return h.TradeHandler.PayLiveDurationFee(ctx, in, out)
}

func (h *tradeHandler) JoinAnchorFansGroup(ctx context.Context, in *JoinAnchorFansGroupReq, out *JoinAnchorFansGroupResp) error {
	return h.TradeHandler.JoinAnchorFansGroup(ctx, in, out)
}

func (h *tradeHandler) PayBulletChat(ctx context.Context, in *PayBulletChatReq, out *PayBulletChatResp) error {
	return h.TradeHandler.PayBulletChat(ctx, in, out)
}

func (h *tradeHandler) VipActivate(ctx context.Context, in *VipActivateReq, out *VipActivateResp) error {
	return h.TradeHandler.VipActivate(ctx, in, out)
}

func (h *tradeHandler) VipExtend(ctx context.Context, in *VipExtendReq, out *VipExtendResp) error {
	return h.TradeHandler.VipExtend(ctx, in, out)
}

func (h *tradeHandler) VipUpgrade(ctx context.Context, in *VipUpgradeReq, out *VipUpgradeResp) error {
	return h.TradeHandler.VipUpgrade(ctx, in, out)
}

func (h *tradeHandler) BuyRide(ctx context.Context, in *BuyRideReq, out *BuyRideResp) error {
	return h.TradeHandler.BuyRide(ctx, in, out)
}

func (h *tradeHandler) BuyLuckyId(ctx context.Context, in *BuyLuckyIdReq, out *BuyLuckyIdResp) error {
	return h.TradeHandler.BuyLuckyId(ctx, in, out)
}

func (h *tradeHandler) MoneyRecharge(ctx context.Context, in *MoneyRechargeReq, out *MoneyRechargeResp) error {
	return h.TradeHandler.MoneyRecharge(ctx, in, out)
}

func (h *tradeHandler) MoneyWithdraw(ctx context.Context, in *MoneyWithdrawReq, out *MoneyWithdrawResp) error {
	return h.TradeHandler.MoneyWithdraw(ctx, in, out)
}

func (h *tradeHandler) MoneyExchangeCoin(ctx context.Context, in *MoneyExchangeCoinReq, out *MoneyExchangeCoinResp) error {
	return h.TradeHandler.MoneyExchangeCoin(ctx, in, out)
}
