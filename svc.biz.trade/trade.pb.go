// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: svc.biz.trade/trade.proto

package trade

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 交易发生的商户
	AppId      string                 `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                // 交易发生的app
	TradeId    string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`          // 业务方交易id,业务方保证唯一,支持幂等
	TransTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trans_time,json=transTime,proto3" json:"trans_time,omitempty"`    // 业务时间
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{0}
}

func (x *TradeInfo) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *TradeInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TradeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradeInfo) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        *UserCoinValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	SerialNumber int64          `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{1}
}

func (x *TradeResult) GetValue() *UserCoinValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TradeResult) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

type MoneyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	SerialNumber int64 `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *MoneyResult) Reset() {
	*x = MoneyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyResult) ProtoMessage() {}

func (x *MoneyResult) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyResult.ProtoReflect.Descriptor instead.
func (*MoneyResult) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{2}
}

func (x *MoneyResult) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MoneyResult) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Uid        string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname   string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar     string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UnionId    string `protobuf:"bytes,6,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *UserInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UserInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId   string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AppId        string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	RoomId       string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomType     string `protobuf:"bytes,8,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`             // 直播类型
	RoomCategory string `protobuf:"bytes,9,opt,name=room_category,json=roomCategory,proto3" json:"room_category,omitempty"` // 直播分类
	StreamerId   string `protobuf:"bytes,10,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`      // 主播id
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{4}
}

func (x *RoomInfo) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RoomInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RoomInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomInfo) GetRoomType() string {
	if x != nil {
		return x.RoomType
	}
	return ""
}

func (x *RoomInfo) GetRoomCategory() string {
	if x != nil {
		return x.RoomCategory
	}
	return ""
}

func (x *RoomInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type GiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId   string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	GiftName string `protobuf:"bytes,2,opt,name=gift_name,json=giftName,proto3" json:"gift_name,omitempty"`
	GiftType int64  `protobuf:"varint,3,opt,name=gift_type,json=giftType,proto3" json:"gift_type,omitempty"`
	Price    int64  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Num      int64  `protobuf:"varint,7,opt,name=num,proto3" json:"num,omitempty"`
	Icon     string `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *GiftInfo) Reset() {
	*x = GiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftInfo) ProtoMessage() {}

func (x *GiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftInfo.ProtoReflect.Descriptor instead.
func (*GiftInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{5}
}

func (x *GiftInfo) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *GiftInfo) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *GiftInfo) GetGiftType() int64 {
	if x != nil {
		return x.GiftType
	}
	return 0
}

func (x *GiftInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GiftInfo) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GiftInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type RoomTicketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *RoomTicketInfo) Reset() {
	*x = RoomTicketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTicketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTicketInfo) ProtoMessage() {}

func (x *RoomTicketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTicketInfo.ProtoReflect.Descriptor instead.
func (*RoomTicketInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{6}
}

func (x *RoomTicketInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type RoomDurationFeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *RoomDurationFeeInfo) Reset() {
	*x = RoomDurationFeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomDurationFeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomDurationFeeInfo) ProtoMessage() {}

func (x *RoomDurationFeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomDurationFeeInfo.ProtoReflect.Descriptor instead.
func (*RoomDurationFeeInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{7}
}

func (x *RoomDurationFeeInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type JoinStreamerFansGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *JoinStreamerFansGroupInfo) Reset() {
	*x = JoinStreamerFansGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStreamerFansGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStreamerFansGroupInfo) ProtoMessage() {}

func (x *JoinStreamerFansGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStreamerFansGroupInfo.ProtoReflect.Descriptor instead.
func (*JoinStreamerFansGroupInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{8}
}

func (x *JoinStreamerFansGroupInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type PayBulletChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PayBulletChatInfo) Reset() {
	*x = PayBulletChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayBulletChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayBulletChatInfo) ProtoMessage() {}

func (x *PayBulletChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayBulletChatInfo.ProtoReflect.Descriptor instead.
func (*PayBulletChatInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{9}
}

func (x *PayBulletChatInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type VipActivateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *VipActivateInfo) Reset() {
	*x = VipActivateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipActivateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipActivateInfo) ProtoMessage() {}

func (x *VipActivateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipActivateInfo.ProtoReflect.Descriptor instead.
func (*VipActivateInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{10}
}

func (x *VipActivateInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type VipExtendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *VipExtendInfo) Reset() {
	*x = VipExtendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipExtendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipExtendInfo) ProtoMessage() {}

func (x *VipExtendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipExtendInfo.ProtoReflect.Descriptor instead.
func (*VipExtendInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{11}
}

func (x *VipExtendInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type VipUpgradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *VipUpgradeInfo) Reset() {
	*x = VipUpgradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpgradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpgradeInfo) ProtoMessage() {}

func (x *VipUpgradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpgradeInfo.ProtoReflect.Descriptor instead.
func (*VipUpgradeInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{12}
}

func (x *VipUpgradeInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type BuyRideInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BuyRideInfo) Reset() {
	*x = BuyRideInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRideInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRideInfo) ProtoMessage() {}

func (x *BuyRideInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRideInfo.ProtoReflect.Descriptor instead.
func (*BuyRideInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{13}
}

func (x *BuyRideInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type BuyLuckyIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BuyLuckyIdInfo) Reset() {
	*x = BuyLuckyIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyLuckyIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyLuckyIdInfo) ProtoMessage() {}

func (x *BuyLuckyIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyLuckyIdInfo.ProtoReflect.Descriptor instead.
func (*BuyLuckyIdInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{14}
}

func (x *BuyLuckyIdInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type MoneyExchangeCoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyAmount  int64 `protobuf:"varint,1,opt,name=money_amount,json=moneyAmount,proto3" json:"money_amount,omitempty"`
	CoinAmount   int64 `protobuf:"varint,2,opt,name=coin_amount,json=coinAmount,proto3" json:"coin_amount,omitempty"`
	ExchangeRate int64 `protobuf:"varint,3,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (x *MoneyExchangeCoinInfo) Reset() {
	*x = MoneyExchangeCoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyExchangeCoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyExchangeCoinInfo) ProtoMessage() {}

func (x *MoneyExchangeCoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyExchangeCoinInfo.ProtoReflect.Descriptor instead.
func (*MoneyExchangeCoinInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{15}
}

func (x *MoneyExchangeCoinInfo) GetMoneyAmount() int64 {
	if x != nil {
		return x.MoneyAmount
	}
	return 0
}

func (x *MoneyExchangeCoinInfo) GetCoinAmount() int64 {
	if x != nil {
		return x.CoinAmount
	}
	return 0
}

func (x *MoneyExchangeCoinInfo) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

type UserCoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                   // 余额
	LimitedValue int64 `protobuf:"varint,2,opt,name=limited_value,json=limitedValue,proto3" json:"limited_value,omitempty"` // 低权限余额
}

func (x *UserCoinValue) Reset() {
	*x = UserCoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinValue) ProtoMessage() {}

func (x *UserCoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinValue.ProtoReflect.Descriptor instead.
func (*UserCoinValue) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{16}
}

func (x *UserCoinValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserCoinValue) GetLimitedValue() int64 {
	if x != nil {
		return x.LimitedValue
	}
	return 0
}

type SendGiftInRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Sender    *UserInfo  `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver  *UserInfo  `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Gift      *GiftInfo  `protobuf:"bytes,4,opt,name=gift,proto3" json:"gift,omitempty"`
	RoomInfo  *RoomInfo  `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
}

func (x *SendGiftInRoomReq) Reset() {
	*x = SendGiftInRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGiftInRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGiftInRoomReq) ProtoMessage() {}

func (x *SendGiftInRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGiftInRoomReq.ProtoReflect.Descriptor instead.
func (*SendGiftInRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{17}
}

func (x *SendGiftInRoomReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *SendGiftInRoomReq) GetSender() *UserInfo {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SendGiftInRoomReq) GetReceiver() *UserInfo {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *SendGiftInRoomReq) GetGift() *GiftInfo {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *SendGiftInRoomReq) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

type SendGiftInRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *SendGiftInRoomResp) Reset() {
	*x = SendGiftInRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGiftInRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGiftInRoomResp) ProtoMessage() {}

func (x *SendGiftInRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGiftInRoomResp.ProtoReflect.Descriptor instead.
func (*SendGiftInRoomResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{18}
}

func (x *SendGiftInRoomResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type BuyRoomTicketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo      `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo       `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	RoomInfo  *RoomInfo       `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	Ticket    *RoomTicketInfo `protobuf:"bytes,5,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *BuyRoomTicketReq) Reset() {
	*x = BuyRoomTicketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRoomTicketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRoomTicketReq) ProtoMessage() {}

func (x *BuyRoomTicketReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRoomTicketReq.ProtoReflect.Descriptor instead.
func (*BuyRoomTicketReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{19}
}

func (x *BuyRoomTicketReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *BuyRoomTicketReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *BuyRoomTicketReq) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *BuyRoomTicketReq) GetTicket() *RoomTicketInfo {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type BuyRoomTicketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *BuyRoomTicketResp) Reset() {
	*x = BuyRoomTicketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRoomTicketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRoomTicketResp) ProtoMessage() {}

func (x *BuyRoomTicketResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRoomTicketResp.ProtoReflect.Descriptor instead.
func (*BuyRoomTicketResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{20}
}

func (x *BuyRoomTicketResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type PayRoomDurationFeeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo   *TradeInfo           `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer       *UserInfo            `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	RoomInfo    *RoomInfo            `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	DurationFee *RoomDurationFeeInfo `protobuf:"bytes,5,opt,name=duration_fee,json=durationFee,proto3" json:"duration_fee,omitempty"`
}

func (x *PayRoomDurationFeeReq) Reset() {
	*x = PayRoomDurationFeeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRoomDurationFeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRoomDurationFeeReq) ProtoMessage() {}

func (x *PayRoomDurationFeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRoomDurationFeeReq.ProtoReflect.Descriptor instead.
func (*PayRoomDurationFeeReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{21}
}

func (x *PayRoomDurationFeeReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *PayRoomDurationFeeReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *PayRoomDurationFeeReq) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *PayRoomDurationFeeReq) GetDurationFee() *RoomDurationFeeInfo {
	if x != nil {
		return x.DurationFee
	}
	return nil
}

type PayRoomDurationFeeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *PayRoomDurationFeeResp) Reset() {
	*x = PayRoomDurationFeeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRoomDurationFeeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRoomDurationFeeResp) ProtoMessage() {}

func (x *PayRoomDurationFeeResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRoomDurationFeeResp.ProtoReflect.Descriptor instead.
func (*PayRoomDurationFeeResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{22}
}

func (x *PayRoomDurationFeeResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type JoinStreamerFansGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo                 `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo                  `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	RoomInfo  *RoomInfo                  `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	FansGroup *JoinStreamerFansGroupInfo `protobuf:"bytes,7,opt,name=fans_group,json=fansGroup,proto3" json:"fans_group,omitempty"`
}

func (x *JoinStreamerFansGroupReq) Reset() {
	*x = JoinStreamerFansGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStreamerFansGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStreamerFansGroupReq) ProtoMessage() {}

func (x *JoinStreamerFansGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStreamerFansGroupReq.ProtoReflect.Descriptor instead.
func (*JoinStreamerFansGroupReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{23}
}

func (x *JoinStreamerFansGroupReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *JoinStreamerFansGroupReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *JoinStreamerFansGroupReq) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *JoinStreamerFansGroupReq) GetFansGroup() *JoinStreamerFansGroupInfo {
	if x != nil {
		return x.FansGroup
	}
	return nil
}

type JoinStreamerFansGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *JoinStreamerFansGroupResp) Reset() {
	*x = JoinStreamerFansGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStreamerFansGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStreamerFansGroupResp) ProtoMessage() {}

func (x *JoinStreamerFansGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStreamerFansGroupResp.ProtoReflect.Descriptor instead.
func (*JoinStreamerFansGroupResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{24}
}

func (x *JoinStreamerFansGroupResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type PayBulletChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo  *TradeInfo         `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer      *UserInfo          `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	RoomInfo   *RoomInfo          `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	BulletChat *PayBulletChatInfo `protobuf:"bytes,5,opt,name=bullet_chat,json=bulletChat,proto3" json:"bullet_chat,omitempty"`
}

func (x *PayBulletChatReq) Reset() {
	*x = PayBulletChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayBulletChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayBulletChatReq) ProtoMessage() {}

func (x *PayBulletChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayBulletChatReq.ProtoReflect.Descriptor instead.
func (*PayBulletChatReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{25}
}

func (x *PayBulletChatReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *PayBulletChatReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *PayBulletChatReq) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *PayBulletChatReq) GetBulletChat() *PayBulletChatInfo {
	if x != nil {
		return x.BulletChat
	}
	return nil
}

type PayBulletChatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *PayBulletChatResp) Reset() {
	*x = PayBulletChatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayBulletChatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayBulletChatResp) ProtoMessage() {}

func (x *PayBulletChatResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayBulletChatResp.ProtoReflect.Descriptor instead.
func (*PayBulletChatResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{26}
}

func (x *PayBulletChatResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type VipActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo       `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo        `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Vip       *VipActivateInfo `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *VipActivateReq) Reset() {
	*x = VipActivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipActivateReq) ProtoMessage() {}

func (x *VipActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipActivateReq.ProtoReflect.Descriptor instead.
func (*VipActivateReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{27}
}

func (x *VipActivateReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *VipActivateReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *VipActivateReq) GetVip() *VipActivateInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

type VipActivateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *VipActivateResp) Reset() {
	*x = VipActivateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipActivateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipActivateResp) ProtoMessage() {}

func (x *VipActivateResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipActivateResp.ProtoReflect.Descriptor instead.
func (*VipActivateResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{28}
}

func (x *VipActivateResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type VipExtendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo     `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo      `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Vip       *VipExtendInfo `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *VipExtendReq) Reset() {
	*x = VipExtendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipExtendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipExtendReq) ProtoMessage() {}

func (x *VipExtendReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipExtendReq.ProtoReflect.Descriptor instead.
func (*VipExtendReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{29}
}

func (x *VipExtendReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *VipExtendReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *VipExtendReq) GetVip() *VipExtendInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

type VipExtendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *VipExtendResp) Reset() {
	*x = VipExtendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipExtendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipExtendResp) ProtoMessage() {}

func (x *VipExtendResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipExtendResp.ProtoReflect.Descriptor instead.
func (*VipExtendResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{30}
}

func (x *VipExtendResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type VipUpgradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo      `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo       `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Vip       *VipUpgradeInfo `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *VipUpgradeReq) Reset() {
	*x = VipUpgradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpgradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpgradeReq) ProtoMessage() {}

func (x *VipUpgradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpgradeReq.ProtoReflect.Descriptor instead.
func (*VipUpgradeReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{31}
}

func (x *VipUpgradeReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *VipUpgradeReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *VipUpgradeReq) GetVip() *VipUpgradeInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

type VipUpgradeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *VipUpgradeResp) Reset() {
	*x = VipUpgradeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpgradeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpgradeResp) ProtoMessage() {}

func (x *VipUpgradeResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpgradeResp.ProtoReflect.Descriptor instead.
func (*VipUpgradeResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{32}
}

func (x *VipUpgradeResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type BuyRideReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo   `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo    `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Ride      *BuyRideInfo `protobuf:"bytes,4,opt,name=ride,proto3" json:"ride,omitempty"`
}

func (x *BuyRideReq) Reset() {
	*x = BuyRideReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRideReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRideReq) ProtoMessage() {}

func (x *BuyRideReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRideReq.ProtoReflect.Descriptor instead.
func (*BuyRideReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{33}
}

func (x *BuyRideReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *BuyRideReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *BuyRideReq) GetRide() *BuyRideInfo {
	if x != nil {
		return x.Ride
	}
	return nil
}

type BuyRideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *BuyRideResp) Reset() {
	*x = BuyRideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRideResp) ProtoMessage() {}

func (x *BuyRideResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRideResp.ProtoReflect.Descriptor instead.
func (*BuyRideResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{34}
}

func (x *BuyRideResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type BuyLuckyIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo      `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Buyer     *UserInfo       `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	LuckyId   *BuyLuckyIdInfo `protobuf:"bytes,4,opt,name=lucky_id,json=luckyId,proto3" json:"lucky_id,omitempty"`
}

func (x *BuyLuckyIdReq) Reset() {
	*x = BuyLuckyIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyLuckyIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyLuckyIdReq) ProtoMessage() {}

func (x *BuyLuckyIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyLuckyIdReq.ProtoReflect.Descriptor instead.
func (*BuyLuckyIdReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{35}
}

func (x *BuyLuckyIdReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *BuyLuckyIdReq) GetBuyer() *UserInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *BuyLuckyIdReq) GetLuckyId() *BuyLuckyIdInfo {
	if x != nil {
		return x.LuckyId
	}
	return nil
}

type BuyLuckyIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeResult *TradeResult `protobuf:"bytes,1,opt,name=trade_result,json=tradeResult,proto3" json:"trade_result,omitempty"`
}

func (x *BuyLuckyIdResp) Reset() {
	*x = BuyLuckyIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyLuckyIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyLuckyIdResp) ProtoMessage() {}

func (x *BuyLuckyIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyLuckyIdResp.ProtoReflect.Descriptor instead.
func (*BuyLuckyIdResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{36}
}

func (x *BuyLuckyIdResp) GetTradeResult() *TradeResult {
	if x != nil {
		return x.TradeResult
	}
	return nil
}

type MoneyRechargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo      *TradeInfo                `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	User           *UserInfo                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	PayInfo        *MoneyRechargeReq_PayInfo `protobuf:"bytes,3,opt,name=pay_info,json=payInfo,proto3" json:"pay_info,omitempty"`
	RechargeAmount int64                     `protobuf:"varint,4,opt,name=recharge_amount,json=rechargeAmount,proto3" json:"recharge_amount,omitempty"` // 充值余额金额
	Attach         string                    `protobuf:"bytes,5,opt,name=attach,proto3" json:"attach,omitempty"`                                        // 透传的附加信息,等待约定
}

func (x *MoneyRechargeReq) Reset() {
	*x = MoneyRechargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyRechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyRechargeReq) ProtoMessage() {}

func (x *MoneyRechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyRechargeReq.ProtoReflect.Descriptor instead.
func (*MoneyRechargeReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{37}
}

func (x *MoneyRechargeReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *MoneyRechargeReq) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MoneyRechargeReq) GetPayInfo() *MoneyRechargeReq_PayInfo {
	if x != nil {
		return x.PayInfo
	}
	return nil
}

func (x *MoneyRechargeReq) GetRechargeAmount() int64 {
	if x != nil {
		return x.RechargeAmount
	}
	return 0
}

func (x *MoneyRechargeReq) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

type MoneyRechargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyResult *MoneyResult `protobuf:"bytes,1,opt,name=money_result,json=moneyResult,proto3" json:"money_result,omitempty"`
}

func (x *MoneyRechargeResp) Reset() {
	*x = MoneyRechargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyRechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyRechargeResp) ProtoMessage() {}

func (x *MoneyRechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyRechargeResp.ProtoReflect.Descriptor instead.
func (*MoneyRechargeResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{38}
}

func (x *MoneyRechargeResp) GetMoneyResult() *MoneyResult {
	if x != nil {
		return x.MoneyResult
	}
	return nil
}

type MoneyWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo      *TradeInfo `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	User           *UserInfo  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	WithdrawAmount int64      `protobuf:"varint,3,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"` // 提现金额
}

func (x *MoneyWithdrawReq) Reset() {
	*x = MoneyWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyWithdrawReq) ProtoMessage() {}

func (x *MoneyWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyWithdrawReq.ProtoReflect.Descriptor instead.
func (*MoneyWithdrawReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{39}
}

func (x *MoneyWithdrawReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *MoneyWithdrawReq) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MoneyWithdrawReq) GetWithdrawAmount() int64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

type MoneyWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyResult *MoneyResult `protobuf:"bytes,1,opt,name=money_result,json=moneyResult,proto3" json:"money_result,omitempty"`
}

func (x *MoneyWithdrawResp) Reset() {
	*x = MoneyWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyWithdrawResp) ProtoMessage() {}

func (x *MoneyWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyWithdrawResp.ProtoReflect.Descriptor instead.
func (*MoneyWithdrawResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{40}
}

func (x *MoneyWithdrawResp) GetMoneyResult() *MoneyResult {
	if x != nil {
		return x.MoneyResult
	}
	return nil
}

type MoneyExchangeCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo    *TradeInfo             `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	User         *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ExchangeInfo *MoneyExchangeCoinInfo `protobuf:"bytes,3,opt,name=exchange_info,json=exchangeInfo,proto3" json:"exchange_info,omitempty"`
}

func (x *MoneyExchangeCoinReq) Reset() {
	*x = MoneyExchangeCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyExchangeCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyExchangeCoinReq) ProtoMessage() {}

func (x *MoneyExchangeCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyExchangeCoinReq.ProtoReflect.Descriptor instead.
func (*MoneyExchangeCoinReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{41}
}

func (x *MoneyExchangeCoinReq) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *MoneyExchangeCoinReq) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MoneyExchangeCoinReq) GetExchangeInfo() *MoneyExchangeCoinInfo {
	if x != nil {
		return x.ExchangeInfo
	}
	return nil
}

type MoneyExchangeCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyResult *MoneyResult `protobuf:"bytes,1,opt,name=money_result,json=moneyResult,proto3" json:"money_result,omitempty"`
}

func (x *MoneyExchangeCoinResp) Reset() {
	*x = MoneyExchangeCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyExchangeCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyExchangeCoinResp) ProtoMessage() {}

func (x *MoneyExchangeCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyExchangeCoinResp.ProtoReflect.Descriptor instead.
func (*MoneyExchangeCoinResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{42}
}

func (x *MoneyExchangeCoinResp) GetMoneyResult() *MoneyResult {
	if x != nil {
		return x.MoneyResult
	}
	return nil
}

type MoneyRechargeReq_PayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayChannel   string `protobuf:"bytes,1,opt,name=pay_channel,json=payChannel,proto3" json:"pay_channel,omitempty"`
	PayMethod    string `protobuf:"bytes,2,opt,name=pay_method,json=payMethod,proto3" json:"pay_method,omitempty"`
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码 CNY
	Amount       int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                // 币种金额
}

func (x *MoneyRechargeReq_PayInfo) Reset() {
	*x = MoneyRechargeReq_PayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_trade_trade_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyRechargeReq_PayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyRechargeReq_PayInfo) ProtoMessage() {}

func (x *MoneyRechargeReq_PayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_trade_trade_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyRechargeReq_PayInfo.ProtoReflect.Descriptor instead.
func (*MoneyRechargeReq_PayInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_trade_trade_proto_rawDescGZIP(), []int{37, 0}
}

func (x *MoneyRechargeReq_PayInfo) GetPayChannel() string {
	if x != nil {
		return x.PayChannel
	}
	return ""
}

func (x *MoneyRechargeReq_PayInfo) GetPayMethod() string {
	if x != nil {
		return x.PayMethod
	}
	return ""
}

func (x *MoneyRechargeReq_PayInfo) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *MoneyRechargeReq_PayInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_svc_biz_trade_trade_proto protoreflect.FileDescriptor

var file_svc_biz_trade_trade_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x48, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0e,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x31, 0x0a, 0x19, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x27, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x26, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x52, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x42, 0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x67, 0x69, 0x66, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xe7, 0x01, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d,
	0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x52, 0x0a, 0x11, 0x42, 0x75,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfc,
	0x01, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0x57, 0x0a,
	0x16, 0x50, 0x61, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x66, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x5a, 0x0a, 0x19, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x42, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x22, 0x52, 0x0a, 0x11,
	0x50, 0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x22, 0x50, 0x0a,
	0x0f, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa6, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x22, 0x4e, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x76, 0x69, 0x70, 0x22, 0x4f, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x52, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x69, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x69, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x0b, 0x42,
	0x75, 0x79, 0x52, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x42, 0x75,
	0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x0e, 0x42, 0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x86,
	0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x1a, 0x86,
	0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x10,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x52, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a,
	0x15, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xe5, 0x08, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x12, 0x50, 0x61, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x56, 0x69, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x07, 0x42, 0x75, 0x79, 0x52, 0x69, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x42, 0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42,
	0x75, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x17, 0x5a,
	0x15, 0x2e, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_trade_trade_proto_rawDescOnce sync.Once
	file_svc_biz_trade_trade_proto_rawDescData = file_svc_biz_trade_trade_proto_rawDesc
)

func file_svc_biz_trade_trade_proto_rawDescGZIP() []byte {
	file_svc_biz_trade_trade_proto_rawDescOnce.Do(func() {
		file_svc_biz_trade_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_trade_trade_proto_rawDescData)
	})
	return file_svc_biz_trade_trade_proto_rawDescData
}

var file_svc_biz_trade_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_svc_biz_trade_trade_proto_goTypes = []any{
	(*TradeInfo)(nil),                 // 0: svc.biz.trade.TradeInfo
	(*TradeResult)(nil),               // 1: svc.biz.trade.TradeResult
	(*MoneyResult)(nil),               // 2: svc.biz.trade.MoneyResult
	(*UserInfo)(nil),                  // 3: svc.biz.trade.UserInfo
	(*RoomInfo)(nil),                  // 4: svc.biz.trade.RoomInfo
	(*GiftInfo)(nil),                  // 5: svc.biz.trade.GiftInfo
	(*RoomTicketInfo)(nil),            // 6: svc.biz.trade.RoomTicketInfo
	(*RoomDurationFeeInfo)(nil),       // 7: svc.biz.trade.RoomDurationFeeInfo
	(*JoinStreamerFansGroupInfo)(nil), // 8: svc.biz.trade.JoinStreamerFansGroupInfo
	(*PayBulletChatInfo)(nil),         // 9: svc.biz.trade.PayBulletChatInfo
	(*VipActivateInfo)(nil),           // 10: svc.biz.trade.VipActivateInfo
	(*VipExtendInfo)(nil),             // 11: svc.biz.trade.VipExtendInfo
	(*VipUpgradeInfo)(nil),            // 12: svc.biz.trade.VipUpgradeInfo
	(*BuyRideInfo)(nil),               // 13: svc.biz.trade.BuyRideInfo
	(*BuyLuckyIdInfo)(nil),            // 14: svc.biz.trade.BuyLuckyIdInfo
	(*MoneyExchangeCoinInfo)(nil),     // 15: svc.biz.trade.MoneyExchangeCoinInfo
	(*UserCoinValue)(nil),             // 16: svc.biz.trade.UserCoinValue
	(*SendGiftInRoomReq)(nil),         // 17: svc.biz.trade.SendGiftInRoomReq
	(*SendGiftInRoomResp)(nil),        // 18: svc.biz.trade.SendGiftInRoomResp
	(*BuyRoomTicketReq)(nil),          // 19: svc.biz.trade.BuyRoomTicketReq
	(*BuyRoomTicketResp)(nil),         // 20: svc.biz.trade.BuyRoomTicketResp
	(*PayRoomDurationFeeReq)(nil),     // 21: svc.biz.trade.PayRoomDurationFeeReq
	(*PayRoomDurationFeeResp)(nil),    // 22: svc.biz.trade.PayRoomDurationFeeResp
	(*JoinStreamerFansGroupReq)(nil),  // 23: svc.biz.trade.JoinStreamerFansGroupReq
	(*JoinStreamerFansGroupResp)(nil), // 24: svc.biz.trade.JoinStreamerFansGroupResp
	(*PayBulletChatReq)(nil),          // 25: svc.biz.trade.PayBulletChatReq
	(*PayBulletChatResp)(nil),         // 26: svc.biz.trade.PayBulletChatResp
	(*VipActivateReq)(nil),            // 27: svc.biz.trade.VipActivateReq
	(*VipActivateResp)(nil),           // 28: svc.biz.trade.VipActivateResp
	(*VipExtendReq)(nil),              // 29: svc.biz.trade.VipExtendReq
	(*VipExtendResp)(nil),             // 30: svc.biz.trade.VipExtendResp
	(*VipUpgradeReq)(nil),             // 31: svc.biz.trade.VipUpgradeReq
	(*VipUpgradeResp)(nil),            // 32: svc.biz.trade.VipUpgradeResp
	(*BuyRideReq)(nil),                // 33: svc.biz.trade.BuyRideReq
	(*BuyRideResp)(nil),               // 34: svc.biz.trade.BuyRideResp
	(*BuyLuckyIdReq)(nil),             // 35: svc.biz.trade.BuyLuckyIdReq
	(*BuyLuckyIdResp)(nil),            // 36: svc.biz.trade.BuyLuckyIdResp
	(*MoneyRechargeReq)(nil),          // 37: svc.biz.trade.MoneyRechargeReq
	(*MoneyRechargeResp)(nil),         // 38: svc.biz.trade.MoneyRechargeResp
	(*MoneyWithdrawReq)(nil),          // 39: svc.biz.trade.MoneyWithdrawReq
	(*MoneyWithdrawResp)(nil),         // 40: svc.biz.trade.MoneyWithdrawResp
	(*MoneyExchangeCoinReq)(nil),      // 41: svc.biz.trade.MoneyExchangeCoinReq
	(*MoneyExchangeCoinResp)(nil),     // 42: svc.biz.trade.MoneyExchangeCoinResp
	(*MoneyRechargeReq_PayInfo)(nil),  // 43: svc.biz.trade.MoneyRechargeReq.PayInfo
	(*timestamppb.Timestamp)(nil),     // 44: google.protobuf.Timestamp
}
var file_svc_biz_trade_trade_proto_depIdxs = []int32{
	44, // 0: svc.biz.trade.TradeInfo.trans_time:type_name -> google.protobuf.Timestamp
	16, // 1: svc.biz.trade.TradeResult.value:type_name -> svc.biz.trade.UserCoinValue
	0,  // 2: svc.biz.trade.SendGiftInRoomReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 3: svc.biz.trade.SendGiftInRoomReq.sender:type_name -> svc.biz.trade.UserInfo
	3,  // 4: svc.biz.trade.SendGiftInRoomReq.receiver:type_name -> svc.biz.trade.UserInfo
	5,  // 5: svc.biz.trade.SendGiftInRoomReq.gift:type_name -> svc.biz.trade.GiftInfo
	4,  // 6: svc.biz.trade.SendGiftInRoomReq.room_info:type_name -> svc.biz.trade.RoomInfo
	1,  // 7: svc.biz.trade.SendGiftInRoomResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 8: svc.biz.trade.BuyRoomTicketReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 9: svc.biz.trade.BuyRoomTicketReq.buyer:type_name -> svc.biz.trade.UserInfo
	4,  // 10: svc.biz.trade.BuyRoomTicketReq.room_info:type_name -> svc.biz.trade.RoomInfo
	6,  // 11: svc.biz.trade.BuyRoomTicketReq.ticket:type_name -> svc.biz.trade.RoomTicketInfo
	1,  // 12: svc.biz.trade.BuyRoomTicketResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 13: svc.biz.trade.PayRoomDurationFeeReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 14: svc.biz.trade.PayRoomDurationFeeReq.buyer:type_name -> svc.biz.trade.UserInfo
	4,  // 15: svc.biz.trade.PayRoomDurationFeeReq.room_info:type_name -> svc.biz.trade.RoomInfo
	7,  // 16: svc.biz.trade.PayRoomDurationFeeReq.duration_fee:type_name -> svc.biz.trade.RoomDurationFeeInfo
	1,  // 17: svc.biz.trade.PayRoomDurationFeeResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 18: svc.biz.trade.JoinStreamerFansGroupReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 19: svc.biz.trade.JoinStreamerFansGroupReq.buyer:type_name -> svc.biz.trade.UserInfo
	4,  // 20: svc.biz.trade.JoinStreamerFansGroupReq.room_info:type_name -> svc.biz.trade.RoomInfo
	8,  // 21: svc.biz.trade.JoinStreamerFansGroupReq.fans_group:type_name -> svc.biz.trade.JoinStreamerFansGroupInfo
	1,  // 22: svc.biz.trade.JoinStreamerFansGroupResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 23: svc.biz.trade.PayBulletChatReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 24: svc.biz.trade.PayBulletChatReq.buyer:type_name -> svc.biz.trade.UserInfo
	4,  // 25: svc.biz.trade.PayBulletChatReq.room_info:type_name -> svc.biz.trade.RoomInfo
	9,  // 26: svc.biz.trade.PayBulletChatReq.bullet_chat:type_name -> svc.biz.trade.PayBulletChatInfo
	1,  // 27: svc.biz.trade.PayBulletChatResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 28: svc.biz.trade.VipActivateReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 29: svc.biz.trade.VipActivateReq.buyer:type_name -> svc.biz.trade.UserInfo
	10, // 30: svc.biz.trade.VipActivateReq.vip:type_name -> svc.biz.trade.VipActivateInfo
	1,  // 31: svc.biz.trade.VipActivateResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 32: svc.biz.trade.VipExtendReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 33: svc.biz.trade.VipExtendReq.buyer:type_name -> svc.biz.trade.UserInfo
	11, // 34: svc.biz.trade.VipExtendReq.vip:type_name -> svc.biz.trade.VipExtendInfo
	1,  // 35: svc.biz.trade.VipExtendResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 36: svc.biz.trade.VipUpgradeReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 37: svc.biz.trade.VipUpgradeReq.buyer:type_name -> svc.biz.trade.UserInfo
	12, // 38: svc.biz.trade.VipUpgradeReq.vip:type_name -> svc.biz.trade.VipUpgradeInfo
	1,  // 39: svc.biz.trade.VipUpgradeResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 40: svc.biz.trade.BuyRideReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 41: svc.biz.trade.BuyRideReq.buyer:type_name -> svc.biz.trade.UserInfo
	13, // 42: svc.biz.trade.BuyRideReq.ride:type_name -> svc.biz.trade.BuyRideInfo
	1,  // 43: svc.biz.trade.BuyRideResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 44: svc.biz.trade.BuyLuckyIdReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 45: svc.biz.trade.BuyLuckyIdReq.buyer:type_name -> svc.biz.trade.UserInfo
	14, // 46: svc.biz.trade.BuyLuckyIdReq.lucky_id:type_name -> svc.biz.trade.BuyLuckyIdInfo
	1,  // 47: svc.biz.trade.BuyLuckyIdResp.trade_result:type_name -> svc.biz.trade.TradeResult
	0,  // 48: svc.biz.trade.MoneyRechargeReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 49: svc.biz.trade.MoneyRechargeReq.user:type_name -> svc.biz.trade.UserInfo
	43, // 50: svc.biz.trade.MoneyRechargeReq.pay_info:type_name -> svc.biz.trade.MoneyRechargeReq.PayInfo
	2,  // 51: svc.biz.trade.MoneyRechargeResp.money_result:type_name -> svc.biz.trade.MoneyResult
	0,  // 52: svc.biz.trade.MoneyWithdrawReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 53: svc.biz.trade.MoneyWithdrawReq.user:type_name -> svc.biz.trade.UserInfo
	2,  // 54: svc.biz.trade.MoneyWithdrawResp.money_result:type_name -> svc.biz.trade.MoneyResult
	0,  // 55: svc.biz.trade.MoneyExchangeCoinReq.trade_info:type_name -> svc.biz.trade.TradeInfo
	3,  // 56: svc.biz.trade.MoneyExchangeCoinReq.user:type_name -> svc.biz.trade.UserInfo
	15, // 57: svc.biz.trade.MoneyExchangeCoinReq.exchange_info:type_name -> svc.biz.trade.MoneyExchangeCoinInfo
	2,  // 58: svc.biz.trade.MoneyExchangeCoinResp.money_result:type_name -> svc.biz.trade.MoneyResult
	17, // 59: svc.biz.trade.Trade.SendGiftInRoom:input_type -> svc.biz.trade.SendGiftInRoomReq
	19, // 60: svc.biz.trade.Trade.BuyRoomTicket:input_type -> svc.biz.trade.BuyRoomTicketReq
	21, // 61: svc.biz.trade.Trade.PayRoomDurationFee:input_type -> svc.biz.trade.PayRoomDurationFeeReq
	23, // 62: svc.biz.trade.Trade.JoinStreamerFansGroup:input_type -> svc.biz.trade.JoinStreamerFansGroupReq
	25, // 63: svc.biz.trade.Trade.PayBulletChat:input_type -> svc.biz.trade.PayBulletChatReq
	27, // 64: svc.biz.trade.Trade.VipActivate:input_type -> svc.biz.trade.VipActivateReq
	29, // 65: svc.biz.trade.Trade.VipExtend:input_type -> svc.biz.trade.VipExtendReq
	31, // 66: svc.biz.trade.Trade.VipUpgrade:input_type -> svc.biz.trade.VipUpgradeReq
	33, // 67: svc.biz.trade.Trade.BuyRide:input_type -> svc.biz.trade.BuyRideReq
	35, // 68: svc.biz.trade.Trade.BuyLuckyId:input_type -> svc.biz.trade.BuyLuckyIdReq
	37, // 69: svc.biz.trade.Trade.MoneyRecharge:input_type -> svc.biz.trade.MoneyRechargeReq
	39, // 70: svc.biz.trade.Trade.MoneyWithdraw:input_type -> svc.biz.trade.MoneyWithdrawReq
	41, // 71: svc.biz.trade.Trade.MoneyExchangeCoin:input_type -> svc.biz.trade.MoneyExchangeCoinReq
	18, // 72: svc.biz.trade.Trade.SendGiftInRoom:output_type -> svc.biz.trade.SendGiftInRoomResp
	20, // 73: svc.biz.trade.Trade.BuyRoomTicket:output_type -> svc.biz.trade.BuyRoomTicketResp
	22, // 74: svc.biz.trade.Trade.PayRoomDurationFee:output_type -> svc.biz.trade.PayRoomDurationFeeResp
	24, // 75: svc.biz.trade.Trade.JoinStreamerFansGroup:output_type -> svc.biz.trade.JoinStreamerFansGroupResp
	26, // 76: svc.biz.trade.Trade.PayBulletChat:output_type -> svc.biz.trade.PayBulletChatResp
	28, // 77: svc.biz.trade.Trade.VipActivate:output_type -> svc.biz.trade.VipActivateResp
	30, // 78: svc.biz.trade.Trade.VipExtend:output_type -> svc.biz.trade.VipExtendResp
	32, // 79: svc.biz.trade.Trade.VipUpgrade:output_type -> svc.biz.trade.VipUpgradeResp
	34, // 80: svc.biz.trade.Trade.BuyRide:output_type -> svc.biz.trade.BuyRideResp
	36, // 81: svc.biz.trade.Trade.BuyLuckyId:output_type -> svc.biz.trade.BuyLuckyIdResp
	38, // 82: svc.biz.trade.Trade.MoneyRecharge:output_type -> svc.biz.trade.MoneyRechargeResp
	40, // 83: svc.biz.trade.Trade.MoneyWithdraw:output_type -> svc.biz.trade.MoneyWithdrawResp
	42, // 84: svc.biz.trade.Trade.MoneyExchangeCoin:output_type -> svc.biz.trade.MoneyExchangeCoinResp
	72, // [72:85] is the sub-list for method output_type
	59, // [59:72] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_svc_biz_trade_trade_proto_init() }
func file_svc_biz_trade_trade_proto_init() {
	if File_svc_biz_trade_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_trade_trade_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RoomTicketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RoomDurationFeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*JoinStreamerFansGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PayBulletChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*VipActivateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*VipExtendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VipUpgradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*BuyRideInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BuyLuckyIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyExchangeCoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UserCoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SendGiftInRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SendGiftInRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*BuyRoomTicketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*BuyRoomTicketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PayRoomDurationFeeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PayRoomDurationFeeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*JoinStreamerFansGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*JoinStreamerFansGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PayBulletChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PayBulletChatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*VipActivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*VipActivateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*VipExtendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*VipExtendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*VipUpgradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*VipUpgradeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*BuyRideReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BuyRideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*BuyLuckyIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*BuyLuckyIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyRechargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyRechargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyExchangeCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyExchangeCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_trade_trade_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*MoneyRechargeReq_PayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_trade_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_trade_trade_proto_goTypes,
		DependencyIndexes: file_svc_biz_trade_trade_proto_depIdxs,
		MessageInfos:      file_svc_biz_trade_trade_proto_msgTypes,
	}.Build()
	File_svc_biz_trade_trade_proto = out.File
	file_svc_biz_trade_trade_proto_rawDesc = nil
	file_svc_biz_trade_trade_proto_goTypes = nil
	file_svc_biz_trade_trade_proto_depIdxs = nil
}
