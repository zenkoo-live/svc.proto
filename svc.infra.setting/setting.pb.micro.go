// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.infra.setting/setting.proto

package setting

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Setting service

type SettingService interface {
	InitDB(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*InitDBResp, error)
	GetConfiguration(ctx context.Context, in *GetConfigurationReq, opts ...client.CallOption) (*GetConfigurationResp, error)
	AddConfiguration(ctx context.Context, in *AddConfigurationReq, opts ...client.CallOption) (*AddConfigurationResp, error)
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationReq, opts ...client.CallOption) (*UpdateConfigurationResp, error)
	DeleteConfiguration(ctx context.Context, in *DeleteConfigurationReq, opts ...client.CallOption) (*DeleteConfigurationResp, error)
	Greeting(ctx context.Context, in *SettingGreetingReq, opts ...client.CallOption) (*SettingGreetingResp, error)
}

type settingService struct {
	c    client.Client
	name string
}

func NewSettingService(name string, c client.Client) SettingService {
	return &settingService{
		c:    c,
		name: name,
	}
}

func (c *settingService) InitDB(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*InitDBResp, error) {
	req := c.c.NewRequest(c.name, "Setting.InitDB", in)
	out := new(InitDBResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetConfiguration(ctx context.Context, in *GetConfigurationReq, opts ...client.CallOption) (*GetConfigurationResp, error) {
	req := c.c.NewRequest(c.name, "Setting.GetConfiguration", in)
	out := new(GetConfigurationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) AddConfiguration(ctx context.Context, in *AddConfigurationReq, opts ...client.CallOption) (*AddConfigurationResp, error) {
	req := c.c.NewRequest(c.name, "Setting.AddConfiguration", in)
	out := new(AddConfigurationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationReq, opts ...client.CallOption) (*UpdateConfigurationResp, error) {
	req := c.c.NewRequest(c.name, "Setting.UpdateConfiguration", in)
	out := new(UpdateConfigurationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) DeleteConfiguration(ctx context.Context, in *DeleteConfigurationReq, opts ...client.CallOption) (*DeleteConfigurationResp, error) {
	req := c.c.NewRequest(c.name, "Setting.DeleteConfiguration", in)
	out := new(DeleteConfigurationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) Greeting(ctx context.Context, in *SettingGreetingReq, opts ...client.CallOption) (*SettingGreetingResp, error) {
	req := c.c.NewRequest(c.name, "Setting.Greeting", in)
	out := new(SettingGreetingResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Setting service

type SettingHandler interface {
	InitDB(context.Context, *emptypb.Empty, *InitDBResp) error
	GetConfiguration(context.Context, *GetConfigurationReq, *GetConfigurationResp) error
	AddConfiguration(context.Context, *AddConfigurationReq, *AddConfigurationResp) error
	UpdateConfiguration(context.Context, *UpdateConfigurationReq, *UpdateConfigurationResp) error
	DeleteConfiguration(context.Context, *DeleteConfigurationReq, *DeleteConfigurationResp) error
	Greeting(context.Context, *SettingGreetingReq, *SettingGreetingResp) error
}

func RegisterSettingHandler(s server.Server, hdlr SettingHandler, opts ...server.HandlerOption) error {
	type setting interface {
		InitDB(ctx context.Context, in *emptypb.Empty, out *InitDBResp) error
		GetConfiguration(ctx context.Context, in *GetConfigurationReq, out *GetConfigurationResp) error
		AddConfiguration(ctx context.Context, in *AddConfigurationReq, out *AddConfigurationResp) error
		UpdateConfiguration(ctx context.Context, in *UpdateConfigurationReq, out *UpdateConfigurationResp) error
		DeleteConfiguration(ctx context.Context, in *DeleteConfigurationReq, out *DeleteConfigurationResp) error
		Greeting(ctx context.Context, in *SettingGreetingReq, out *SettingGreetingResp) error
	}
	type Setting struct {
		setting
	}
	h := &settingHandler{hdlr}
	return s.Handle(s.NewHandler(&Setting{h}, opts...))
}

type settingHandler struct {
	SettingHandler
}

func (h *settingHandler) InitDB(ctx context.Context, in *emptypb.Empty, out *InitDBResp) error {
	return h.SettingHandler.InitDB(ctx, in, out)
}

func (h *settingHandler) GetConfiguration(ctx context.Context, in *GetConfigurationReq, out *GetConfigurationResp) error {
	return h.SettingHandler.GetConfiguration(ctx, in, out)
}

func (h *settingHandler) AddConfiguration(ctx context.Context, in *AddConfigurationReq, out *AddConfigurationResp) error {
	return h.SettingHandler.AddConfiguration(ctx, in, out)
}

func (h *settingHandler) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationReq, out *UpdateConfigurationResp) error {
	return h.SettingHandler.UpdateConfiguration(ctx, in, out)
}

func (h *settingHandler) DeleteConfiguration(ctx context.Context, in *DeleteConfigurationReq, out *DeleteConfigurationResp) error {
	return h.SettingHandler.DeleteConfiguration(ctx, in, out)
}

func (h *settingHandler) Greeting(ctx context.Context, in *SettingGreetingReq, out *SettingGreetingResp) error {
	return h.SettingHandler.Greeting(ctx, in, out)
}
