// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.account/account.proto

package account

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Account service

func NewAccountEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Account service

type AccountService interface {
	InitDB(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*InitDBResp, error)
	GetViewer(ctx context.Context, in *GetViewerReq, opts ...client.CallOption) (*GetViewerResp, error)
	ListViewers(ctx context.Context, in *ListViewersReq, opts ...client.CallOption) (*ListViewersResp, error)
	FilterViewers(ctx context.Context, in *FilterViewersReq, opts ...client.CallOption) (*FilterViewersResp, error)
	AddViewer(ctx context.Context, in *AddViewerReq, opts ...client.CallOption) (*AddViewerResp, error)
	UpdateViewer(ctx context.Context, in *UpdateViewerReq, opts ...client.CallOption) (*UpdateViewerResp, error)
	DeleteViewer(ctx context.Context, in *DeleteViewerReq, opts ...client.CallOption) (*DeleteViewerResp, error)
	TotalViewers(ctx context.Context, in *TotalViewersReq, opts ...client.CallOption) (*TotalViewersResp, error)
	GetStreamer(ctx context.Context, in *GetStreamerReq, opts ...client.CallOption) (*GetStreamerResp, error)
	ListStreamers(ctx context.Context, in *ListStreamersReq, opts ...client.CallOption) (*ListStreamersResp, error)
	FilterStreamers(ctx context.Context, in *FilterStreamersReq, opts ...client.CallOption) (*FilterStreamersResp, error)
	AddStreamer(ctx context.Context, in *AddStreamerReq, opts ...client.CallOption) (*AddStreamerResp, error)
	UpdateStreamer(ctx context.Context, in *UpdateStreamerReq, opts ...client.CallOption) (*UpdateStreamerResp, error)
	DeleteStreamer(ctx context.Context, in *DeleteStreamerReq, opts ...client.CallOption) (*DeleteStreamerResp, error)
	TotalStreamers(ctx context.Context, in *TotalStreamersReq, opts ...client.CallOption) (*TotalStreamersResp, error)
	GetManager(ctx context.Context, in *GetManagerReq, opts ...client.CallOption) (*GetManagerResp, error)
	ListManagers(ctx context.Context, in *ListManagersReq, opts ...client.CallOption) (*ListManagersResp, error)
	FilterManagers(ctx context.Context, in *FilterManagersReq, opts ...client.CallOption) (*FilterManagersResp, error)
	AddManager(ctx context.Context, in *AddManagerReq, opts ...client.CallOption) (*AddManagerResp, error)
	UpdateManager(ctx context.Context, in *UpdateManagerReq, opts ...client.CallOption) (*UpdateManagerResp, error)
	DeleteManager(ctx context.Context, in *DeleteManagerReq, opts ...client.CallOption) (*DeleteManagerResp, error)
	TotalManagers(ctx context.Context, in *TotalManagersReq, opts ...client.CallOption) (*TotalManagersResp, error)
	GetUnion(ctx context.Context, in *GetUnionReq, opts ...client.CallOption) (*GetUnionResp, error)
	ListUnions(ctx context.Context, in *ListUnionsReq, opts ...client.CallOption) (*ListUnionsResp, error)
	FilterUnions(ctx context.Context, in *FilterUnionsReq, opts ...client.CallOption) (*FilterUnionsResp, error)
	AddUnion(ctx context.Context, in *AddUnionReq, opts ...client.CallOption) (*AddUnionResp, error)
	UpdateUnion(ctx context.Context, in *UpdateUnionReq, opts ...client.CallOption) (*UpdateUnionResp, error)
	DeleteUnion(ctx context.Context, in *DeleteUnionReq, opts ...client.CallOption) (*DeleteUnionResp, error)
	TotalUnions(ctx context.Context, in *TotalUnionsReq, opts ...client.CallOption) (*TotalUnionsResp, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) InitDB(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*InitDBResp, error) {
	req := c.c.NewRequest(c.name, "Account.InitDB", in)
	out := new(InitDBResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetViewer(ctx context.Context, in *GetViewerReq, opts ...client.CallOption) (*GetViewerResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetViewer", in)
	out := new(GetViewerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ListViewers(ctx context.Context, in *ListViewersReq, opts ...client.CallOption) (*ListViewersResp, error) {
	req := c.c.NewRequest(c.name, "Account.ListViewers", in)
	out := new(ListViewersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FilterViewers(ctx context.Context, in *FilterViewersReq, opts ...client.CallOption) (*FilterViewersResp, error) {
	req := c.c.NewRequest(c.name, "Account.FilterViewers", in)
	out := new(FilterViewersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AddViewer(ctx context.Context, in *AddViewerReq, opts ...client.CallOption) (*AddViewerResp, error) {
	req := c.c.NewRequest(c.name, "Account.AddViewer", in)
	out := new(AddViewerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateViewer(ctx context.Context, in *UpdateViewerReq, opts ...client.CallOption) (*UpdateViewerResp, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateViewer", in)
	out := new(UpdateViewerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteViewer(ctx context.Context, in *DeleteViewerReq, opts ...client.CallOption) (*DeleteViewerResp, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteViewer", in)
	out := new(DeleteViewerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) TotalViewers(ctx context.Context, in *TotalViewersReq, opts ...client.CallOption) (*TotalViewersResp, error) {
	req := c.c.NewRequest(c.name, "Account.TotalViewers", in)
	out := new(TotalViewersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetStreamer(ctx context.Context, in *GetStreamerReq, opts ...client.CallOption) (*GetStreamerResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetStreamer", in)
	out := new(GetStreamerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ListStreamers(ctx context.Context, in *ListStreamersReq, opts ...client.CallOption) (*ListStreamersResp, error) {
	req := c.c.NewRequest(c.name, "Account.ListStreamers", in)
	out := new(ListStreamersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FilterStreamers(ctx context.Context, in *FilterStreamersReq, opts ...client.CallOption) (*FilterStreamersResp, error) {
	req := c.c.NewRequest(c.name, "Account.FilterStreamers", in)
	out := new(FilterStreamersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AddStreamer(ctx context.Context, in *AddStreamerReq, opts ...client.CallOption) (*AddStreamerResp, error) {
	req := c.c.NewRequest(c.name, "Account.AddStreamer", in)
	out := new(AddStreamerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateStreamer(ctx context.Context, in *UpdateStreamerReq, opts ...client.CallOption) (*UpdateStreamerResp, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateStreamer", in)
	out := new(UpdateStreamerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteStreamer(ctx context.Context, in *DeleteStreamerReq, opts ...client.CallOption) (*DeleteStreamerResp, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteStreamer", in)
	out := new(DeleteStreamerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) TotalStreamers(ctx context.Context, in *TotalStreamersReq, opts ...client.CallOption) (*TotalStreamersResp, error) {
	req := c.c.NewRequest(c.name, "Account.TotalStreamers", in)
	out := new(TotalStreamersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetManager(ctx context.Context, in *GetManagerReq, opts ...client.CallOption) (*GetManagerResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetManager", in)
	out := new(GetManagerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ListManagers(ctx context.Context, in *ListManagersReq, opts ...client.CallOption) (*ListManagersResp, error) {
	req := c.c.NewRequest(c.name, "Account.ListManagers", in)
	out := new(ListManagersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FilterManagers(ctx context.Context, in *FilterManagersReq, opts ...client.CallOption) (*FilterManagersResp, error) {
	req := c.c.NewRequest(c.name, "Account.FilterManagers", in)
	out := new(FilterManagersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AddManager(ctx context.Context, in *AddManagerReq, opts ...client.CallOption) (*AddManagerResp, error) {
	req := c.c.NewRequest(c.name, "Account.AddManager", in)
	out := new(AddManagerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateManager(ctx context.Context, in *UpdateManagerReq, opts ...client.CallOption) (*UpdateManagerResp, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateManager", in)
	out := new(UpdateManagerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteManager(ctx context.Context, in *DeleteManagerReq, opts ...client.CallOption) (*DeleteManagerResp, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteManager", in)
	out := new(DeleteManagerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) TotalManagers(ctx context.Context, in *TotalManagersReq, opts ...client.CallOption) (*TotalManagersResp, error) {
	req := c.c.NewRequest(c.name, "Account.TotalManagers", in)
	out := new(TotalManagersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUnion(ctx context.Context, in *GetUnionReq, opts ...client.CallOption) (*GetUnionResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetUnion", in)
	out := new(GetUnionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ListUnions(ctx context.Context, in *ListUnionsReq, opts ...client.CallOption) (*ListUnionsResp, error) {
	req := c.c.NewRequest(c.name, "Account.ListUnions", in)
	out := new(ListUnionsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FilterUnions(ctx context.Context, in *FilterUnionsReq, opts ...client.CallOption) (*FilterUnionsResp, error) {
	req := c.c.NewRequest(c.name, "Account.FilterUnions", in)
	out := new(FilterUnionsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AddUnion(ctx context.Context, in *AddUnionReq, opts ...client.CallOption) (*AddUnionResp, error) {
	req := c.c.NewRequest(c.name, "Account.AddUnion", in)
	out := new(AddUnionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateUnion(ctx context.Context, in *UpdateUnionReq, opts ...client.CallOption) (*UpdateUnionResp, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateUnion", in)
	out := new(UpdateUnionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteUnion(ctx context.Context, in *DeleteUnionReq, opts ...client.CallOption) (*DeleteUnionResp, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteUnion", in)
	out := new(DeleteUnionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) TotalUnions(ctx context.Context, in *TotalUnionsReq, opts ...client.CallOption) (*TotalUnionsResp, error) {
	req := c.c.NewRequest(c.name, "Account.TotalUnions", in)
	out := new(TotalUnionsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	InitDB(context.Context, *emptypb.Empty, *InitDBResp) error
	GetViewer(context.Context, *GetViewerReq, *GetViewerResp) error
	ListViewers(context.Context, *ListViewersReq, *ListViewersResp) error
	FilterViewers(context.Context, *FilterViewersReq, *FilterViewersResp) error
	AddViewer(context.Context, *AddViewerReq, *AddViewerResp) error
	UpdateViewer(context.Context, *UpdateViewerReq, *UpdateViewerResp) error
	DeleteViewer(context.Context, *DeleteViewerReq, *DeleteViewerResp) error
	TotalViewers(context.Context, *TotalViewersReq, *TotalViewersResp) error
	GetStreamer(context.Context, *GetStreamerReq, *GetStreamerResp) error
	ListStreamers(context.Context, *ListStreamersReq, *ListStreamersResp) error
	FilterStreamers(context.Context, *FilterStreamersReq, *FilterStreamersResp) error
	AddStreamer(context.Context, *AddStreamerReq, *AddStreamerResp) error
	UpdateStreamer(context.Context, *UpdateStreamerReq, *UpdateStreamerResp) error
	DeleteStreamer(context.Context, *DeleteStreamerReq, *DeleteStreamerResp) error
	TotalStreamers(context.Context, *TotalStreamersReq, *TotalStreamersResp) error
	GetManager(context.Context, *GetManagerReq, *GetManagerResp) error
	ListManagers(context.Context, *ListManagersReq, *ListManagersResp) error
	FilterManagers(context.Context, *FilterManagersReq, *FilterManagersResp) error
	AddManager(context.Context, *AddManagerReq, *AddManagerResp) error
	UpdateManager(context.Context, *UpdateManagerReq, *UpdateManagerResp) error
	DeleteManager(context.Context, *DeleteManagerReq, *DeleteManagerResp) error
	TotalManagers(context.Context, *TotalManagersReq, *TotalManagersResp) error
	GetUnion(context.Context, *GetUnionReq, *GetUnionResp) error
	ListUnions(context.Context, *ListUnionsReq, *ListUnionsResp) error
	FilterUnions(context.Context, *FilterUnionsReq, *FilterUnionsResp) error
	AddUnion(context.Context, *AddUnionReq, *AddUnionResp) error
	UpdateUnion(context.Context, *UpdateUnionReq, *UpdateUnionResp) error
	DeleteUnion(context.Context, *DeleteUnionReq, *DeleteUnionResp) error
	TotalUnions(context.Context, *TotalUnionsReq, *TotalUnionsResp) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		InitDB(ctx context.Context, in *emptypb.Empty, out *InitDBResp) error
		GetViewer(ctx context.Context, in *GetViewerReq, out *GetViewerResp) error
		ListViewers(ctx context.Context, in *ListViewersReq, out *ListViewersResp) error
		FilterViewers(ctx context.Context, in *FilterViewersReq, out *FilterViewersResp) error
		AddViewer(ctx context.Context, in *AddViewerReq, out *AddViewerResp) error
		UpdateViewer(ctx context.Context, in *UpdateViewerReq, out *UpdateViewerResp) error
		DeleteViewer(ctx context.Context, in *DeleteViewerReq, out *DeleteViewerResp) error
		TotalViewers(ctx context.Context, in *TotalViewersReq, out *TotalViewersResp) error
		GetStreamer(ctx context.Context, in *GetStreamerReq, out *GetStreamerResp) error
		ListStreamers(ctx context.Context, in *ListStreamersReq, out *ListStreamersResp) error
		FilterStreamers(ctx context.Context, in *FilterStreamersReq, out *FilterStreamersResp) error
		AddStreamer(ctx context.Context, in *AddStreamerReq, out *AddStreamerResp) error
		UpdateStreamer(ctx context.Context, in *UpdateStreamerReq, out *UpdateStreamerResp) error
		DeleteStreamer(ctx context.Context, in *DeleteStreamerReq, out *DeleteStreamerResp) error
		TotalStreamers(ctx context.Context, in *TotalStreamersReq, out *TotalStreamersResp) error
		GetManager(ctx context.Context, in *GetManagerReq, out *GetManagerResp) error
		ListManagers(ctx context.Context, in *ListManagersReq, out *ListManagersResp) error
		FilterManagers(ctx context.Context, in *FilterManagersReq, out *FilterManagersResp) error
		AddManager(ctx context.Context, in *AddManagerReq, out *AddManagerResp) error
		UpdateManager(ctx context.Context, in *UpdateManagerReq, out *UpdateManagerResp) error
		DeleteManager(ctx context.Context, in *DeleteManagerReq, out *DeleteManagerResp) error
		TotalManagers(ctx context.Context, in *TotalManagersReq, out *TotalManagersResp) error
		GetUnion(ctx context.Context, in *GetUnionReq, out *GetUnionResp) error
		ListUnions(ctx context.Context, in *ListUnionsReq, out *ListUnionsResp) error
		FilterUnions(ctx context.Context, in *FilterUnionsReq, out *FilterUnionsResp) error
		AddUnion(ctx context.Context, in *AddUnionReq, out *AddUnionResp) error
		UpdateUnion(ctx context.Context, in *UpdateUnionReq, out *UpdateUnionResp) error
		DeleteUnion(ctx context.Context, in *DeleteUnionReq, out *DeleteUnionResp) error
		TotalUnions(ctx context.Context, in *TotalUnionsReq, out *TotalUnionsResp) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) InitDB(ctx context.Context, in *emptypb.Empty, out *InitDBResp) error {
	return h.AccountHandler.InitDB(ctx, in, out)
}

func (h *accountHandler) GetViewer(ctx context.Context, in *GetViewerReq, out *GetViewerResp) error {
	return h.AccountHandler.GetViewer(ctx, in, out)
}

func (h *accountHandler) ListViewers(ctx context.Context, in *ListViewersReq, out *ListViewersResp) error {
	return h.AccountHandler.ListViewers(ctx, in, out)
}

func (h *accountHandler) FilterViewers(ctx context.Context, in *FilterViewersReq, out *FilterViewersResp) error {
	return h.AccountHandler.FilterViewers(ctx, in, out)
}

func (h *accountHandler) AddViewer(ctx context.Context, in *AddViewerReq, out *AddViewerResp) error {
	return h.AccountHandler.AddViewer(ctx, in, out)
}

func (h *accountHandler) UpdateViewer(ctx context.Context, in *UpdateViewerReq, out *UpdateViewerResp) error {
	return h.AccountHandler.UpdateViewer(ctx, in, out)
}

func (h *accountHandler) DeleteViewer(ctx context.Context, in *DeleteViewerReq, out *DeleteViewerResp) error {
	return h.AccountHandler.DeleteViewer(ctx, in, out)
}

func (h *accountHandler) TotalViewers(ctx context.Context, in *TotalViewersReq, out *TotalViewersResp) error {
	return h.AccountHandler.TotalViewers(ctx, in, out)
}

func (h *accountHandler) GetStreamer(ctx context.Context, in *GetStreamerReq, out *GetStreamerResp) error {
	return h.AccountHandler.GetStreamer(ctx, in, out)
}

func (h *accountHandler) ListStreamers(ctx context.Context, in *ListStreamersReq, out *ListStreamersResp) error {
	return h.AccountHandler.ListStreamers(ctx, in, out)
}

func (h *accountHandler) FilterStreamers(ctx context.Context, in *FilterStreamersReq, out *FilterStreamersResp) error {
	return h.AccountHandler.FilterStreamers(ctx, in, out)
}

func (h *accountHandler) AddStreamer(ctx context.Context, in *AddStreamerReq, out *AddStreamerResp) error {
	return h.AccountHandler.AddStreamer(ctx, in, out)
}

func (h *accountHandler) UpdateStreamer(ctx context.Context, in *UpdateStreamerReq, out *UpdateStreamerResp) error {
	return h.AccountHandler.UpdateStreamer(ctx, in, out)
}

func (h *accountHandler) DeleteStreamer(ctx context.Context, in *DeleteStreamerReq, out *DeleteStreamerResp) error {
	return h.AccountHandler.DeleteStreamer(ctx, in, out)
}

func (h *accountHandler) TotalStreamers(ctx context.Context, in *TotalStreamersReq, out *TotalStreamersResp) error {
	return h.AccountHandler.TotalStreamers(ctx, in, out)
}

func (h *accountHandler) GetManager(ctx context.Context, in *GetManagerReq, out *GetManagerResp) error {
	return h.AccountHandler.GetManager(ctx, in, out)
}

func (h *accountHandler) ListManagers(ctx context.Context, in *ListManagersReq, out *ListManagersResp) error {
	return h.AccountHandler.ListManagers(ctx, in, out)
}

func (h *accountHandler) FilterManagers(ctx context.Context, in *FilterManagersReq, out *FilterManagersResp) error {
	return h.AccountHandler.FilterManagers(ctx, in, out)
}

func (h *accountHandler) AddManager(ctx context.Context, in *AddManagerReq, out *AddManagerResp) error {
	return h.AccountHandler.AddManager(ctx, in, out)
}

func (h *accountHandler) UpdateManager(ctx context.Context, in *UpdateManagerReq, out *UpdateManagerResp) error {
	return h.AccountHandler.UpdateManager(ctx, in, out)
}

func (h *accountHandler) DeleteManager(ctx context.Context, in *DeleteManagerReq, out *DeleteManagerResp) error {
	return h.AccountHandler.DeleteManager(ctx, in, out)
}

func (h *accountHandler) TotalManagers(ctx context.Context, in *TotalManagersReq, out *TotalManagersResp) error {
	return h.AccountHandler.TotalManagers(ctx, in, out)
}

func (h *accountHandler) GetUnion(ctx context.Context, in *GetUnionReq, out *GetUnionResp) error {
	return h.AccountHandler.GetUnion(ctx, in, out)
}

func (h *accountHandler) ListUnions(ctx context.Context, in *ListUnionsReq, out *ListUnionsResp) error {
	return h.AccountHandler.ListUnions(ctx, in, out)
}

func (h *accountHandler) FilterUnions(ctx context.Context, in *FilterUnionsReq, out *FilterUnionsResp) error {
	return h.AccountHandler.FilterUnions(ctx, in, out)
}

func (h *accountHandler) AddUnion(ctx context.Context, in *AddUnionReq, out *AddUnionResp) error {
	return h.AccountHandler.AddUnion(ctx, in, out)
}

func (h *accountHandler) UpdateUnion(ctx context.Context, in *UpdateUnionReq, out *UpdateUnionResp) error {
	return h.AccountHandler.UpdateUnion(ctx, in, out)
}

func (h *accountHandler) DeleteUnion(ctx context.Context, in *DeleteUnionReq, out *DeleteUnionResp) error {
	return h.AccountHandler.DeleteUnion(ctx, in, out)
}

func (h *accountHandler) TotalUnions(ctx context.Context, in *TotalUnionsReq, out *TotalUnionsResp) error {
	return h.AccountHandler.TotalUnions(ctx, in, out)
}
