// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: svc.biz.room/live.proto

package room

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Live_GetLiveInfo_FullMethodName  = "/svc.biz.room.Live/GetLiveInfo"
	Live_MGetLiveInfo_FullMethodName = "/svc.biz.room.Live/MGetLiveInfo"
	Live_ListLiveInfo_FullMethodName = "/svc.biz.room.Live/ListLiveInfo"
)

// LiveClient is the client API for Live service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveClient interface {
	// 查询直播间信息
	GetLiveInfo(ctx context.Context, in *GetLiveInfoReq, opts ...grpc.CallOption) (*GetLiveInfoResp, error)
	// 批量获取直播间信息
	MGetLiveInfo(ctx context.Context, in *MGetLiveInfoReq, opts ...grpc.CallOption) (*MGetLiveInfoResp, error)
	// 获取在播直播间列表
	ListLiveInfo(ctx context.Context, in *ListLiveInfoReq, opts ...grpc.CallOption) (*ListLiveInfoResp, error)
}

type liveClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveClient(cc grpc.ClientConnInterface) LiveClient {
	return &liveClient{cc}
}

func (c *liveClient) GetLiveInfo(ctx context.Context, in *GetLiveInfoReq, opts ...grpc.CallOption) (*GetLiveInfoResp, error) {
	out := new(GetLiveInfoResp)
	err := c.cc.Invoke(ctx, Live_GetLiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) MGetLiveInfo(ctx context.Context, in *MGetLiveInfoReq, opts ...grpc.CallOption) (*MGetLiveInfoResp, error) {
	out := new(MGetLiveInfoResp)
	err := c.cc.Invoke(ctx, Live_MGetLiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) ListLiveInfo(ctx context.Context, in *ListLiveInfoReq, opts ...grpc.CallOption) (*ListLiveInfoResp, error) {
	out := new(ListLiveInfoResp)
	err := c.cc.Invoke(ctx, Live_ListLiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServer is the server API for Live service.
// All implementations must embed UnimplementedLiveServer
// for forward compatibility
type LiveServer interface {
	// 查询直播间信息
	GetLiveInfo(context.Context, *GetLiveInfoReq) (*GetLiveInfoResp, error)
	// 批量获取直播间信息
	MGetLiveInfo(context.Context, *MGetLiveInfoReq) (*MGetLiveInfoResp, error)
	// 获取在播直播间列表
	ListLiveInfo(context.Context, *ListLiveInfoReq) (*ListLiveInfoResp, error)
	mustEmbedUnimplementedLiveServer()
}

// UnimplementedLiveServer must be embedded to have forward compatible implementations.
type UnimplementedLiveServer struct {
}

func (UnimplementedLiveServer) GetLiveInfo(context.Context, *GetLiveInfoReq) (*GetLiveInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInfo not implemented")
}
func (UnimplementedLiveServer) MGetLiveInfo(context.Context, *MGetLiveInfoReq) (*MGetLiveInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetLiveInfo not implemented")
}
func (UnimplementedLiveServer) ListLiveInfo(context.Context, *ListLiveInfoReq) (*ListLiveInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveInfo not implemented")
}
func (UnimplementedLiveServer) mustEmbedUnimplementedLiveServer() {}

// UnsafeLiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServer will
// result in compilation errors.
type UnsafeLiveServer interface {
	mustEmbedUnimplementedLiveServer()
}

func RegisterLiveServer(s grpc.ServiceRegistrar, srv LiveServer) {
	s.RegisterService(&Live_ServiceDesc, srv)
}

func _Live_GetLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).GetLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_GetLiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).GetLiveInfo(ctx, req.(*GetLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_MGetLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).MGetLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_MGetLiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).MGetLiveInfo(ctx, req.(*MGetLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_ListLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).ListLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_ListLiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).ListLiveInfo(ctx, req.(*ListLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Live_ServiceDesc is the grpc.ServiceDesc for Live service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Live_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.room.Live",
	HandlerType: (*LiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveInfo",
			Handler:    _Live_GetLiveInfo_Handler,
		},
		{
			MethodName: "MGetLiveInfo",
			Handler:    _Live_MGetLiveInfo_Handler,
		},
		{
			MethodName: "ListLiveInfo",
			Handler:    _Live_ListLiveInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.room/live.proto",
}
