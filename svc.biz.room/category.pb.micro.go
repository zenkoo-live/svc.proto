// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.room/category.proto

package room

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	// 获取分类
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...client.CallOption) (*GetCategoryResp, error)
	// 获取分类
	MGetCategory(ctx context.Context, in *MGetCategoryReq, opts ...client.CallOption) (*MGetCategoryResp, error)
	// 创建分类
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...client.CallOption) (*CreateCategoryResp, error)
	// 更新某个分类信息
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// 删除一个分类信息
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// 获取分类，返回子级集合
	ListCategory(ctx context.Context, in *ListCategoryReq, opts ...client.CallOption) (*ListCategoryResp, error)
	// 获取全部板块分类（分类及子分类树结构）
	ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, opts ...client.CallOption) (*ListCategoryTreeResp, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...client.CallOption) (*GetCategoryResp, error) {
	req := c.c.NewRequest(c.name, "Category.GetCategory", in)
	out := new(GetCategoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) MGetCategory(ctx context.Context, in *MGetCategoryReq, opts ...client.CallOption) (*MGetCategoryResp, error) {
	req := c.c.NewRequest(c.name, "Category.MGetCategory", in)
	out := new(MGetCategoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...client.CallOption) (*CreateCategoryResp, error) {
	req := c.c.NewRequest(c.name, "Category.CreateCategory", in)
	out := new(CreateCategoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Category.UpdateCategory", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Category.DeleteCategory", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) ListCategory(ctx context.Context, in *ListCategoryReq, opts ...client.CallOption) (*ListCategoryResp, error) {
	req := c.c.NewRequest(c.name, "Category.ListCategory", in)
	out := new(ListCategoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, opts ...client.CallOption) (*ListCategoryTreeResp, error) {
	req := c.c.NewRequest(c.name, "Category.ListCategoryTree", in)
	out := new(ListCategoryTreeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	// 获取分类
	GetCategory(context.Context, *GetCategoryReq, *GetCategoryResp) error
	// 获取分类
	MGetCategory(context.Context, *MGetCategoryReq, *MGetCategoryResp) error
	// 创建分类
	CreateCategory(context.Context, *CreateCategoryReq, *CreateCategoryResp) error
	// 更新某个分类信息
	UpdateCategory(context.Context, *UpdateCategoryReq, *emptypb.Empty) error
	// 删除一个分类信息
	DeleteCategory(context.Context, *DeleteCategoryReq, *emptypb.Empty) error
	// 获取分类，返回子级集合
	ListCategory(context.Context, *ListCategoryReq, *ListCategoryResp) error
	// 获取全部板块分类（分类及子分类树结构）
	ListCategoryTree(context.Context, *ListCategoryTreeReq, *ListCategoryTreeResp) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		GetCategory(ctx context.Context, in *GetCategoryReq, out *GetCategoryResp) error
		MGetCategory(ctx context.Context, in *MGetCategoryReq, out *MGetCategoryResp) error
		CreateCategory(ctx context.Context, in *CreateCategoryReq, out *CreateCategoryResp) error
		UpdateCategory(ctx context.Context, in *UpdateCategoryReq, out *emptypb.Empty) error
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *emptypb.Empty) error
		ListCategory(ctx context.Context, in *ListCategoryReq, out *ListCategoryResp) error
		ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, out *ListCategoryTreeResp) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) GetCategory(ctx context.Context, in *GetCategoryReq, out *GetCategoryResp) error {
	return h.CategoryHandler.GetCategory(ctx, in, out)
}

func (h *categoryHandler) MGetCategory(ctx context.Context, in *MGetCategoryReq, out *MGetCategoryResp) error {
	return h.CategoryHandler.MGetCategory(ctx, in, out)
}

func (h *categoryHandler) CreateCategory(ctx context.Context, in *CreateCategoryReq, out *CreateCategoryResp) error {
	return h.CategoryHandler.CreateCategory(ctx, in, out)
}

func (h *categoryHandler) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, out *emptypb.Empty) error {
	return h.CategoryHandler.UpdateCategory(ctx, in, out)
}

func (h *categoryHandler) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *emptypb.Empty) error {
	return h.CategoryHandler.DeleteCategory(ctx, in, out)
}

func (h *categoryHandler) ListCategory(ctx context.Context, in *ListCategoryReq, out *ListCategoryResp) error {
	return h.CategoryHandler.ListCategory(ctx, in, out)
}

func (h *categoryHandler) ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, out *ListCategoryTreeResp) error {
	return h.CategoryHandler.ListCategoryTree(ctx, in, out)
}
