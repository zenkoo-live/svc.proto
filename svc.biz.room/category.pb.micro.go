// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.room/category.proto

package room

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	// 创建分类
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateResp, error)
	// 更新某个分类信息
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// 删除一个分类信息
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error)
	// 获取某个分类信息
	Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetResp, error)
	// 获取分类，返回子级集合
	List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error)
	// 获取分类
	ListAll(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error)
	// 获取全部板块分类（分类及子分类树结构）
	ListTree(ctx context.Context, in *ListTreeReq, opts ...client.CallOption) (*ListTreeResp, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateResp, error) {
	req := c.c.NewRequest(c.name, "Category.Create", in)
	out := new(CreateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Category.Update", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Category.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetResp, error) {
	req := c.c.NewRequest(c.name, "Category.Get", in)
	out := new(GetResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error) {
	req := c.c.NewRequest(c.name, "Category.List", in)
	out := new(ListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) ListAll(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error) {
	req := c.c.NewRequest(c.name, "Category.ListAll", in)
	out := new(ListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) ListTree(ctx context.Context, in *ListTreeReq, opts ...client.CallOption) (*ListTreeResp, error) {
	req := c.c.NewRequest(c.name, "Category.ListTree", in)
	out := new(ListTreeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	// 创建分类
	Create(context.Context, *CreateReq, *CreateResp) error
	// 更新某个分类信息
	Update(context.Context, *UpdateReq, *emptypb.Empty) error
	// 删除一个分类信息
	Delete(context.Context, *DeleteReq, *emptypb.Empty) error
	// 获取某个分类信息
	Get(context.Context, *GetReq, *GetResp) error
	// 获取分类，返回子级集合
	List(context.Context, *ListReq, *ListResp) error
	// 获取分类
	ListAll(context.Context, *ListReq, *ListResp) error
	// 获取全部板块分类（分类及子分类树结构）
	ListTree(context.Context, *ListTreeReq, *ListTreeResp) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		Create(ctx context.Context, in *CreateReq, out *CreateResp) error
		Update(ctx context.Context, in *UpdateReq, out *emptypb.Empty) error
		Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error
		Get(ctx context.Context, in *GetReq, out *GetResp) error
		List(ctx context.Context, in *ListReq, out *ListResp) error
		ListAll(ctx context.Context, in *ListReq, out *ListResp) error
		ListTree(ctx context.Context, in *ListTreeReq, out *ListTreeResp) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) Create(ctx context.Context, in *CreateReq, out *CreateResp) error {
	return h.CategoryHandler.Create(ctx, in, out)
}

func (h *categoryHandler) Update(ctx context.Context, in *UpdateReq, out *emptypb.Empty) error {
	return h.CategoryHandler.Update(ctx, in, out)
}

func (h *categoryHandler) Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error {
	return h.CategoryHandler.Delete(ctx, in, out)
}

func (h *categoryHandler) Get(ctx context.Context, in *GetReq, out *GetResp) error {
	return h.CategoryHandler.Get(ctx, in, out)
}

func (h *categoryHandler) List(ctx context.Context, in *ListReq, out *ListResp) error {
	return h.CategoryHandler.List(ctx, in, out)
}

func (h *categoryHandler) ListAll(ctx context.Context, in *ListReq, out *ListResp) error {
	return h.CategoryHandler.ListAll(ctx, in, out)
}

func (h *categoryHandler) ListTree(ctx context.Context, in *ListTreeReq, out *ListTreeResp) error {
	return h.CategoryHandler.ListTree(ctx, in, out)
}
