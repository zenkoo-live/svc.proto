// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.biz.room/room.proto

package room

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Room service

func NewRoomEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Room service

type RoomService interface {
	GetRoom(ctx context.Context, in *GetRoomReq, opts ...client.CallOption) (*GetRoomResp, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) GetRoom(ctx context.Context, in *GetRoomReq, opts ...client.CallOption) (*GetRoomResp, error) {
	req := c.c.NewRequest(c.name, "Room.GetRoom", in)
	out := new(GetRoomResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Room service

type RoomHandler interface {
	GetRoom(context.Context, *GetRoomReq, *GetRoomResp) error
}

func RegisterRoomHandler(s server.Server, hdlr RoomHandler, opts ...server.HandlerOption) error {
	type room interface {
		GetRoom(ctx context.Context, in *GetRoomReq, out *GetRoomResp) error
	}
	type Room struct {
		room
	}
	h := &roomHandler{hdlr}
	return s.Handle(s.NewHandler(&Room{h}, opts...))
}

type roomHandler struct {
	RoomHandler
}

func (h *roomHandler) GetRoom(ctx context.Context, in *GetRoomReq, out *GetRoomResp) error {
	return h.RoomHandler.GetRoom(ctx, in, out)
}
