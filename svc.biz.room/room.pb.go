// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.0
// source: svc.biz.room/room.proto

package room

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortType int32

const (
	SortType_SortTypeUnknown   SortType = 0 // 未知
	SortType_SortTypeHot       SortType = 1 // 热度值（首页除关注之外排序都是使用热度值[推荐tab+分类tab]；后台热度值 > 魅力值 >在线观众 > 开播时间）
	SortType_SortTypeSearch    SortType = 2 // 搜索（搜索页面的推荐列表排序；后台搜索推荐重 > 魅力值 >在线观众 > 开播时间）
	SortType_SortTypeSubscribe SortType = 3 // 关注（搜索页面的推荐列表排序；后台关注推荐重 > 魅力值 >在线观众 > 开播时间）
	SortType_SortTypeRecommend SortType = 4 // 推荐（房间详情页的”更多直播“推荐列表排序；后台推荐重 > 魅力值 >在线观众 > 开播时间）
	SortType_SortTypeSelected  SortType = 5 // 精选（精选礼物最后赠送时间 > 礼物纯收益）
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "SortTypeUnknown",
		1: "SortTypeHot",
		2: "SortTypeSearch",
		3: "SortTypeSubscribe",
		4: "SortTypeRecommend",
		5: "SortTypeSelected",
	}
	SortType_value = map[string]int32{
		"SortTypeUnknown":   0,
		"SortTypeHot":       1,
		"SortTypeSearch":    2,
		"SortTypeSubscribe": 3,
		"SortTypeRecommend": 4,
		"SortTypeSelected":  5,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_room_room_proto_enumTypes[0].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_svc_biz_room_room_proto_enumTypes[0]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{0}
}

type LiveDisplayType int32

const (
	LiveDisplayType_LiveDisplayTypeUnknown    LiveDisplayType = 0 // 未知
	LiveDisplayType_LiveDisplayTypeHorizontal LiveDisplayType = 1 // 横屏
	LiveDisplayType_LiveDisplayTypeVertical   LiveDisplayType = 2 // 竖屏
)

// Enum value maps for LiveDisplayType.
var (
	LiveDisplayType_name = map[int32]string{
		0: "LiveDisplayTypeUnknown",
		1: "LiveDisplayTypeHorizontal",
		2: "LiveDisplayTypeVertical",
	}
	LiveDisplayType_value = map[string]int32{
		"LiveDisplayTypeUnknown":    0,
		"LiveDisplayTypeHorizontal": 1,
		"LiveDisplayTypeVertical":   2,
	}
)

func (x LiveDisplayType) Enum() *LiveDisplayType {
	p := new(LiveDisplayType)
	*p = x
	return p
}

func (x LiveDisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveDisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_room_room_proto_enumTypes[1].Descriptor()
}

func (LiveDisplayType) Type() protoreflect.EnumType {
	return &file_svc_biz_room_room_proto_enumTypes[1]
}

func (x LiveDisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveDisplayType.Descriptor instead.
func (LiveDisplayType) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{1}
}

type LiveStatus int32

const (
	LiveStatus_LiveStatusUnknown LiveStatus = 0 // 未知
	LiveStatus_LiveStatusOnline  LiveStatus = 1 // 上线
	LiveStatus_LiveStatusOffline LiveStatus = 2 // 下线
)

// Enum value maps for LiveStatus.
var (
	LiveStatus_name = map[int32]string{
		0: "LiveStatusUnknown",
		1: "LiveStatusOnline",
		2: "LiveStatusOffline",
	}
	LiveStatus_value = map[string]int32{
		"LiveStatusUnknown": 0,
		"LiveStatusOnline":  1,
		"LiveStatusOffline": 2,
	}
)

func (x LiveStatus) Enum() *LiveStatus {
	p := new(LiveStatus)
	*p = x
	return p
}

func (x LiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_biz_room_room_proto_enumTypes[2].Descriptor()
}

func (LiveStatus) Type() protoreflect.EnumType {
	return &file_svc_biz_room_room_proto_enumTypes[2]
}

func (x LiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveStatus.Descriptor instead.
func (LiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{2}
}

// 拉流地址
type StreamPull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtmp string `protobuf:"bytes,1,opt,name=rtmp,proto3" json:"rtmp,omitempty"` // RTMP 拉流地址
	Flv  string `protobuf:"bytes,2,opt,name=flv,proto3" json:"flv,omitempty"`   // FLV 拉流地址
	M3U8 string `protobuf:"bytes,3,opt,name=m3u8,proto3" json:"m3u8,omitempty"` // M3U8 拉流地址
	Udp  string `protobuf:"bytes,4,opt,name=udp,proto3" json:"udp,omitempty"`   // UDP 拉流地址
}

func (x *StreamPull) Reset() {
	*x = StreamPull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPull) ProtoMessage() {}

func (x *StreamPull) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPull.ProtoReflect.Descriptor instead.
func (*StreamPull) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{0}
}

func (x *StreamPull) GetRtmp() string {
	if x != nil {
		return x.Rtmp
	}
	return ""
}

func (x *StreamPull) GetFlv() string {
	if x != nil {
		return x.Flv
	}
	return ""
}

func (x *StreamPull) GetM3U8() string {
	if x != nil {
		return x.M3U8
	}
	return ""
}

func (x *StreamPull) GetUdp() string {
	if x != nil {
		return x.Udp
	}
	return ""
}

// 推流地址
type StreamPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtmp        string `protobuf:"bytes,1,opt,name=rtmp,proto3" json:"rtmp,omitempty"`                                    // RTMP 推流地址
	WebRtc      string `protobuf:"bytes,2,opt,name=web_rtc,json=webRtc,proto3" json:"web_rtc,omitempty"`                  // WebRTC 推流地址
	Srt         string `protobuf:"bytes,3,opt,name=srt,proto3" json:"srt,omitempty"`                                      // SRT 推流地址
	RmtpOverSrt string `protobuf:"bytes,4,opt,name=rmtp_over_srt,json=rmtpOverSrt,proto3" json:"rmtp_over_srt,omitempty"` // RTMP over SRT 推流地址
}

func (x *StreamPush) Reset() {
	*x = StreamPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPush) ProtoMessage() {}

func (x *StreamPush) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPush.ProtoReflect.Descriptor instead.
func (*StreamPush) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{1}
}

func (x *StreamPush) GetRtmp() string {
	if x != nil {
		return x.Rtmp
	}
	return ""
}

func (x *StreamPush) GetWebRtc() string {
	if x != nil {
		return x.WebRtc
	}
	return ""
}

func (x *StreamPush) GetSrt() string {
	if x != nil {
		return x.Srt
	}
	return ""
}

func (x *StreamPush) GetRmtpOverSrt() string {
	if x != nil {
		return x.RmtpOverSrt
	}
	return ""
}

// 流信息
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pull *StreamPull `protobuf:"bytes,1,opt,name=pull,proto3" json:"pull,omitempty"` // 推流信息
	Push *StreamPush `protobuf:"bytes,2,opt,name=push,proto3" json:"push,omitempty"` // 推流信息
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{2}
}

func (x *Stream) GetPull() *StreamPull {
	if x != nil {
		return x.Pull
	}
	return nil
}

func (x *Stream) GetPush() *StreamPush {
	if x != nil {
		return x.Push
	}
	return nil
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId            string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                                                  // id
	DisplayId         string                 `protobuf:"bytes,2,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`                                                         // 显示id
	StreamerId        string                 `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`                                                      // 主播id
	CategoryId        string                 `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                                                      // 分类id
	Title             string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                                                  // 标题
	Intro             string                 `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`                                                                                  // 简介
	Cover             string                 `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`                                                                                  // 封面
	Video             string                 `protobuf:"bytes,8,opt,name=video,proto3" json:"video,omitempty"`                                                                                  // 视频
	ForbidExpire      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=forbid_expire,json=forbidExpire,proto3" json:"forbid_expire,omitempty"`                                                // 封禁到期时间
	ForbidReason      string                 `protobuf:"bytes,10,opt,name=forbid_reason,json=forbidReason,proto3" json:"forbid_reason,omitempty"`                                               // 封禁原因
	Hidden            bool                   `protobuf:"varint,11,opt,name=hidden,proto3" json:"hidden,omitempty"`                                                                              // 是否隐藏
	Merchants         []string               `protobuf:"bytes,12,rep,name=merchants,proto3" json:"merchants,omitempty"`                                                                         // 商户id
	BindTags          []string               `protobuf:"bytes,13,rep,name=bind_tags,json=bindTags,proto3" json:"bind_tags,omitempty"`                                                           // 标签
	LiveId            string                 `protobuf:"bytes,21,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`                                                                 // 直播id（开播状态时才会有，关播时清空）
	LiveRegion        int32                  `protobuf:"varint,22,opt,name=live_region,json=liveRegion,proto3" json:"live_region,omitempty"`                                                    // 直播区域（开播状态时才会有，关播时清空）
	LiveStatus        LiveStatus             `protobuf:"varint,23,opt,name=live_status,json=liveStatus,proto3,enum=svc.biz.room.LiveStatus" json:"live_status,omitempty"`                       // 房间状态：1关播，2开播
	LiveDisplayType   LiveDisplayType        `protobuf:"varint,24,opt,name=live_display_type,json=liveDisplayType,proto3,enum=svc.biz.room.LiveDisplayType" json:"live_display_type,omitempty"` // 横竖屏类型（开播状态时才会有，关播时清空）
	LiveStartAt       *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=live_start_at,json=liveStartAt,proto3" json:"live_start_at,omitempty"`                                                // 开播时间（开播状态时才会有，关播时清空）
	ScoreRecommend    int32                  `protobuf:"varint,41,opt,name=score_recommend,json=scoreRecommend,proto3" json:"score_recommend,omitempty"`                                        // 推荐分数（后台配置）
	ScoreSearch       int32                  `protobuf:"varint,42,opt,name=score_search,json=scoreSearch,proto3" json:"score_search,omitempty"`                                                 // 搜索分数（后台配置）
	ScoreSubscribe    int32                  `protobuf:"varint,43,opt,name=score_subscribe,json=scoreSubscribe,proto3" json:"score_subscribe,omitempty"`                                        // 关注分数（后台配置）
	ScoreHot          int32                  `protobuf:"varint,44,opt,name=score_hot,json=scoreHot,proto3" json:"score_hot,omitempty"`                                                          // 热度分数（后台配置）
	ScoreGlamour      int32                  `protobuf:"varint,45,opt,name=score_glamour,json=scoreGlamour,proto3" json:"score_glamour,omitempty"`                                              // 魅力值
	ScoreOnline       int32                  `protobuf:"varint,46,opt,name=score_online,json=scoreOnline,proto3" json:"score_online,omitempty"`                                                 // 在线人数
	ScoreSelectedGift int32                  `protobuf:"varint,47,opt,name=score_selected_gift,json=scoreSelectedGift,proto3" json:"score_selected_gift,omitempty"`                             // 精选礼物最后赠送时间戳
	ScoreGift         int32                  `protobuf:"varint,48,opt,name=score_gift,json=scoreGift,proto3" json:"score_gift,omitempty"`                                                       // 纯礼物收益
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                       // 创建时间
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                       // 更新时间
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{3}
}

func (x *RoomInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomInfo) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *RoomInfo) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *RoomInfo) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *RoomInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RoomInfo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *RoomInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *RoomInfo) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *RoomInfo) GetForbidExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.ForbidExpire
	}
	return nil
}

func (x *RoomInfo) GetForbidReason() string {
	if x != nil {
		return x.ForbidReason
	}
	return ""
}

func (x *RoomInfo) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RoomInfo) GetMerchants() []string {
	if x != nil {
		return x.Merchants
	}
	return nil
}

func (x *RoomInfo) GetBindTags() []string {
	if x != nil {
		return x.BindTags
	}
	return nil
}

func (x *RoomInfo) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *RoomInfo) GetLiveRegion() int32 {
	if x != nil {
		return x.LiveRegion
	}
	return 0
}

func (x *RoomInfo) GetLiveStatus() LiveStatus {
	if x != nil {
		return x.LiveStatus
	}
	return LiveStatus_LiveStatusUnknown
}

func (x *RoomInfo) GetLiveDisplayType() LiveDisplayType {
	if x != nil {
		return x.LiveDisplayType
	}
	return LiveDisplayType_LiveDisplayTypeUnknown
}

func (x *RoomInfo) GetLiveStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LiveStartAt
	}
	return nil
}

func (x *RoomInfo) GetScoreRecommend() int32 {
	if x != nil {
		return x.ScoreRecommend
	}
	return 0
}

func (x *RoomInfo) GetScoreSearch() int32 {
	if x != nil {
		return x.ScoreSearch
	}
	return 0
}

func (x *RoomInfo) GetScoreSubscribe() int32 {
	if x != nil {
		return x.ScoreSubscribe
	}
	return 0
}

func (x *RoomInfo) GetScoreHot() int32 {
	if x != nil {
		return x.ScoreHot
	}
	return 0
}

func (x *RoomInfo) GetScoreGlamour() int32 {
	if x != nil {
		return x.ScoreGlamour
	}
	return 0
}

func (x *RoomInfo) GetScoreOnline() int32 {
	if x != nil {
		return x.ScoreOnline
	}
	return 0
}

func (x *RoomInfo) GetScoreSelectedGift() int32 {
	if x != nil {
		return x.ScoreSelectedGift
	}
	return 0
}

func (x *RoomInfo) GetScoreGift() int32 {
	if x != nil {
		return x.ScoreGift
	}
	return 0
}

func (x *RoomInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RoomInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *RoomInfo `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"` // 房间信息
}

func (x *CreateRoomReq) Reset() {
	*x = CreateRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomReq) ProtoMessage() {}

func (x *CreateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomReq.ProtoReflect.Descriptor instead.
func (*CreateRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRoomReq) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

type CreateRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *RoomInfo `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"` // 房间信息
}

func (x *CreateRoomResp) Reset() {
	*x = CreateRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomResp) ProtoMessage() {}

func (x *CreateRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomResp.ProtoReflect.Descriptor instead.
func (*CreateRoomResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRoomResp) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

type UpdateRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // id
	Room       *RoomInfo              `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`                   // 房间信息
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRoomReq) Reset() {
	*x = UpdateRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomReq) ProtoMessage() {}

func (x *UpdateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomReq.ProtoReflect.Descriptor instead.
func (*UpdateRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRoomReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UpdateRoomReq) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *UpdateRoomReq) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`              // id
	WithStream bool   `protobuf:"varint,2,opt,name=with_stream,json=withStream,proto3" json:"with_stream,omitempty"` // 是否带流信息
}

func (x *GetRoomReq) Reset() {
	*x = GetRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomReq) ProtoMessage() {}

func (x *GetRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomReq.ProtoReflect.Descriptor instead.
func (*GetRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{7}
}

func (x *GetRoomReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetRoomReq) GetWithStream() bool {
	if x != nil {
		return x.WithStream
	}
	return false
}

type GetRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room   *RoomInfo `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`     // 房间信息
	Stream *Stream   `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"` // 流信息
}

func (x *GetRoomResp) Reset() {
	*x = GetRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomResp) ProtoMessage() {}

func (x *GetRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomResp.ProtoReflect.Descriptor instead.
func (*GetRoomResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{8}
}

func (x *GetRoomResp) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetRoomResp) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type GetRoomByStreamerIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`  // 主播id
	WithStream bool   `protobuf:"varint,2,opt,name=with_stream,json=withStream,proto3" json:"with_stream,omitempty"` // 是否带流信息
}

func (x *GetRoomByStreamerIDReq) Reset() {
	*x = GetRoomByStreamerIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomByStreamerIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomByStreamerIDReq) ProtoMessage() {}

func (x *GetRoomByStreamerIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomByStreamerIDReq.ProtoReflect.Descriptor instead.
func (*GetRoomByStreamerIDReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{9}
}

func (x *GetRoomByStreamerIDReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *GetRoomByStreamerIDReq) GetWithStream() bool {
	if x != nil {
		return x.WithStream
	}
	return false
}

type GetRoomByStreamerIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room   *RoomInfo `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`     // 房间信息
	Stream *Stream   `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"` // 流信息
}

func (x *GetRoomByStreamerIDResp) Reset() {
	*x = GetRoomByStreamerIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomByStreamerIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomByStreamerIDResp) ProtoMessage() {}

func (x *GetRoomByStreamerIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomByStreamerIDResp.ProtoReflect.Descriptor instead.
func (*GetRoomByStreamerIDResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{10}
}

func (x *GetRoomByStreamerIDResp) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetRoomByStreamerIDResp) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type MGetRoomsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomIds []string `protobuf:"bytes,1,rep,name=room_ids,json=roomIds,proto3" json:"room_ids,omitempty"` // id
}

func (x *MGetRoomsReq) Reset() {
	*x = MGetRoomsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRoomsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRoomsReq) ProtoMessage() {}

func (x *MGetRoomsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRoomsReq.ProtoReflect.Descriptor instead.
func (*MGetRoomsReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{11}
}

func (x *MGetRoomsReq) GetRoomIds() []string {
	if x != nil {
		return x.RoomIds
	}
	return nil
}

type MGetRoomsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*RoomInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 房间信息 map room_id -> room
}

func (x *MGetRoomsResp) Reset() {
	*x = MGetRoomsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRoomsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRoomsResp) ProtoMessage() {}

func (x *MGetRoomsResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRoomsResp.ProtoReflect.Descriptor instead.
func (*MGetRoomsResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{12}
}

func (x *MGetRoomsResp) GetItems() map[string]*RoomInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type MGetRoomsByStreamerIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerIds []string `protobuf:"bytes,1,rep,name=streamer_ids,json=streamerIds,proto3" json:"streamer_ids,omitempty"` // 主播id
}

func (x *MGetRoomsByStreamerIDsReq) Reset() {
	*x = MGetRoomsByStreamerIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRoomsByStreamerIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRoomsByStreamerIDsReq) ProtoMessage() {}

func (x *MGetRoomsByStreamerIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRoomsByStreamerIDsReq.ProtoReflect.Descriptor instead.
func (*MGetRoomsByStreamerIDsReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{13}
}

func (x *MGetRoomsByStreamerIDsReq) GetStreamerIds() []string {
	if x != nil {
		return x.StreamerIds
	}
	return nil
}

type MGetRoomsByStreamerIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*RoomInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 房间信息 map streamer_id -> room
}

func (x *MGetRoomsByStreamerIDsResp) Reset() {
	*x = MGetRoomsByStreamerIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRoomsByStreamerIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRoomsByStreamerIDsResp) ProtoMessage() {}

func (x *MGetRoomsByStreamerIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRoomsByStreamerIDsResp.ProtoReflect.Descriptor instead.
func (*MGetRoomsByStreamerIDsResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{14}
}

func (x *MGetRoomsByStreamerIDsResp) GetItems() map[string]*RoomInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetRoomListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                              // 页数
	Limit      int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                            // 条数
	StreamerId string `protobuf:"bytes,3,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"` // 主播id
}

func (x *GetRoomListReq) Reset() {
	*x = GetRoomListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomListReq) ProtoMessage() {}

func (x *GetRoomListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomListReq.ProtoReflect.Descriptor instead.
func (*GetRoomListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{15}
}

func (x *GetRoomListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRoomListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRoomListReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type GetRoomListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // 房间列表
}

func (x *GetRoomListResp) Reset() {
	*x = GetRoomListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomListResp) ProtoMessage() {}

func (x *GetRoomListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomListResp.ProtoReflect.Descriptor instead.
func (*GetRoomListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{16}
}

func (x *GetRoomListResp) GetItems() []*RoomInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetOnlineRoomListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                                    // 页数
	Limit      int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                                  // 条数（建议固定20）
	SortType   SortType `protobuf:"varint,3,opt,name=sort_type,json=sortType,proto3,enum=svc.biz.room.SortType" json:"sort_type,omitempty"` // 排序类型
	CategoryId string   `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                       // 分类id
	BindTags   []string `protobuf:"bytes,5,rep,name=bind_tags,json=bindTags,proto3" json:"bind_tags,omitempty"`                             // 标签
	Merchants  []string `protobuf:"bytes,6,rep,name=merchants,proto3" json:"merchants,omitempty"`                                           // 商户id
}

func (x *GetOnlineRoomListReq) Reset() {
	*x = GetOnlineRoomListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineRoomListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineRoomListReq) ProtoMessage() {}

func (x *GetOnlineRoomListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineRoomListReq.ProtoReflect.Descriptor instead.
func (*GetOnlineRoomListReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{17}
}

func (x *GetOnlineRoomListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOnlineRoomListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOnlineRoomListReq) GetSortType() SortType {
	if x != nil {
		return x.SortType
	}
	return SortType_SortTypeUnknown
}

func (x *GetOnlineRoomListReq) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *GetOnlineRoomListReq) GetBindTags() []string {
	if x != nil {
		return x.BindTags
	}
	return nil
}

func (x *GetOnlineRoomListReq) GetMerchants() []string {
	if x != nil {
		return x.Merchants
	}
	return nil
}

type GetOnlineRoomListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // 房间列表
}

func (x *GetOnlineRoomListResp) Reset() {
	*x = GetOnlineRoomListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineRoomListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineRoomListResp) ProtoMessage() {}

func (x *GetOnlineRoomListResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineRoomListResp.ProtoReflect.Descriptor instead.
func (*GetOnlineRoomListResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{18}
}

func (x *GetOnlineRoomListResp) GetItems() []*RoomInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ForbidRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId   string                 `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`       // 主播id
	ForbidExpire *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=forbid_expire,json=forbidExpire,proto3" json:"forbid_expire,omitempty"` // 封禁过期时间
	Reason       string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                                 // 封禁原因
}

func (x *ForbidRoomReq) Reset() {
	*x = ForbidRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidRoomReq) ProtoMessage() {}

func (x *ForbidRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidRoomReq.ProtoReflect.Descriptor instead.
func (*ForbidRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{19}
}

func (x *ForbidRoomReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *ForbidRoomReq) GetForbidExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.ForbidExpire
	}
	return nil
}

func (x *ForbidRoomReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ForbidRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForbidRoomResp) Reset() {
	*x = ForbidRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidRoomResp) ProtoMessage() {}

func (x *ForbidRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidRoomResp.ProtoReflect.Descriptor instead.
func (*ForbidRoomResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{20}
}

type ResumeRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"` // 主播id
}

func (x *ResumeRoomReq) Reset() {
	*x = ResumeRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRoomReq) ProtoMessage() {}

func (x *ResumeRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRoomReq.ProtoReflect.Descriptor instead.
func (*ResumeRoomReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{21}
}

func (x *ResumeRoomReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type ResumeRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeRoomResp) Reset() {
	*x = ResumeRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRoomResp) ProtoMessage() {}

func (x *ResumeRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRoomResp.ProtoReflect.Descriptor instead.
func (*ResumeRoomResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{22}
}

type StartLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId  string          `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"`                                       // 主播id
	DisplayType LiveDisplayType `protobuf:"varint,2,opt,name=display_type,json=displayType,proto3,enum=svc.biz.room.LiveDisplayType" json:"display_type,omitempty"` // 横竖屏类型
}

func (x *StartLiveReq) Reset() {
	*x = StartLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLiveReq) ProtoMessage() {}

func (x *StartLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLiveReq.ProtoReflect.Descriptor instead.
func (*StartLiveReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{23}
}

func (x *StartLiveReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *StartLiveReq) GetDisplayType() LiveDisplayType {
	if x != nil {
		return x.DisplayType
	}
	return LiveDisplayType_LiveDisplayTypeUnknown
}

type StartLiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room   *RoomInfo `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`     // 房间信息
	Stream *Stream   `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"` // 流信息
}

func (x *StartLiveResp) Reset() {
	*x = StartLiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLiveResp) ProtoMessage() {}

func (x *StartLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLiveResp.ProtoReflect.Descriptor instead.
func (*StartLiveResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{24}
}

func (x *StartLiveResp) GetRoom() *RoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *StartLiveResp) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type StopLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamerId string `protobuf:"bytes,1,opt,name=streamer_id,json=streamerId,proto3" json:"streamer_id,omitempty"` // 主播id
}

func (x *StopLiveReq) Reset() {
	*x = StopLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLiveReq) ProtoMessage() {}

func (x *StopLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLiveReq.ProtoReflect.Descriptor instead.
func (*StopLiveReq) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{25}
}

func (x *StopLiveReq) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

type StopLiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopLiveResp) Reset() {
	*x = StopLiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_biz_room_room_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLiveResp) ProtoMessage() {}

func (x *StopLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_svc_biz_room_room_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLiveResp.ProtoReflect.Descriptor instead.
func (*StopLiveResp) Descriptor() ([]byte, []int) {
	return file_svc_biz_room_room_proto_rawDescGZIP(), []int{26}
}

var File_svc_biz_room_room_proto protoreflect.FileDescriptor

var file_svc_biz_room_room_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6c, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x6c, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x33, 0x75, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x33, 0x75, 0x38, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x64,
	0x70, 0x22, 0x6f, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x74, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x74, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x52, 0x74, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x6d, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6d, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x53,
	0x72, 0x74, 0x22, 0x64, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x04,
	0x70, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x75,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x22, 0xb4, 0x08, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x68,
	0x6f, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x48,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6c, 0x61, 0x6d,
	0x6f, 0x75, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x47, 0x6c, 0x61, 0x6d, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x3c, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x46,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x67, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22,
	0x5a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x73, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0x29, 0x0a, 0x0c, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a,
	0x19, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x1a, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x10,
	0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x30, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x71, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x2e, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x2a, 0x88, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x69, 0x0a,
	0x0f, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x32, 0xae, 0x07, 0x0a, 0x04, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x12, 0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x4d, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x47, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1b,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x15, 0x5a, 0x13, 0x2e,
	0x2f, 0x73, 0x76, 0x63, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x3b, 0x72, 0x6f,
	0x6f, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_biz_room_room_proto_rawDescOnce sync.Once
	file_svc_biz_room_room_proto_rawDescData = file_svc_biz_room_room_proto_rawDesc
)

func file_svc_biz_room_room_proto_rawDescGZIP() []byte {
	file_svc_biz_room_room_proto_rawDescOnce.Do(func() {
		file_svc_biz_room_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_biz_room_room_proto_rawDescData)
	})
	return file_svc_biz_room_room_proto_rawDescData
}

var file_svc_biz_room_room_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_svc_biz_room_room_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_svc_biz_room_room_proto_goTypes = []interface{}{
	(SortType)(0),                      // 0: svc.biz.room.SortType
	(LiveDisplayType)(0),               // 1: svc.biz.room.LiveDisplayType
	(LiveStatus)(0),                    // 2: svc.biz.room.LiveStatus
	(*StreamPull)(nil),                 // 3: svc.biz.room.StreamPull
	(*StreamPush)(nil),                 // 4: svc.biz.room.StreamPush
	(*Stream)(nil),                     // 5: svc.biz.room.Stream
	(*RoomInfo)(nil),                   // 6: svc.biz.room.RoomInfo
	(*CreateRoomReq)(nil),              // 7: svc.biz.room.CreateRoomReq
	(*CreateRoomResp)(nil),             // 8: svc.biz.room.CreateRoomResp
	(*UpdateRoomReq)(nil),              // 9: svc.biz.room.UpdateRoomReq
	(*GetRoomReq)(nil),                 // 10: svc.biz.room.GetRoomReq
	(*GetRoomResp)(nil),                // 11: svc.biz.room.GetRoomResp
	(*GetRoomByStreamerIDReq)(nil),     // 12: svc.biz.room.GetRoomByStreamerIDReq
	(*GetRoomByStreamerIDResp)(nil),    // 13: svc.biz.room.GetRoomByStreamerIDResp
	(*MGetRoomsReq)(nil),               // 14: svc.biz.room.MGetRoomsReq
	(*MGetRoomsResp)(nil),              // 15: svc.biz.room.MGetRoomsResp
	(*MGetRoomsByStreamerIDsReq)(nil),  // 16: svc.biz.room.MGetRoomsByStreamerIDsReq
	(*MGetRoomsByStreamerIDsResp)(nil), // 17: svc.biz.room.MGetRoomsByStreamerIDsResp
	(*GetRoomListReq)(nil),             // 18: svc.biz.room.GetRoomListReq
	(*GetRoomListResp)(nil),            // 19: svc.biz.room.GetRoomListResp
	(*GetOnlineRoomListReq)(nil),       // 20: svc.biz.room.GetOnlineRoomListReq
	(*GetOnlineRoomListResp)(nil),      // 21: svc.biz.room.GetOnlineRoomListResp
	(*ForbidRoomReq)(nil),              // 22: svc.biz.room.ForbidRoomReq
	(*ForbidRoomResp)(nil),             // 23: svc.biz.room.ForbidRoomResp
	(*ResumeRoomReq)(nil),              // 24: svc.biz.room.ResumeRoomReq
	(*ResumeRoomResp)(nil),             // 25: svc.biz.room.ResumeRoomResp
	(*StartLiveReq)(nil),               // 26: svc.biz.room.StartLiveReq
	(*StartLiveResp)(nil),              // 27: svc.biz.room.StartLiveResp
	(*StopLiveReq)(nil),                // 28: svc.biz.room.StopLiveReq
	(*StopLiveResp)(nil),               // 29: svc.biz.room.StopLiveResp
	nil,                                // 30: svc.biz.room.MGetRoomsResp.ItemsEntry
	nil,                                // 31: svc.biz.room.MGetRoomsByStreamerIDsResp.ItemsEntry
	(*timestamppb.Timestamp)(nil),      // 32: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),      // 33: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),              // 34: google.protobuf.Empty
}
var file_svc_biz_room_room_proto_depIdxs = []int32{
	3,  // 0: svc.biz.room.Stream.pull:type_name -> svc.biz.room.StreamPull
	4,  // 1: svc.biz.room.Stream.push:type_name -> svc.biz.room.StreamPush
	32, // 2: svc.biz.room.RoomInfo.forbid_expire:type_name -> google.protobuf.Timestamp
	2,  // 3: svc.biz.room.RoomInfo.live_status:type_name -> svc.biz.room.LiveStatus
	1,  // 4: svc.biz.room.RoomInfo.live_display_type:type_name -> svc.biz.room.LiveDisplayType
	32, // 5: svc.biz.room.RoomInfo.live_start_at:type_name -> google.protobuf.Timestamp
	32, // 6: svc.biz.room.RoomInfo.created_at:type_name -> google.protobuf.Timestamp
	32, // 7: svc.biz.room.RoomInfo.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 8: svc.biz.room.CreateRoomReq.room:type_name -> svc.biz.room.RoomInfo
	6,  // 9: svc.biz.room.CreateRoomResp.room:type_name -> svc.biz.room.RoomInfo
	6,  // 10: svc.biz.room.UpdateRoomReq.room:type_name -> svc.biz.room.RoomInfo
	33, // 11: svc.biz.room.UpdateRoomReq.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 12: svc.biz.room.GetRoomResp.room:type_name -> svc.biz.room.RoomInfo
	5,  // 13: svc.biz.room.GetRoomResp.stream:type_name -> svc.biz.room.Stream
	6,  // 14: svc.biz.room.GetRoomByStreamerIDResp.room:type_name -> svc.biz.room.RoomInfo
	5,  // 15: svc.biz.room.GetRoomByStreamerIDResp.stream:type_name -> svc.biz.room.Stream
	30, // 16: svc.biz.room.MGetRoomsResp.items:type_name -> svc.biz.room.MGetRoomsResp.ItemsEntry
	31, // 17: svc.biz.room.MGetRoomsByStreamerIDsResp.items:type_name -> svc.biz.room.MGetRoomsByStreamerIDsResp.ItemsEntry
	6,  // 18: svc.biz.room.GetRoomListResp.items:type_name -> svc.biz.room.RoomInfo
	0,  // 19: svc.biz.room.GetOnlineRoomListReq.sort_type:type_name -> svc.biz.room.SortType
	6,  // 20: svc.biz.room.GetOnlineRoomListResp.items:type_name -> svc.biz.room.RoomInfo
	32, // 21: svc.biz.room.ForbidRoomReq.forbid_expire:type_name -> google.protobuf.Timestamp
	1,  // 22: svc.biz.room.StartLiveReq.display_type:type_name -> svc.biz.room.LiveDisplayType
	6,  // 23: svc.biz.room.StartLiveResp.room:type_name -> svc.biz.room.RoomInfo
	5,  // 24: svc.biz.room.StartLiveResp.stream:type_name -> svc.biz.room.Stream
	6,  // 25: svc.biz.room.MGetRoomsResp.ItemsEntry.value:type_name -> svc.biz.room.RoomInfo
	6,  // 26: svc.biz.room.MGetRoomsByStreamerIDsResp.ItemsEntry.value:type_name -> svc.biz.room.RoomInfo
	7,  // 27: svc.biz.room.Room.CreateRoom:input_type -> svc.biz.room.CreateRoomReq
	9,  // 28: svc.biz.room.Room.UpdateRoom:input_type -> svc.biz.room.UpdateRoomReq
	10, // 29: svc.biz.room.Room.GetRoom:input_type -> svc.biz.room.GetRoomReq
	12, // 30: svc.biz.room.Room.GetRoomByStreamerID:input_type -> svc.biz.room.GetRoomByStreamerIDReq
	14, // 31: svc.biz.room.Room.MGetRooms:input_type -> svc.biz.room.MGetRoomsReq
	16, // 32: svc.biz.room.Room.MGetRoomsByStreamerIDs:input_type -> svc.biz.room.MGetRoomsByStreamerIDsReq
	18, // 33: svc.biz.room.Room.GetRoomList:input_type -> svc.biz.room.GetRoomListReq
	20, // 34: svc.biz.room.Room.GetOnlineRoomList:input_type -> svc.biz.room.GetOnlineRoomListReq
	22, // 35: svc.biz.room.Room.ForbidRoom:input_type -> svc.biz.room.ForbidRoomReq
	24, // 36: svc.biz.room.Room.ResumeRoom:input_type -> svc.biz.room.ResumeRoomReq
	26, // 37: svc.biz.room.Room.StartLive:input_type -> svc.biz.room.StartLiveReq
	28, // 38: svc.biz.room.Room.StopLive:input_type -> svc.biz.room.StopLiveReq
	8,  // 39: svc.biz.room.Room.CreateRoom:output_type -> svc.biz.room.CreateRoomResp
	34, // 40: svc.biz.room.Room.UpdateRoom:output_type -> google.protobuf.Empty
	11, // 41: svc.biz.room.Room.GetRoom:output_type -> svc.biz.room.GetRoomResp
	13, // 42: svc.biz.room.Room.GetRoomByStreamerID:output_type -> svc.biz.room.GetRoomByStreamerIDResp
	15, // 43: svc.biz.room.Room.MGetRooms:output_type -> svc.biz.room.MGetRoomsResp
	17, // 44: svc.biz.room.Room.MGetRoomsByStreamerIDs:output_type -> svc.biz.room.MGetRoomsByStreamerIDsResp
	19, // 45: svc.biz.room.Room.GetRoomList:output_type -> svc.biz.room.GetRoomListResp
	21, // 46: svc.biz.room.Room.GetOnlineRoomList:output_type -> svc.biz.room.GetOnlineRoomListResp
	23, // 47: svc.biz.room.Room.ForbidRoom:output_type -> svc.biz.room.ForbidRoomResp
	25, // 48: svc.biz.room.Room.ResumeRoom:output_type -> svc.biz.room.ResumeRoomResp
	27, // 49: svc.biz.room.Room.StartLive:output_type -> svc.biz.room.StartLiveResp
	29, // 50: svc.biz.room.Room.StopLive:output_type -> svc.biz.room.StopLiveResp
	39, // [39:51] is the sub-list for method output_type
	27, // [27:39] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_svc_biz_room_room_proto_init() }
func file_svc_biz_room_room_proto_init() {
	if File_svc_biz_room_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_biz_room_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomByStreamerIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomByStreamerIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRoomsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRoomsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRoomsByStreamerIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRoomsByStreamerIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnlineRoomListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnlineRoomListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbidRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbidRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_biz_room_room_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_biz_room_room_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_biz_room_room_proto_goTypes,
		DependencyIndexes: file_svc_biz_room_room_proto_depIdxs,
		EnumInfos:         file_svc_biz_room_room_proto_enumTypes,
		MessageInfos:      file_svc_biz_room_room_proto_msgTypes,
	}.Build()
	File_svc_biz_room_room_proto = out.File
	file_svc_biz_room_room_proto_rawDesc = nil
	file_svc_biz_room_room_proto_goTypes = nil
	file_svc_biz_room_room_proto_depIdxs = nil
}
