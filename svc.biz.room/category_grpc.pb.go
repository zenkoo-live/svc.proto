// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: svc.biz.room/category.proto

package room

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Category_GetCategory_FullMethodName      = "/svc.biz.room.Category/GetCategory"
	Category_MGetCategory_FullMethodName     = "/svc.biz.room.Category/MGetCategory"
	Category_CreateCategory_FullMethodName   = "/svc.biz.room.Category/CreateCategory"
	Category_UpdateCategory_FullMethodName   = "/svc.biz.room.Category/UpdateCategory"
	Category_DeleteCategory_FullMethodName   = "/svc.biz.room.Category/DeleteCategory"
	Category_ListCategory_FullMethodName     = "/svc.biz.room.Category/ListCategory"
	Category_ListCategoryTree_FullMethodName = "/svc.biz.room.Category/ListCategoryTree"
)

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryClient interface {
	// 获取分类
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error)
	// 获取分类
	MGetCategory(ctx context.Context, in *MGetCategoryReq, opts ...grpc.CallOption) (*MGetCategoryResp, error)
	// 创建分类
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error)
	// 更新某个分类信息
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除一个分类信息
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取分类，返回子级集合
	ListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
	// 获取全部板块分类（分类及子分类树结构）
	ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, opts ...grpc.CallOption) (*ListCategoryTreeResp, error)
}

type categoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryClient(cc grpc.ClientConnInterface) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error) {
	out := new(GetCategoryResp)
	err := c.cc.Invoke(ctx, Category_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) MGetCategory(ctx context.Context, in *MGetCategoryReq, opts ...grpc.CallOption) (*MGetCategoryResp, error) {
	out := new(MGetCategoryResp)
	err := c.cc.Invoke(ctx, Category_MGetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error) {
	out := new(CreateCategoryResp)
	err := c.cc.Invoke(ctx, Category_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Category_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Category_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) ListCategory(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	out := new(ListCategoryResp)
	err := c.cc.Invoke(ctx, Category_ListCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) ListCategoryTree(ctx context.Context, in *ListCategoryTreeReq, opts ...grpc.CallOption) (*ListCategoryTreeResp, error) {
	out := new(ListCategoryTreeResp)
	err := c.cc.Invoke(ctx, Category_ListCategoryTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
// All implementations must embed UnimplementedCategoryServer
// for forward compatibility
type CategoryServer interface {
	// 获取分类
	GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error)
	// 获取分类
	MGetCategory(context.Context, *MGetCategoryReq) (*MGetCategoryResp, error)
	// 创建分类
	CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryResp, error)
	// 更新某个分类信息
	UpdateCategory(context.Context, *UpdateCategoryReq) (*emptypb.Empty, error)
	// 删除一个分类信息
	DeleteCategory(context.Context, *DeleteCategoryReq) (*emptypb.Empty, error)
	// 获取分类，返回子级集合
	ListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error)
	// 获取全部板块分类（分类及子分类树结构）
	ListCategoryTree(context.Context, *ListCategoryTreeReq) (*ListCategoryTreeResp, error)
	mustEmbedUnimplementedCategoryServer()
}

// UnimplementedCategoryServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServer struct {
}

func (UnimplementedCategoryServer) GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCategoryServer) MGetCategory(context.Context, *MGetCategoryReq) (*MGetCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetCategory not implemented")
}
func (UnimplementedCategoryServer) CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategoryServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoryServer) ListCategory(context.Context, *ListCategoryReq) (*ListCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedCategoryServer) ListCategoryTree(context.Context, *ListCategoryTreeReq) (*ListCategoryTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryTree not implemented")
}
func (UnimplementedCategoryServer) mustEmbedUnimplementedCategoryServer() {}

// UnsafeCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServer will
// result in compilation errors.
type UnsafeCategoryServer interface {
	mustEmbedUnimplementedCategoryServer()
}

func RegisterCategoryServer(s grpc.ServiceRegistrar, srv CategoryServer) {
	s.RegisterService(&Category_ServiceDesc, srv)
}

func _Category_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategory(ctx, req.(*GetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_MGetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).MGetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_MGetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).MGetCategory(ctx, req.(*MGetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CreateCategory(ctx, req.(*CreateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_ListCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).ListCategory(ctx, req.(*ListCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_ListCategoryTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).ListCategoryTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_ListCategoryTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).ListCategoryTree(ctx, req.(*ListCategoryTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Category_ServiceDesc is the grpc.ServiceDesc for Category service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Category_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.biz.room.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategory",
			Handler:    _Category_GetCategory_Handler,
		},
		{
			MethodName: "MGetCategory",
			Handler:    _Category_MGetCategory_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Category_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Category_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Category_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _Category_ListCategory_Handler,
		},
		{
			MethodName: "ListCategoryTree",
			Handler:    _Category_ListCategoryTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.biz.room/category.proto",
}
