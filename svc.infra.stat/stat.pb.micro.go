// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: svc.infra.stat/stat.proto

package stat

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LinkStat service

func NewLinkStatEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LinkStat service

type LinkStatService interface {
	// 获取在线连接数
	OnlineSessionCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error)
	// 获取在线账号数
	OnlineAccountCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error)
	// 获取在线设备数
	OnlineDeviceCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error)
	// 获取在线连接列表
	OnlineSessionList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineSessionListResponse, error)
	// 获取在线账号列表
	OnlineAccountList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineAccountListResponse, error)
	// 获取在线设备列表
	OnlineDeviceList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineDeviceListResponse, error)
	// 检查连接是否在线
	CheckSession(ctx context.Context, in *CheckSessionRequest, opts ...client.CallOption) (*CheckSessionResponse, error)
	// 检查账号是否在线
	CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...client.CallOption) (*CheckAccountResponse, error)
	// 检查设备是否在线
	CheckDevice(ctx context.Context, in *CheckDeviceRequest, opts ...client.CallOption) (*CheckDeviceResponse, error)
	// 刷新统计
	Refresh(ctx context.Context, in *RefreshStatRequest, opts ...client.CallOption) (*RefreshStatResponse, error)
}

type linkStatService struct {
	c    client.Client
	name string
}

func NewLinkStatService(name string, c client.Client) LinkStatService {
	return &linkStatService{
		c:    c,
		name: name,
	}
}

func (c *linkStatService) OnlineSessionCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineSessionCount", in)
	out := new(OnlineCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) OnlineAccountCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineAccountCount", in)
	out := new(OnlineCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) OnlineDeviceCount(ctx context.Context, in *OnlineCountRequest, opts ...client.CallOption) (*OnlineCountResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineDeviceCount", in)
	out := new(OnlineCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) OnlineSessionList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineSessionListResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineSessionList", in)
	out := new(OnlineSessionListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) OnlineAccountList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineAccountListResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineAccountList", in)
	out := new(OnlineAccountListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) OnlineDeviceList(ctx context.Context, in *OnlineListRequest, opts ...client.CallOption) (*OnlineDeviceListResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.OnlineDeviceList", in)
	out := new(OnlineDeviceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) CheckSession(ctx context.Context, in *CheckSessionRequest, opts ...client.CallOption) (*CheckSessionResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.CheckSession", in)
	out := new(CheckSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...client.CallOption) (*CheckAccountResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.CheckAccount", in)
	out := new(CheckAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) CheckDevice(ctx context.Context, in *CheckDeviceRequest, opts ...client.CallOption) (*CheckDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.CheckDevice", in)
	out := new(CheckDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStatService) Refresh(ctx context.Context, in *RefreshStatRequest, opts ...client.CallOption) (*RefreshStatResponse, error) {
	req := c.c.NewRequest(c.name, "LinkStat.Refresh", in)
	out := new(RefreshStatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LinkStat service

type LinkStatHandler interface {
	// 获取在线连接数
	OnlineSessionCount(context.Context, *OnlineCountRequest, *OnlineCountResponse) error
	// 获取在线账号数
	OnlineAccountCount(context.Context, *OnlineCountRequest, *OnlineCountResponse) error
	// 获取在线设备数
	OnlineDeviceCount(context.Context, *OnlineCountRequest, *OnlineCountResponse) error
	// 获取在线连接列表
	OnlineSessionList(context.Context, *OnlineListRequest, *OnlineSessionListResponse) error
	// 获取在线账号列表
	OnlineAccountList(context.Context, *OnlineListRequest, *OnlineAccountListResponse) error
	// 获取在线设备列表
	OnlineDeviceList(context.Context, *OnlineListRequest, *OnlineDeviceListResponse) error
	// 检查连接是否在线
	CheckSession(context.Context, *CheckSessionRequest, *CheckSessionResponse) error
	// 检查账号是否在线
	CheckAccount(context.Context, *CheckAccountRequest, *CheckAccountResponse) error
	// 检查设备是否在线
	CheckDevice(context.Context, *CheckDeviceRequest, *CheckDeviceResponse) error
	// 刷新统计
	Refresh(context.Context, *RefreshStatRequest, *RefreshStatResponse) error
}

func RegisterLinkStatHandler(s server.Server, hdlr LinkStatHandler, opts ...server.HandlerOption) error {
	type linkStat interface {
		OnlineSessionCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error
		OnlineAccountCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error
		OnlineDeviceCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error
		OnlineSessionList(ctx context.Context, in *OnlineListRequest, out *OnlineSessionListResponse) error
		OnlineAccountList(ctx context.Context, in *OnlineListRequest, out *OnlineAccountListResponse) error
		OnlineDeviceList(ctx context.Context, in *OnlineListRequest, out *OnlineDeviceListResponse) error
		CheckSession(ctx context.Context, in *CheckSessionRequest, out *CheckSessionResponse) error
		CheckAccount(ctx context.Context, in *CheckAccountRequest, out *CheckAccountResponse) error
		CheckDevice(ctx context.Context, in *CheckDeviceRequest, out *CheckDeviceResponse) error
		Refresh(ctx context.Context, in *RefreshStatRequest, out *RefreshStatResponse) error
	}
	type LinkStat struct {
		linkStat
	}
	h := &linkStatHandler{hdlr}
	return s.Handle(s.NewHandler(&LinkStat{h}, opts...))
}

type linkStatHandler struct {
	LinkStatHandler
}

func (h *linkStatHandler) OnlineSessionCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error {
	return h.LinkStatHandler.OnlineSessionCount(ctx, in, out)
}

func (h *linkStatHandler) OnlineAccountCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error {
	return h.LinkStatHandler.OnlineAccountCount(ctx, in, out)
}

func (h *linkStatHandler) OnlineDeviceCount(ctx context.Context, in *OnlineCountRequest, out *OnlineCountResponse) error {
	return h.LinkStatHandler.OnlineDeviceCount(ctx, in, out)
}

func (h *linkStatHandler) OnlineSessionList(ctx context.Context, in *OnlineListRequest, out *OnlineSessionListResponse) error {
	return h.LinkStatHandler.OnlineSessionList(ctx, in, out)
}

func (h *linkStatHandler) OnlineAccountList(ctx context.Context, in *OnlineListRequest, out *OnlineAccountListResponse) error {
	return h.LinkStatHandler.OnlineAccountList(ctx, in, out)
}

func (h *linkStatHandler) OnlineDeviceList(ctx context.Context, in *OnlineListRequest, out *OnlineDeviceListResponse) error {
	return h.LinkStatHandler.OnlineDeviceList(ctx, in, out)
}

func (h *linkStatHandler) CheckSession(ctx context.Context, in *CheckSessionRequest, out *CheckSessionResponse) error {
	return h.LinkStatHandler.CheckSession(ctx, in, out)
}

func (h *linkStatHandler) CheckAccount(ctx context.Context, in *CheckAccountRequest, out *CheckAccountResponse) error {
	return h.LinkStatHandler.CheckAccount(ctx, in, out)
}

func (h *linkStatHandler) CheckDevice(ctx context.Context, in *CheckDeviceRequest, out *CheckDeviceResponse) error {
	return h.LinkStatHandler.CheckDevice(ctx, in, out)
}

func (h *linkStatHandler) Refresh(ctx context.Context, in *RefreshStatRequest, out *RefreshStatResponse) error {
	return h.LinkStatHandler.Refresh(ctx, in, out)
}
